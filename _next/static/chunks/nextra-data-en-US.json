{"/about":{"title":"About","data":{"":"//TODO"}},"/applications/ledger_sync_app":{"title":"Ledger Sync App","data":{"":"This is the main indexer application that reads data from the Cardano blockchain and writes to a PostgreSQL database."}},"/applications/streamer_app":{"title":"Ledger Sync Streamer","data":{"":"Ledger Sync Streamer app reads data from a Cardano node and publishes blockchain data to a messaging middleware like Kafka or RabbitMQ.\nIt publishes blockchain data in the form of events. There are various types of events that can be published by the streamer app, but you can configure which events you want to publish.As this app uses Spring Cloud Stream, it can support other supported binders in Spring Cloud Stream with some minor changes.\n(https://spring.io/projects/spring-cloud-stream)","pre-requisites#Pre-requisites":"To run the streamer app, you need to have following components:\nCardano Node or connect to a remote Cardano node\nDatabase (PostgreSQL, MySQL, H2) : To store cursor/checkpoint data\nMessaging middleware (Kafka, RabbitMQ) : To publish events","events#Events":"Events are published as JSON messages, and each event contains two fields:\nmetadata: Contains metadata about the event, such as block number, slot number, era, etc.\n<payload>: Contains the actual data of the event.\nThe supported events are:\nblockEvent - Shelley and Post Shelley Blocks data (Includes everything transactions, witnesses..)\nrollbackEvent - Rollback event with rollback point\nbyronMainBlockEvent - Byron Main Block data\nbyronEbBlockEvent - Byron Epoch Boundary Block data\nblockHeaderEvent - Shelley and Post Shelley Block Header data\ngenesisBlockEvent - Genesis Block data\ncertificateEvent - Certificate data in a block\ntransactionEvent - Transaction data. One transactionEvent with all transactions in a block\nauxDataEvent - Auxiliary data in a block\nmintBurnEvent - Mint and Burn data in a block\nscriptEvent - Script data of all transactions in a block","channels#Channels":"By default, the events are published to default channels, but you also have the flexibility to\nconfigure custom channels as needed.\nblockEvent - blockTopic\nrollbackEvent - rollbackTopic\nbyronMainBlockEvent - byronMainBlockTopic\nbyronEbBlockEvent - byronEbBlockTopic\nblockHeaderEvent - blockHeaderTopic\ngenesisBlockEvent - genesisBlockTopic\ncertificateEvent - certificateTopic\ntransactionEvent - transactionTopic\nauxDataEvent - auxDataTopic\nmintBurnEvent - mintBurnTopic\nscriptEvent - scriptTopic\nThe default channel can be changed by changing the following properties in application.properties file or Docker environment file.\nspring.cloud.stream.bindings.<event_name>-out-0.destination=<topic_name>\nFor more details on different configuration options, please refer to the application-kafka.properties or application-rabbit.properties file in config folder.","how-to-run-jar-file#How to run (Jar file)":"To run the streamer app, you need Java 21 or a newer version.\nAfter building the project, you can execute the JAR file using the following commands:To run with Kafka binder:\nGo to top level directory of the project.\nEdit the config/application-kafka.properties file and provide required information for Cardano node, datasource, Kafka.\nRun the streamer jar file with kafka profile.\njava -jar -Dspring.profiles.active=kafka streamer-app/build/libs/ledger-sync-streamer-app-<version>.jar\nTo run with Rabbit binder:\nGo to top level directory of the project.\nEdit the config/application-rabbit.properties file and provide required information for cardano node, datasource, RabbitMQ.\nRun the streamer jar file with rabbit profile.\njava -jar -Dspring.profiles.active=rabbit streamer-app/build/libs/ledger-sync-streamer-app-<version>.jar\nImportant: If you want to start the sync again from start, you need to delete the schema from the database and start the sync again.","how-to-run-docker#How to run (Docker)":"There are two Docker compose files available to run the streamer app with Kafka or RabbitMQ in the streamer-app folder.To run with Kafka :\ndocker compose -f docker-compose-kafka.yml up\nTo run with RabbitMQ :\ndocker compose -f docker-compose-rabbit.yml up\nImportant: If you want to start the sync again from start, you need to delete the schema from the database and start the sync again.","to-start-sync-from-a-specific-points#To start sync from a specific points":"Set the following properties in config file to start the sync from a specific point:\nstore.cardano.sync-start-slot=<absolute_slot>\nstore.cardano.sync-start-blockhash=<block_hash>\nFor Docker environment, you can set the following environment variables:\nSTORE_CARDANO_SYNC-START-SLOT=<absolute_slot>\nSTORE_CARDANO_SYNC-START-BLOCKHASH=<block_hash>","kafka-configuration#Kafka Configuration":"The default message size in Kafka is 1 MB. To accommodate larger JSON payloads, which can exceed 1 MB in the case of some blocks, you will need to increase this value.\nKAFKA_MESSAGE_MAX_BYTES=20000000"}},"/build_run":{"title":"How to Run","data":{"pre-requisites#Pre-requisites":"Java 21\nCardano Node or connect to a remote Cardano node\nPostgreSQL DB","build-jar#Build Jar":"./gradlew clean build -x test","update-databse-details#Update databse details":"Edit config/application.properties to add datasource url, username & password.\nspring.datasource.url=jdbc:postgresql://localhost:5432/<db>\nspring.datasource.username=user\nspring.datasource.password=\nRun\njava -jar application/build/libs/ledger-sync-application-<version>-SNAPSHOT.jar"}},"/design":{"title":"Design","data":{"design#Design":"This section describes the design of the Ledger Sync application. Ledger Sync uses the Yaci Store library to interact with the Cardano blockchain.","high-level-design#High Level Design":"","data-flow-diagram#Data Flow Diagram":"","components#Components":""}},"/docker":{"title":"Docker","data":{"docker-build--run#Docker Build & Run":"Build the jar file first\n./gradlew clean build -x test\nBuild docker image\ndocker build  --target ledger-sync -t cardanofoundation/ledger-sync:<version> .","docker-run#Docker Run":"Copy env.example to envEdit env file with database and network details\ndocker run -p 8080:8080 --env-file env cardanofoundation/ledger-sync:<version>"}},"/":{"title":"Index","data":{"overview#Overview":"Ledger Sync is a Java application designed to provide efficient access to Cardano blockchain data.Released under an open-source license, Ledger Sync aims to achieve the same data completeness as Cardano DB Sync while\noffering flexibility and customizations for developers. By addressing challenges in blockchain data retrieval and offering\na reliable Java-based solution, Ledger Sync enhances accessibility to blockchain-related data, supporting diverse projects and fostering Cardano's open-source maturity.Ongoing developments include improving functionality, such as parallel processing during initial sync, scoping indexing,\nrewards data, governance off-chain data, granular pattern matching filtering, etc providing blueprints for various development scenarios,\nwith the Foundation encouraging community engagement and contributions to furhter enhance Ledger Sync's capabalities."}},"/schema":{"title":"Schema Documentation for ledger-sync","data":{"pool_hash#pool_hash":"A table for every unique pool key hash.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\thash_raw\tstring\tThe raw string of the pool hash.\tpool_size\tnumeric\tThe size of the pool.\tepoch_no\tinteger (32)\tThe raw bytes of the pool hash.\tview\tstring\tThe Bech32 encoding of the pool hash.","slot_leader#slot_leader":"Every unique slot leader (ie an entity that mines a block). It could be a pool or a leader defined in genesis.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\thash\tstring\tThe hash of of the block producer identifier.\tpool_hash_id\tinteger (64)\tIf the slot leader is a pool, an index into the PoolHash table.\tdescription\tstring\tAn auto-generated description of the slot leader.","block#block":"A table for blocks on the chain.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\thash\tstring\tThe hash identifier of the block.\tepoch_no\tinteger (32)\tThe epoch number.\tslot_no\tinteger (64)\tThe slot number.\tepoch_slot_no\tinteger (32)\tThe slot number within an epoch (resets to zero at the start of each epoch).\tblock_no\tinteger (64)\tThe block number.\tprevious_id\tinteger (64)\tThe Block table index of the previous block.\tslot_leader_id\tinteger (64)\tThe SlotLeader table index of the creator of this block.\tsize\tinteger (32)\tThe block size (in bytes). Note, this size value is not expected to be the same as the sum of the tx sizes due to the fact that txs being stored in segwit format and oddities in the CBOR encoding.\ttime\ttimestamp\tThe block time (UTCTime).\ttx_count\tinteger (64)\tThe number of transactions in this block.\tproto_major\tinteger (32)\tThe block's major protocol number.\tproto_minor\tinteger (32)\tThe block's major protocol number.\tvrf_key\tstring\tThe VRF key of the creator of this block.\top_cert\tstring\tThe hash of the operational certificate of the block producer.\top_cert_counter\tinteger (64)\tThe value of the counter used to produce the operational certificate.","schema_version#schema_version":"The version of the database schema. Schema versioning is split into three stages as detailed below. This table should\nonly ever have a single row.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\tstage_one\tinteger (64)\tSet up PostgreSQL data types (using SQL 'DOMAIN' statements).\tstage_two\tinteger (64)\tPersistent generated migrations.\tstage_three\tinteger (64)\tSet up database views, indices etc.","tx#tx":"A table for transactions within a block on the chain.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\thash\tinteger (64)\tThe hash identifier of the transaction.\tblock_id\tinteger (64)\tThe Block table index of the block that contains this transaction.\tblock_index\tinteger (64)\tThe index of this transaction with the block (zero based).\tout_sum\tnumeric\tThe sum of the transaction outputs .\tfee\tnumeric\tThe fees paid for this transaction.\tdeposit\tinteger (64)\tDeposit (or deposit refund) in this transaction. Deposits are positive, refunds negative.\tsize\tinteger (32)\tThe size of the transaction in bytes.\tinvalid_before\tinteger (64)\tTransaction in invalid before this slot number.\tinvalid_hereafter\tinteger (64)\tTransaction in invalid at or after this slot number.\tvalid_contract\tboolean\tFalse if the contract is invalid. True if the contract is valid or there is no contract.\tscript_size\tinteger (32)\tThe sum of the script sizes (in bytes) of scripts in the transaction.","stake_address#stake_address":"A table of unique stake addresses. Can be an actual address or a script hash. The existance of an entry doesn't mean the\naddress is registered or in fact that is was ever registered.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\thash_raw\tstring\tThe raw bytes of the stake address hash.\tview\tstring\tThe Bech32 encoded version of the stake address.\tscript_hash\tstring\tThe script hash, in case this address is locked by a script.\tavailable_reward\tnumeric\tThe total amount of ADA rewards that have been accrued by a stake address","tx_out#tx_out":"A table for transaction outputs.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\taddress\tstring\tThe human readable encoding of the output address. Will be Base58 for Byron era addresses and Bech32 for Shelley era.\taddress_has_script\tboolean\tFlag which shows if this address is locked by a script.\taddress_raw\tbytea\tFlag which shows if this address is locked by a script.\tdata_hash\tstring\tThe hash of the transaction output datum. (NULL for Txs without scripts).\tindex\tsmallint\tThe index of this transaction output with the transaction.\tpayment_cred\tstring\tThe payment credential part of the Shelley address. (NULL for Byron addresses). For a script-locked address, this is the script hash.\ttoken_type\tinteger\tType of token (NATIVE_TOKEN(0),TOKEN(1),ALL_TOKEN_TYPE(2)).\tvalue\tnumeric\tThe output value  of the transaction output.\tinline_datum_id\tinteger (64)\tThe inline datum of the output, if it has one.\treference_script_id\tinteger (64)\tThe reference script of the output, if it has one.\tstake_address_id\tinteger (64)\tThe StakeAddress table index for the stake address part of the Shelley address. (NULL for Byron addresses).\ttx_id\tinteger (64)\tThe Tx table index of the transaction that contains this transaction output.","tx_in#tx_in":"A table for transaction inputs.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\ttx_in_id\tinteger (64)\tThe Tx table index of the transaction that contains this transaction input.\ttx_out_index\tsmallint\tThe index within the transaction outputs.\ttx_out_id\tinteger (64)\tThe Tx table index of the transaction that contains the referenced transaction output.\tredeemer_id\tinteger (64)\tThe Redeemer table index which is used to validate this input.","reference_tx_in#reference_tx_in":"A table for reference transaction inputs.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\ttx_in_id\tinteger (64)\tThe Tx table index of the transaction that contains this transaction input\ttx_out_id\tinteger (64)\tThe Tx table index of the transaction that contains the referenced output.\ttx_out_index\tsmallint\tThe index within the transaction outputs.","meta#meta":"A table containing metadata about the chain. There will probably only ever be one row in this table.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\tnetwork_name\tstring\tThe network name.\tstart_time\ttimestamp\tThe start time of the network.\tversion\tstring","epoch#epoch":"Aggregation of data within an epoch.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\tblk_count\tinteger (32)\tThe number of blocks in this epoch.\tend_time\ttimestamp\tThe epoch end time.\tfees\tnumeric\tThe sum of the fees  in this epoch.\tmax_slot\tinteger\tThe maximum slots of this epoch\tno\tinteger\tThe epoch number.\tout_sum\tnumeric\tThe sum of the transaction output values  in this epoch.\tstart_time\ttimestamp\tThe epoch start time.\ttx_count\tinteger (32)\tThe number of transactions in this epoch.\tera\tinteger\tType of era (BYRON_EBB(0),BYRON(1),SHELLEY(2),ALLEGRA(3),MARY(4),ALONZO(5),BABBAGE(6),CONWAY(7)).\trewards_distributed\tnumeric\tThe total amount of ADA that was distributed as staking rewards during a specific epoch.","ada_pots#ada_pots":"A table with all the different types of total balances (Shelley only).\nThe treasury and rewards fields will be correct for the whole epoch, but all other fields change block by block.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\tdeposits\tnumeric\tThe amount  in the obligation pot coming from stake key and pool deposits\tepoch_no\tinteger (32)\tThe epoch number where this AdaPots snapshot was taken.\tfees\tnumeric\tThe amount  in the fee pot.\treserves\tnumeric\tThe amount  in the reserves pot.\trewards\tnumeric\tThe amount  in the rewards pot.\tslot_no\tinteger (64)\tThe slot number where this AdaPots snapshot was taken.\ttreasury\tnumeric\tThe amount  in the treasury pot.\tutxo\tnumeric\tThe amount  in the UTxO set.\tblock_id\tinteger (64)\tThe Block table index of the block for which this snapshot was taken.","pool_metadata_ref#pool_metadata_ref":"An on-chain reference to off-chain pool metadata.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\thash\tvarchar\tThe expected hash for the off-chain data.\turl\tvarchar\tThe URL for the location of the off-chain data.\tpool_id\tinteger (64)\tThe PoolHash table index of the pool for this reference.\tregistered_tx_id\tinteger (64)\tThe Tx table index of the transaction in which provided this metadata reference.","pool_update#pool_update":"An on-chain pool update.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\tactive_epoch_no\tinteger (64)\tThe epoch number where this update becomes active.\tcert_index\tinteger (32)\tThe index of this pool update within the certificates of this transaction.\tfixed_cost\tnumeric\tThe fixed per epoch fee (in ADA) this pool charges.\tmargin\tdouble\tThe margin (as a percentage) this pool charges.\tpledge\tnumeric\tThe amount the pool owner pledges to the pool.\tvrf_key_hash\tvarchar\tThe hash of the pool's VRF key.\tmeta_id\tinteger (64)\tThe PoolMetadataRef table index this pool update refers to.\thash_id\tinteger (64)\tThe PoolHash table index of the pool this update refers to.\tregistered_tx_id\tinteger (64)\tThe Tx table index of the transaction in which provided this pool update.\treward_addr_id\tinteger (64)\tThe StakeAddress table index of this pool's rewards address.","pool_owner#pool_owner":"A table containing pool owners.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\tpool_update_id\tinteger (64)\tThe PoolUpdate table index for the pool.\taddr_id\tinteger (64)\tThe StakeAddress table index for the pool owner's stake address.","pool_retire#pool_retire":"A table containing information about pools retiring.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\tcert_index\tinteger (32)\tThe index of this pool retirement within the certificates of this transaction.\tretiring_epoch\tinteger (32)\tThe epoch where this pool retires.\tannounced_tx_id\tinteger (64)\tThe Tx table index of the transaction where this pool retirement was announced.\thash_id\tinteger (64)\tThe PoolHash table index of the pool this retirement refers to.","pool_relay#pool_relay":"A table containing information about pools relay.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\tdns_name\tstring\tThe DNS name of the relay (NULLable).\tdns_srv_name\tstring\tThe DNS service name of the relay (NULLable).\tipv4\tstring\tThe IPv4 address of the relay (NULLable).\tipv6\tstring\tThe IPv6 address of the relay (NULLable).\tport\tinteger (32)\tThe port number of relay (NULLable).\tupdate_id\tinteger (64)\tThe PoolUpdate table index this PoolRelay entry refers to.","stake_registration#stake_registration":"A table containing stake address registrations.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\tcert_index\tinteger (32)\tThe index of this stake registration within the certificates of this transaction.\tepoch_no\tinteger (32)\tThe epoch in which the registration took place.\taddr_id\tinteger (64)\tThe StakeAddress table index for the stake address.\ttx_id\tinteger (64)\tThe Tx table index of the transaction where this stake address was registered.","stake_deregistration#stake_deregistration":"A table containing stake address deregistrations.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\tcert_index\tinteger (32)\tThe index of this stake deregistration within the certificates of this transaction.\tepoch_no\tinteger (32)\tThe epoch in which the deregistration took place.\taddr_id\tinteger (64)\tThe StakeAddress table index for the stake address.\tredeemer_id\tinteger (64)\tThe Redeemer table index that is related with this certificate.\ttx_id\tinteger (64)\tThe Tx table index of the transaction where this stake address was deregistered.","delegation#delegation":"A table containing delegations from a stake address to a stake pool.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\tactive_epoch_no\tinteger (64)\tThe epoch number where this delegation becomes active.\tcert_index\tinteger (32)\tThe index of this delegation within the certificates of this transaction.\tslot_no\tinteger (64)\tThe slot number of the block that contained this delegation.\taddr_id\tinteger (64)\tThe StakeAddress table index for the stake address.\tpool_hash_id\tinteger (64)\tThe PoolHash table index for the pool being delegated to.\tredeemer_id\tinteger (64)\tThe Redeemer table index that is related with this certificate.\ttx_id\tinteger (64)\tThe Tx table index of the transaction that contained this delegation.","tx_metadata#tx_metadata":"A table for metadata attached to a transaction.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\tbytes\tbytea\tThe raw bytes of the payload.\tjson\ttext\tThe JSON payload if it can be decoded as JSON.\tkey\tnumeric\tThe metadata key.\ttx_id\tinteger (64)\tThe Tx table index of the transaction where this metadata was included.","tx_metadata_hash#tx_metadata_hash":"A table for hash metadata attached to a transaction.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\thash\tstring\tThe hash of metadata of transaction.","reward#reward":"A table for earned staking rewards.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\tamount\tnumeric\tThe reward amount.\tearned_epoch\tinteger (64)\tThe epoch in which the reward was earned. For pool and leader rewards spendable in epoch N, this will be N - 2, refund N.\tspendable_epoch\tinteger (64)\tThe epoch in which the reward is actually distributed and can be spent.\ttype\tstring\tThe type of the rewards (\"leader\", \"member\",\"reserves\",\"treasury\",\"refund\")\taddr_id\tinteger (64)\tThe StakeAddress table index for the stake address that earned the reward.\tpool_id\tinteger (64)\tThe PoolHash table index for the pool the stake address was delegated to when the reward is earned or for the pool that there is a deposit refund.","withdrawal#withdrawal":"A table for withdrawals from a reward account.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\tamount\tnumeric\tThe withdrawal amount.\taddr_id\tinteger (64)\tThe StakeAddress table index for the stake address for which the withdrawal is for.\tredeemer_id\tinteger (64)\tThe Redeemer table index that is related with this withdrawal.\ttx_id\tinteger (64)\tThe Tx table index for the transaction that contains this withdrawal.","epoch_stake#epoch_stake":"A table containing the epoch stake distribution for each epoch.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\tamount\tnumeric\tThe amount being staked.\tepoch_no\tinteger (32)\tThe epoch number.\taddr_id\tinteger (64)\tThe StakeAddress table index for the stake address for this EpochStake entry.\tpool_id\tinteger (64)\tThe PoolHash table index for the pool this entry is delegated to.","treasury#treasury":"A table for payments from the treasury to a StakeAddress.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\tamount\tnumeric\tThe payment amount.\tcert_index\tinteger (32)\tThe index of this payment certificate within the certificates of this transaction.\taddr_id\tinteger (64)\tThe StakeAddress table index for the stake address for this Treasury entry.\ttx_id\tinteger (64)\tThe Tx table index for the transaction that contains this payment.","reserve#reserve":"A table for payments from the reserves to a StakeAddress.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\tamount\tnumeric\tThe payment amount.\tcert_index\tinteger (32)\tThe index of this payment certificate within the certificates of this transaction.\taddr_id\tinteger (64)\tThe StakeAddress table index for the stake address for this Treasury entry.\ttx_id\tinteger (64)\tThe Tx table index for the transaction that contains this payment.","pot_transfer#pot_transfer":"A table containing transfers between the reserves pot and the treasury pot.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\tcert_index\tinteger (32)\tThe index of this transfer certificate within the certificates of this transaction.\treserves\tnumeric\tThe amount the reserves balance changes by.\ttreasury\tnumeric\tThe amount the treasury balance changes by.\ttx_id\tinteger (64)\tThe Tx table index for the transaction that contains this transfer.","epoch_sync_time#epoch_sync_time":"A table containing the time required to fully sync an epoch.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\tno\tinteger (64)\tThe epoch number for this sync time.\tseconds\tinteger (64)\tThe time (in seconds) required to sync this epoch (may be NULL for an epoch that was already partially synced when db-sync was started).\tstate\tstring\tThe sync state when the sync time is recorded (either 'lagging' or 'following').","multi_asset#multi_asset":"A table containing all information the unique policy/name pairs along with a CIP14 asset fingerprint\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\tfingerprint\tstring\tThe CIP14 fingerprint for the MultiAsset.\tname\tbytea\tThe MultiAsset name.\tpolicy\tstring\tThe MultiAsset policy hash.\tunit\tstring\tThe MultiAsset unit.\tsupply\tnumeric\tThe MultiAsset supply.\ttime\ttimestamp\tThe MultiAsset time.\tname_view\tstring\tThe MultiAsset name view.","ma_tx_mint#ma_tx_mint":"A table containing Multi-Asset mint events.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\tquantity\tnumeric\tThe amount of the Multi Asset to mint (can be negative to \"burn\" assets).\tident\tinteger (64)\tThe MultiAsset table index specifying the asset.\ttx_id\tinteger (64)\tThe Tx table index for the transaction that contains this minting event.","ma_tx_out#ma_tx_out":"A table containing Multi-Asset transaction outputs.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\tquantity\tnumeric\tThe Multi Asset transaction output amount (denominated in the Multi Asset).\tident\tinteger (64)\tThe MultiAsset table index specifying the asset.\ttx_out_id\tinteger (64)\tThe TxOut table index for the transaction that this Multi Asset transaction output.","redeemer#redeemer":"A table containing redeemers. A redeemer is provided for all items that are validated by a script.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\tfee\tnumeric\tThe budget in fees to run a script. The fees depend on the ExUnits and the current prices. Is null when --disable-ledger is enabled.\tindex\tword31type\tThe index of the redeemer pointer in the transaction.\tpurpose\tstring\tWhat kind pf validation this redeemer is used for. It can be one of 'spend', 'mint', 'cert', 'reward'.\tscript_hash\tstring\tThe script hash this redeemer is used for.\tunit_mem\tinteger (64)\tThe budget in Memory to run a script.\tunit_steps\tinteger (64)\tThe budget in Cpu steps to run a script.\tredeemer_data_id\tinteger (64)\tThe data related to this redeemer.\ttx_id\tinteger (64)\tThe Tx table index that contains this redeemer.","script#script":"A table containing scripts available, found in witnesses, inlined in outputs (reference outputs) or auxdata of\ntransactions.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\tbytes\tbytea\tCBOR encoded plutus script data, null for other script types\thash\tstring\tThe Hash of the Script.\tjson\ttext\tJSON representation of the timelock script, null for other script types\tserialised_size\tinteger (32)\tThe size of the CBOR serialised script, if it is a Plutus script.\ttype\tstring\tThe type of the script. This is currenttly either 'timelock' or 'plutus'.\ttx_id\tinteger (64)\tThe Tx table index for the transaction where this script first became available.\tverified\tbool\tCheck the script has been verified.","datum#datum":"A table containing Plutus Datum, found in witnesses or inlined in outputs\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\tbytes\tbytea\tThe actual data in CBOR format\thash\tstring\tThe Hash of the Datum\tvalue\ttext\tThe actual data in JSON format (detailed schema)\ttx_id\tinteger (64)\tThe Tx table index for the transaction where this script first became available.","redeemer_data#redeemer_data":"A table containing Plutus Redeemer Data. These are always referenced by at least one redeemer. New in v13: split from\ndatum table.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\tbytes\tbytea\tThe actual data in CBOR format\thash\tstring\tThe Hash of the Plutus Data\tvalue\ttext\tThe actual data in JSON format (detailed schema)\ttx_id\tinteger (64)\tThe Tx table index for the transaction where this script first became available.","extra_key_witness#extra_key_witness":"A table containing transaction extra key witness hashes.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\thash\tstring\tThe hash of the witness.\ttx_id\tinteger (64)\tThe id of the tx this witness belongs to.","param_proposal#param_proposal":"A table containing block chain parameter change proposals.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\tcoins_per_utxo_size\tnumeric\tFor Alonzo this is the cost per UTxO word. For Babbage and later per UTxO byte.\tcollateral_percent\tinteger (32)\tThe percentage of the txfee which must be provided as collateral when including non-native scripts.\tdecentralisation\tdouble\tThe decentralisation parameter (1 fully centralised, 0 fully decentralised).\tentropy\tstring\tThe 32 byte string of extra random-ness to be added into the protocol's entropy pool.\tepoch_no\tinteger (64)\tThe epoch for which this parameter proposal in intended to become active. Always null in Conway era.\tinfluence\tdouble\tThe influence of the pledge on a stake pool's probability on minting a block.\tkey\tstring\tThe hash of the crypto key used to sign this proposal. Always null in Conway era.\tkey_deposit\tnumeric\tThe amount (in Lovelace) require for a deposit to register a StakeAddress.\tmax_bh_size\tnumeric\tThe maximum block header size (in bytes).\tmax_block_ex_mem\tnumeric\tThe maximum number of execution memory allowed to be used in a single block.\tmax_block_ex_steps\tnumeric\tThe maximum number of execution steps allowed to be used in a single block.\tmax_block_size\tnumeric\tThe maximum block size (in bytes).\tmax_collateral_inputs\tinteger (32)\tThe maximum number of collateral inputs allowed in a transaction.\tmax_epoch\tnumeric\tThe maximum number of epochs in the future that a pool retirement is allowed to be scheduled for.\tmax_tx_ex_mem\tnumeric\tThe maximum number of execution memory allowed to be used in a single transaction.\tmax_tx_ex_steps\tnumeric\tThe maximum number of execution steps allowed to be used in a single transaction.\tmax_tx_size\tnumeric\tThe maximum transaction size (in bytes).\tmax_val_size\tnumeric\tThe maximum Val size.\tmin_fee_a\tnumeric\tThe 'a' parameter to calculate the minimum transaction fee.\tmin_fee_b\tnumeric\tThe 'b' parameter to calculate the minimum transaction fee.\tmin_pool_cost\tnumeric\tThe minimum pool cost.\tmin_utxo_value\tnumeric\tThe minimum value of a UTxO entry.\tmonetary_expand_rate\tdouble\tThe monetary expansion rate.\toptimal_pool_count\tnumeric\tThe optimal number of stake pools.\tpool_deposit\tnumeric\tThe amount (in Lovelace) require for a deposit to register a stake pool.\tprice_mem\tdouble\tThe per word cost of script memory usage.\tprice_step\tdouble\tThe cost of script execution step usage.\tprotocol_major\tinteger (32)\tThe protocol major number.\tprotocol_minor\tinteger (32)\tThe protocol minor number.\ttreasury_growth_rate\tdouble\tThe treasury growth rate.\tcost_model_id\tinteger (64)\tThe CostModel table index for the proposal.\tregistered_tx_id\tinteger (64)\tThe Tx table index for the transaction that contains this parameter proposal.\tpvt_motion_no_confidence\tdouble\tPool Voting threshold for motion of no-confidence.\tpvt_committee_normal\tdouble\tPool Voting threshold for new committee/threshold (normal state).\tpvt_committee_no_confidence\tdouble\tPool Voting threshold for new committee/threshold (state of no-confidence).\tpvt_hard_fork_initiation\tdouble\tPool Voting threshold for hard-fork initiation.\tpvt_p_p_security_group\tdouble\tPool Vote threshold for protocol parameter changes, security group.\tpvt_p_p_technical_group\tdouble\tPool Vote threshold for protocol parameter changes, technical group.\tpvt_p_p_gov_group\tdouble\tPool Vote threshold for protocol parameter changes, governance group.\tpvt_treasury_withdrawal\tdouble\tPool Vote threshold for treasury withdrawal.\tdvt_motion_no_confidence\tdouble\tDRep Vote threshold for motion of no-confidence.\tdvt_committee_normal\tdouble\tDRep Vote threshold for new committee/threshold (normal state).\tdvt_committee_no_confidence\tdouble\tDRep Vote threshold for new committee/threshold (state of no-confidence).\tdvt_update_to_constitution\tdouble\tDRep Vote threshold for update to the Constitution.\tdvt_hard_fork_initiation\tdouble\tDRep Vote threshold for hard-fork initiation.\tdvt_p_p_network_group\tdouble\tDRep Vote threshold for protocol parameter changes, network group.\tdvt_p_p_economic_group\tdouble\tDRep Vote threshold for protocol parameter changes, economic group.\tcommittee_min_size\tnumeric\tMinimal constitutional committee size.\tcommittee_max_term_length\tnumeric\tConstitutional committee term limits.\tgov_action_lifetime\tnumeric\tGovernance action expiration.\tgov_action_deposit\tnumeric\tGovernance action deposit.\tdrep_deposit\tnumeric\tDRep deposit amount.\tdrep_activity\tnumeric\tDRep activity period.\tmin_fee_ref_script_cost_per_byte\tnumeric\tMin fee ref script cost per byte","epoch_param#epoch_param":"The accepted protocol parameters for an epoch.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\tcoins_per_utxo_size\tnumeric\tFor Alonzo this is the cost per UTxO word. For Babbage and later per UTxO byte.\tcollateral_percent\tinteger (32)\tThe percentage of the txfee which must be provided as collateral when including non-native scripts.\tdecentralisation\tdouble\tThe decentralisation parameter (1 fully centralised, 0 fully decentralised).\tepoch_no\tinteger (32)\tThe first epoch for which these parameters are valid.\textra_entropy\tstring\tThe 32 byte string of extra random-ness to be added into the protocol's entropy pool.\tinfluence\tdouble\tThe influence of the pledge on a stake pool's probability on minting a block.\tkey_deposit\tnumeric\tThe amount require for a deposit to register a StakeAddress.\tmax_bh_size\tinteger (32)\tThe maximum block header size (in bytes).\tmax_block_ex_mem\tnumeric\tThe maximum number of execution memory allowed to be used in a single block.\tmax_block_ex_steps\tnumeric\tThe maximum number of execution steps allowed to be used in a single block.\tmax_block_size\tinteger (32)\tThe maximum block size (in bytes).\tmax_collateral_inputs\tinteger (32)\tThe maximum number of collateral inputs allowed in a transaction.\tmax_epoch\tinteger (32)\tThe maximum number of epochs in the future that a pool retirement is allowed to be scheduled for.\tmax_tx_ex_mem\tnumeric\tThe maximum number of execution memory allowed to be used in a single transaction.\tmax_tx_ex_steps\tnumeric\tThe maximum number of execution steps allowed to be used in a single transaction.\tmax_tx_size\tinteger (32)\tThe maximum transaction size (in bytes).\tmax_val_size\tnumeric\tThe maximum Val size.\tmin_fee_a\tinteger (32)\tThe 'a' parameter to calculate the minimum transaction fee.\tmin_fee_b\tinteger (32)\tThe 'b' parameter to calculate the minimum transaction fee.\tmin_pool_cost\tnumeric\tThe minimum pool cost.\tmin_utxo_value\tnumeric\tThe minimum value of a UTxO entry.\tmonetary_expand_rate\tdouble\tThe monetary expansion rate.\tnonce\tstring\tThe nonce value for this epoch.\toptimal_pool_count\tinteger (32)\tThe optimal number of stake pools.\tpool_deposit\tnumeric\tThe amount (in Lovelace) require for a deposit to register a stake pool.\tprice_mem\tdouble\tThe per word cost of script memory usage.\tprice_step\tdouble\tThe cost of script execution step usage.\tprotocol_major\tinteger (32)\tThe protocol major number.\tprotocol_minor\tinteger (32)\tThe protocol minor number.\ttreasury_growth_rate\tdouble\tThe treasury growth rate.\tblock_id\tinteger (64)\tThe Block table index for the first block where these parameters are valid.\tcost_model_id\tinteger (64)\tThe CostModel table index for the params.\tpvt_motion_no_confidence\tdouble\tPool Voting threshold for motion of no-confidence.\tpvt_committee_normal\tdouble\tPool Voting threshold for new committee/threshold (normal state).\tpvt_committee_no_confidence\tdouble\tPool Voting threshold for new committee/threshold (state of no-confidence).\tpvt_hard_fork_initiation\tdouble\tPool Voting threshold for hard-fork initiation.\tpvt_p_p_security_group\tdouble\tPool Vote threshold for protocol parameter changes, security group.\tpvt_p_p_technical_group\tdouble\tPool Vote threshold for protocol parameter changes, technical group.\tpvt_p_p_gov_group\tdouble\tPool Vote threshold for protocol parameter changes, governance group.\tpvt_treasury_withdrawal\tdouble\tPool Vote threshold for treasury withdrawal.\tdvt_motion_no_confidence\tdouble\tDRep Vote threshold for motion of no-confidence.\tdvt_committee_normal\tdouble\tDRep Vote threshold for new committee/threshold (normal state).\tdvt_committee_no_confidence\tdouble\tDRep Vote threshold for new committee/threshold (state of no-confidence).\tdvt_update_to_constitution\tdouble\tDRep Vote threshold for update to the Constitution.\tdvt_hard_fork_initiation\tdouble\tDRep Vote threshold for hard-fork initiation.\tdvt_p_p_network_group\tdouble\tDRep Vote threshold for protocol parameter changes, network group.\tdvt_p_p_economic_group\tdouble\tDRep Vote threshold for protocol parameter changes, economic group.\tcommittee_min_size\tnumeric\tMinimal constitutional committee size.\tcommittee_max_term_length\tnumeric\tConstitutional committee term limits.\tgov_action_lifetime\tnumeric\tGovernance action expiration.\tgov_action_deposit\tnumeric\tGovernance action deposit.\tdrep_deposit\tnumeric\tDRep deposit amount.\tdrep_activity\tnumeric\tDRep activity period.\tmin_fee_ref_script_cost_per_byte\tnumeric\tMin fee ref script cost per byte","cost_model#cost_model":"CostModel for EpochParam and ParamProposal.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\tcosts\ttext\tThe actual costs formatted as json.\thash\tstring\tThe hash of cost model. It ensures uniqueness of entries.","reserved_pool_ticker#reserved_pool_ticker":"A table containing a managed list of reserved ticker names.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\tname\tstring\tThe ticker name.\tpool_hash\tstring\tThe hash of the pool that owns this ticker.","delisted_pool#delisted_pool":"A table containing pools that have been delisted.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\thash_raw\tstring\tThe pool hash","unconsume_tx_in#unconsume_tx_in":"A table for unconsume transaction inputs.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\ttx_in_id\tinteger (64)\tThe Tx table index of the transaction that contains this transaction input.\ttx_out_index\tsmallint\tThe index within the transaction outputs.\ttx_out_id\tinteger (64)\tThe Tx table index of the transaction that contains the referenced transaction output.\tredeemer_id\tinteger (64)\tThe Redeemer table index which is used to validate this input.","tx_witnesses#tx_witnesses":"A table for transaction witnesses.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\ttx_id\tinteger (64)\tThe Tx table index of the transaction.\tkey\tstring\tKey used for signing the transaction.\tsignature\tstring\tThe signature of the transaction.\tindex_arr\tinteger[]\tArray containing the transaction index.\tindex_arr_size\tinteger (32)\tSize of index array.\ttype\tstring\tType of transaction witnesses.","tx_bootstrap_witnesses#tx_bootstrap_witnesses":"A table for transaction bootstrap witnesses.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\ttx_id\tinteger (64)\tThe Tx table index of the transaction.\tpublic_key\tstring\tPublic key of the transaction.\tsignature\tstring\tThe signature of the transaction.\tchain_code\tstring\tThe chain code of the transaction.\tattributes\tstring\tThe attributes of the transaction.","rollback_history#rollback_history":"A table for rollback history.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\tblock_hash\tstring\tThe hash of block.\tblock_no\tinteger (64)\tThe number of hash.\trollback_time\ttimestamp\tRollback time.\tslot_no\tinteger (64)\tThe slot number.","pool_offline_data#pool_offline_data":"The pool offchain (ie not on chain) for a stake pool.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\tbytes\tbytea\tThe raw bytes of the payload.\thash\tstring\tThe hash identifier of the pool.\tjson\tstring\tThe payload as JSON.                                 .\tticker_name\tstring\tThe pool's ticker name.\tpool_id\tinteger (64)\tThe pool index.\tpmr_id\tinteger (64)\tThe PoolMetadataRef table index for this offchain data.\tpool_name\tstring\tName of pool.\tlogo_url\tstring\tLogo url of pool.\ticon_url\tstring\tIcon url of pool.","pool_offline_fetch_error#pool_offline_fetch_error":"A table containing pool offchain data fetch errors.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\tfetch_error\tstring\tThe text of the error.\tfetch_time\ttimestamp\tThe UTC time stamp of the error.\tretry_count\tinteger (32)\tThe number of retries.\tpool_id\tinteger (64)\tThe PoolHash table index for the pool this offchain fetch error refers.\tpmr_id\tinteger (64)\tThe PoolMetadataRef table index for this offchain data.","failed_tx_out#failed_tx_out":"A table for transaction collateral outputs.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (64)\t\taddress\tstring\tThe human readable encoding of the output address. Will be Base58 for Byron era addresses and Bech32 for Shelley era.\taddress_has_script\tboolean\tFlag which shows if this address is locked by a script.\taddress_raw\tbytea\tFlag which shows if this address is locked by a script.\tdata_hash\tstring\tThe hash of the transaction output datum. (NULL for Txs without scripts).\tindex\tsmallint\tThe index of this transaction output with the transaction.\tmulti_assets_descr\ttext\tThis is a description of the multiassets in collateral output. Since the output is not really created, we don't need to add them in separate tables.\tpayment_cred\tstring\tThe payment credential part of the Shelley address. (NULL for Byron addresses). For a script-locked address, this is the script hash.\tvalue\tnumeric\tThe output value (in Lovelace) of the transaction output.\tinline_datum_id\tinteger (64)\tThe inline datum of the output, if it has one.\treference_script_id\tinteger (64)\tThe reference script of the output, if it has one.\tstake_address_id\tinteger (64)\tThe StakeAddress table index for the stake address part of the Shelley address. (NULL for Byron addresses).\ttx_id\tinteger (64)\tThe Tx table index of the transaction that contains this transaction output.","committee_deregistration#committee_deregistration":"A table for every committee key de-registration.\nPrimary Id: {tx_hash, cert_index}\nColumn name\tType\tDescription\ttx_hash\tstring\tHash of the tx that includes this certificate.\tcert_index\tinteger (32)\tThe index of this deregistration within the certificates of this transaction.\tanchor_url\tstring\tURL that links to documents or additional information about deregistering a committee key\tanchor_hash\tstring\tHash of anchor_url\tcold_key\tstring\tThe deregistered cold key.\tcred_type\tstring\tCredential type used in deregistration (ADDR_KEYHASH, SCRIPTHASH).\tepoch\tinteger (32)\tThe epoch number at the time of deregistration.\tslot\tinteger (64)\tThe slot number at the time of deregistration.\tblock\tinteger (64)\tBlock number in the blockchain at the time of deregistration.\tblock_time\tinteger (64)\tTime of the block containing the deregistration transaction.\tupdate_datetime\ttimestamp\tThe update time of record","committee_registration#committee_registration":"A table for every committee key registration.\nPrimary Id: {tx_hash, cert_index}\nColumn name\tType\tDescription\ttx_hash\tstring\tHash of the tx that includes this certificate.\tcert_index\tinteger (32)\tThe index of this registration within the certificates of this transaction.\tcold_key\tstring\tThe deregistered cold key.\thot_key\tstring\tThe deregistered hot key.\tcred_type\tstring\tCredential type used in registration (ADDR_KEYHASH, SCRIPTHASH).\tepoch\tinteger (32)\tThe epoch number at the time of registration.\tslot\tinteger (64)\tThe slot number at the time of registration.\tblock\tinteger (64)\tBlock number in the blockchain at the time of registration.\tblock_time\tinteger (64)\tTime of the block containing the registration transaction.\tupdate_datetime\ttimestamp\tThe update time of record","committee_member#committee_member":"A table for members of the committee. A committee can have multiple members.\nPrimary Id: {hash, slot}\nColumn name\tType\tDescription\thash\tstring\tThe committee hash.\tcred_type\tstring\tType of credential (ADDR_KEYHASH, SCRIPTHASH).\tstart_epoch\tinteger (32)\tThe epoch this member start.\texpired_epoch\tinteger (32)\tThe epoch this member expires.\tslot\tinteger (64)\tSlot number.\tupdate_datetime\ttimestamp\tThe update time of record","constitution#constitution":"A table for constitutiona attached to a GovActionProposal.\nPrimary Id: active_epoch\nColumn name\tType\tDescription\tactive_epoch\tinteger (64)\tThe epoch this constitutiona attached.\tanchor_url\tstring\tURL of the document or information source containing the details of the constitution.\tanchor_hash\tstring (64)\tHash of anchor_url.\tscript\tstring\tThe Script Hash.\tslot\tinteger (64)\tSlot number.\tupdate_datetime\ttimestamp\tThe update time of record.","cursor_#cursor_":"Table to track the current block position during synchronization.\nPrimary Id: id\nColumn name\tType\tDescription\tid\tinteger (32)\t\tblock_hash\tstring\tThe hash of block.\tslot\tinteger (64)\tSlot number.\tblock_number\tinteger (64)\tBlock number\tera\tinteger (32)\tType of era (BYRON_EBB(0),BYRON(1),SHELLEY(2),ALLEGRA(3),MARY(4),ALONZO(5),BABBAGE(6),CONWAY(7)).\tprev_block_hash\tstring\tThe hash of previous block.\tcreate_datetime\ttimestamp\tThe create time of record.\tupdate_datetime\ttimestamp\tThe update time of record.","delegation_vote#delegation_vote":"A table containing delegations from a stake address to a stake pool.\nPrimary Id: {tx_hash, cert_index}\nColumn name\tType\tDescription\ttx_hash\tstring\tHash of the tx that includes this certificate.\tcert_index\tinteger (32)\tThe index of this transfer certificate within the certificates of this transaction.\taddress\tstring\tThe stake address.\tdrep_hash\tstring\tThe Drep hash for the pool being delegated to.\tdrep_id\tstring\tDrep index for the pool being delegated to.\tdrep_type\tstring\tThe Drep type (ADDR_KEYHASH, SCRIPTHASH, ABSTAIN,NO_CONFIDENCE).\tepoch\tinteger (32)\tThe epoch number at the time of delegation vote.\tcredential\tstring\tThe Certification information related to votes.\tcred_type\tstring\tThe credential type (ADDR_KEYHASH, SCRIPTHASH).\tslot\tinteger (64)\tSlot number.\tblock\tinteger (64)\tBlock number.\tblock_time\tinteger (64)\tTime when the block containing the transaction was created..\tupdate_datetime\ttimestamp\tThe update time of record","drep_registration#drep_registration":"A table for DRep registrations, deregistrations or updates.\nPrimary Id: {tx_hash, cert_index}\nColumn name\tType\tDescription\ttx_hash\tstring\tHash of the tx\tcert_index\tinteger (32)\tThe index of this registration within the certificates of this transaction.\ttype\tvarchar(50)\tType of DREP registration (e.g., stake pool registration, withdrawal)\tdeposit\tinteger (64)\tAmount of ADA deposited for specific registration types\tdrep_hash\tvarchar(56)\tDrep hash for the pool being delegated to\tdrep_id\tvarchar(255)\tUnique identifier for  a delegated representative (Bech32)\tanchor_url\tvarchar\tURL for additional information about the registration\tanchor_hash\tvarchar(64)\tHash of the off-chain data pointed to by anchor_url\tcred_type\tvarchar(40)\tType of credential used for registration (ADDR_KEYHASH, SCRIPTHASH)\tepoch\tinteger (32)\tEpoch number\tslot\tinteger (64)\tSlot number\tblock\tinteger (64)\tBlock number\tblock_time\tinteger (64)\tBlock time\tupdate_datetime\ttimestamp\tDate and time the record was last updated","era#era":"A table for era information\nByron(1), Shelley(2), Allegra(3), Mary(4), Alonzo(5), Babbage(6), Conway(7);\nPrimary Id: era\nColumn name\tType\tDescription\tera\tinteger (32)\tEra identifier\tstart_slot\tinteger (64)\tSlot number at which the era begins\tblock\tinteger (64)\tBlock number that marks the start of the era\tblock_hash\tstring\tHash of the block that starts the era","flyway_schema_history#flyway_schema_history":"A table for the execution history of Flyway schema migrations.\nColumn name\tType\tDescription\tinstalled_rank\tinteger (32)\tIndex the order of the records in the table, determining the order in which changes were applied.\tversion\tstring\tThe version of the change applied\tdescription\tstring\tBrief description of the applied change\ttype\tstring\tType of change\tscript\tstring\tThe name of the script file containing the applied changes\tchecksum\tinteger (32)\tChecksum value of the script file, helps detect changes in the script file\tinstalled_by\tstring\tThe name of the user or process to which the change was applied\tinstalled_on\ttimestamp\tTime when the change was applied\texecution_time\tinteger (32)\tFile execution time\tsuccess\tbool\tStatus of change","gov_action_proposal#gov_action_proposal":"A table contains information about proposed government actions.\nPrimary Id: {tx_hash, idx}\nColumn name\tType\tDescription\ttx_hash\tstring\tThe hash of the tx that includes this certificate\tidx\tinteger (32)\tThe index of this proposal procedure within its transaction\tdeposit\tinteger (64)\tThe deposit amount payed for this proposal (in lovelace)\treturn_address\tstring\tThe reward address that receive the deposit when it is repaid\tanchor_url\tstring\tURL for additional information about the proposal\tanchor_hash\tstring\tHash of the off-chain data pointed to by anchor_url\ttype\tstring\tCan be one of ParameterChange, HardForkInitiation, TreasuryWithdrawals, NoConfidence, NewCommittee, NewConstitution, InfoAction\tdetails\tjsonb\tJSON document describing the content of  governance action\tepoch\tinteger (32)\tEpoch number\tslot\tinteger (64)\tSlot number\tblock\tinteger (64)\tBlock number\tblock_time\tinteger (64)\tBlock time\tupdate_datetime\ttimestamp\tDate and time the record was last updated","voting_procedure#voting_procedure":"A table for voting procedures, aka GovVote. A Vote can be Yes No or Abstain.\nPrimary Id: {tx_hash, voter_hash, gov_action_tx_hash, gov_action_index}\nColumn name\tType\tDescription\ttx_hash\tstring\tTransaction hash of the tx that includes this VotingProcedure\tvoter_hash\tstring\tHash identifying the voter (not null, part of primary key)\tgov_action_tx_hash\tstring\tTransaction hash of the governance action\tgov_action_index\tinteger (32)\tThe index of this proposal procedure within its transaction\tid\tuuid\tUnique identifier\tidx\tinteger (32)\tThe index of this VotingProcedure within this transaction\tvoter_type\tstring\tThe role of the voter. Can be one of ConstitutionalCommittee, DRep, SPO\tvote\tstring\tThe Vote. Can be one of Yes, No, Abstain\tanchor_url\tstring\tURL for additional information about the vote\tanchor_hash\tstring\tHash of the off-chain data pointed to by anchor_url\tepoch\tinteger (32)\tEpoch number\tslot\tinteger (64)\tSlot number\tblock\tinteger (64)\tBlock number\tblock_time\tinteger (64)\tBlock time\tupdate_datetime\ttimestamp\tDate and time the record was last updated","address_balance#address_balance":"A table for balance of address\nPrimary Id: {address, unit, slot}\nColumn Name\tData Type\tDescription\taddress\tstring\tBech32 encoded address\tunit\tstring\tThe unit for the quantity (e.g., lovelace for ADA)\tslot\tinteger (64)\tSlot number\tquantity\tnumeric\tNumeric representation of the asset amount\taddr_full\ttext\tFull address details in Cardano format\tpolicy\tstring\tPolicy ID (fingerprint) of the off-chain asset definition\tasset_name\tstring\tOptional human-readable name of the asset\tblock_hash\tstring\tHash of the block\tblock\tinteger (64)\tBlock number\tblock_time\tinteger (64)\tBlock time\tepoch\tinteger (32)\tEpoch number\tupdate_datetime\ttimestamp\tDate and time the record was last updated","stake_address_balance#stake_address_balance":"A table for balance of stake address\nPrimary Id: {address, slot}\nColumn Name\tData Type\tDescription\taddress\tstring\tBech32 encoded stake address\tslot\tinteger (64)\tSlot number\tquantity\tnumeric\tNumeric representation of the lovelace\tstake_credential\tstring\tStake credential associated with the address\tblock_hash\tstring\tHash of the block\tblock\tinteger (64)\tBlock number\tblock_time\tinteger (64)\tUnix timestamp representing the time the block was produced\tepoch\tinteger (32)\tEpoch number\tupdate_datetime\ttimestamp\tDate and time the record was last updated","address_tx_amount#address_tx_amount":"A table for the change in the balance of an address at a specific transaction.\nPrimary Id: {address, unit, tx_hash}\nColumn Name\tData Type\tDescription\taddress\tstring\tBech32 encoded address\tunit\tstring\tOptional unit for the quantity (e.g., lovelace for ADA)\ttx_hash\tstring\tThe hash identifier of the transaction\tslot\tinteger (64)\tSlot number\tquantity\tnumeric\tNumeric representation of the asset amount involved in the transaction\taddr_full\ttext\tFull address details in Cardano format\tstake_address\tstring\tBech32 encoded stake address associated with the transaction\tblock\tinteger (64)\tBlock number\tblock_time\tinteger (64)\tUnix timestamp representing the time the block was produced\tepoch\tinteger (32)\tEpoch number when the transaction occurred","account_config#account_config":"A table containing information about account config\nPrimary Id: config_id\nColumn Name\tData Type\tDescription\tconfig_id\tstring\tUnique identifier for the account configuration\tstatus\tstring\tCurrent status of the account configuration (BALANCE_SNAPSHOT)\tslot\tinteger (64)\tSlot number\tblock\tinteger (64)\tBlock number\tblock_hash\tstring\tHash of the block","address_utxo#address_utxo":"A table for transaction outputs (Used for account balance calculator).\nPrimary Id: {tx_hash, output_index,}\nColumn name\tType\tDescription\ttx_hash\tstring\tThe hash identifier of the transaction that contains this transaction output\toutput_index\tsmallint\tThe index of this transaction output with the transaction\tslot\tinteger (64)\tSlot number\tblock_hash\tstring\tHash of the block\tepoch\tinteger (32)\tEpoch number\tlovelace_amount\tinteger (64)\tThe output value (in Lovelace) of the transaction output\tamounts\tjsonb\tObject containing the amount of each multi-asset coin in the UTXO.","tx_input#tx_input":"A table for tx inputs which reference outputs from previous transactions (Used for account balance calculator).\nPrimary Id: {tx_hash, output_index,}\nColumn name\tType\tDescription\ttx_hash\tstring\tThe hash identifier of the transaction\toutput_index\tsmallint\tThe index within the transaction outputs\tspent_at_slot\tinteger (64)\tSlot number in which the UTXO was spent\tspent_at_block\tinteger (64)\tBlock number in which the UTXO was spent\tspent_at_block_hash\tstring\tUnique identifier for the block containing the spending transaction\tspent_block_time\tinteger (64)\tUnix timestamp of the block containing the spending transaction\tspent_epoch\tinteger (32)\tEpoch number when the UTXO was spent\tspent_tx_hash\tstring\tUnique identifier for the spending transaction","address#address":"A table for information about address\nPrimary Id: id\nColumn name\tType\tDescription\tid\tbigserial\tUnique identifier for the address (auto-incrementing)\taddress\tstring\tBech32 address in the Cardano blockchain.\taddr_full\ttext\tFull address information (might include more details)\tpayment_credential\tstring\tBech32 payment credential for the address\tstake_address\tstring\tBech32 stake address associated with the address\tstake_credential\tstring\tBech32 stake credential associated with the address\tupdate_datetime\ttimestamp\tTimestamp of the last update to this record."}}}