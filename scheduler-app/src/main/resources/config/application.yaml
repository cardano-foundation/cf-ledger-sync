spring:
  # Datasource specific configs
  datasource:
    # Hikari specific configs
    hikari:
      pool-name: explorer-schedule-pool
      minimum-idle: 10 #minimum number of idle connections maintained by HikariCP in a connection pool
      maximum-pool-size: ${MAXIMUM_POOL_SIZE:48} #maximum pool size
      idle-timeout: 300000 #maximum idle time for connection
      max-lifetime: 900000 #maximum lifetime in milliseconds of a connection in the pool after it is closed.
      connection-timeout: 50000 #maximum number of milliseconds that a client will wait for a connection
      auto-commit: false #default auto-commit behavior.
      connection-init-sql: SELECT 1
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true
        useLocalSessionState: true
        rewriteBatchedStatements: true
        cacheResultSetMetadata: true
        cacheServerConfiguration: true
        elideSetAutoCommits: true
        maintainTimeStats: false
  # JPA specific configs
  jpa:
    open-in-view: false
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        jdbc.batch_size: 1000
        default_schema: ${SCHEMA:cexplorer}
        show_sql: false
        format_sql: true
        order_inserts: true
        order_updates: true

  task:
    execution:
      pool:
        core-size: 10
        max-size: 12
      thread-name-prefix: Executorxx-
  ## Flyway config
  flyway:
    enabled: true
    url: ${spring.datasource.url}
    user: ${spring.datasource.username}
    password: ${spring.datasource.password}
    group: true
    sql-migration-prefix: V
    sql-migration-separator: __
    sql-migration-suffixes: .sql
    locations: db/migration
    validate-on-migrate: false
    default-schema: ${spring.jpa.properties.hibernate.default_schema}
    schemas: ${spring.jpa.properties.hibernate.default_schema}
    create-schemas: ${ALLOW_CREATE_SCHEMA:true}
    out-of-order: true

jobs:
  meta-data:
    enabled: ${META_DATA_JOB_ENABLED:true}
  pool-offline-data:
    enabled: ${POOL_OFFLINE_DATA_JOB_ENABLED:true}
    fetch:
      delay: ${CRAWL_POOL_DATA_DELAY:172800000}
  install-batch: 100
  limit-content: ${LIMIT_CONTENT_PER_SHEET:1000000}
token:
  metadata:
    url: ${TOKEN_METADATA_URL:https://github.com/cardano-foundation/cardano-token-registry.git}
    folder: ${TOKEN_METADATA_FOLDER:/mappings}
application:
  network: ${NETWORK}
  token-logo-endpoint: ${TOKEN_LOGO_ENDPOINT:http://localhost:9001/}
logging:
  level:
    org.cardanofoundation: ${LOG:INFO}
    io.netty: ${LOG:INFO}
    reactor.netty: OFF
