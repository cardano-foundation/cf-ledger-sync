/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.cardanofoundation.ledgersync.jooq.DefaultSchema;
import org.cardanofoundation.ledgersync.jooq.Indexes;
import org.cardanofoundation.ledgersync.jooq.Keys;
import org.cardanofoundation.ledgersync.jooq.tables.records.BlockRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function16;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Block extends TableImpl<BlockRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>block</code>
     */
    public static final Block BLOCK = new Block();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BlockRecord> getRecordType() {
        return BlockRecord.class;
    }

    /**
     * The column <code>block.id</code>.
     */
    public final TableField<BlockRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>block.block_no</code>.
     */
    public final TableField<BlockRecord, Long> BLOCK_NO = createField(DSL.name("block_no"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>block.epoch_no</code>.
     */
    public final TableField<BlockRecord, Integer> EPOCH_NO = createField(DSL.name("epoch_no"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>block.epoch_slot_no</code>.
     */
    public final TableField<BlockRecord, Integer> EPOCH_SLOT_NO = createField(DSL.name("epoch_slot_no"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>block.hash</code>.
     */
    public final TableField<BlockRecord, String> HASH = createField(DSL.name("hash"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>block.op_cert</code>.
     */
    public final TableField<BlockRecord, String> OP_CERT = createField(DSL.name("op_cert"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>block.op_cert_counter</code>.
     */
    public final TableField<BlockRecord, Long> OP_CERT_COUNTER = createField(DSL.name("op_cert_counter"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>block.proto_major</code>.
     */
    public final TableField<BlockRecord, Integer> PROTO_MAJOR = createField(DSL.name("proto_major"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>block.proto_minor</code>.
     */
    public final TableField<BlockRecord, Integer> PROTO_MINOR = createField(DSL.name("proto_minor"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>block.size</code>.
     */
    public final TableField<BlockRecord, Integer> SIZE = createField(DSL.name("size"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>block.slot_leader_id</code>.
     */
    public final TableField<BlockRecord, Long> SLOT_LEADER_ID = createField(DSL.name("slot_leader_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>block.slot_no</code>.
     */
    public final TableField<BlockRecord, Long> SLOT_NO = createField(DSL.name("slot_no"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>block.time</code>.
     */
    public final TableField<BlockRecord, LocalDateTime> TIME = createField(DSL.name("time"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>block.tx_count</code>.
     */
    public final TableField<BlockRecord, Long> TX_COUNT = createField(DSL.name("tx_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>block.vrf_key</code>.
     */
    public final TableField<BlockRecord, String> VRF_KEY = createField(DSL.name("vrf_key"), SQLDataType.VARCHAR(65535), this, "");

    /**
     * The column <code>block.previous_id</code>.
     */
    public final TableField<BlockRecord, Long> PREVIOUS_ID = createField(DSL.name("previous_id"), SQLDataType.BIGINT, this, "");

    private Block(Name alias, Table<BlockRecord> aliased) {
        this(alias, aliased, null);
    }

    private Block(Name alias, Table<BlockRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>block</code> table reference
     */
    public Block(String alias) {
        this(DSL.name(alias), BLOCK);
    }

    /**
     * Create an aliased <code>block</code> table reference
     */
    public Block(Name alias) {
        this(alias, BLOCK);
    }

    /**
     * Create a <code>block</code> table reference
     */
    public Block() {
        this(DSL.name("block"), null);
    }

    public <O extends Record> Block(Table<O> child, ForeignKey<O, BlockRecord> key) {
        super(child, key, BLOCK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_BLOCK_BLOCK_NO, Indexes.IDX_BLOCK_EPOCH_NO, Indexes.IDX_BLOCK_ID_TIME_TX_COUNT, Indexes.IDX_BLOCK_PREVIOUS_ID, Indexes.IDX_BLOCK_SLOT_LEADER_ID, Indexes.IDX_BLOCK_SLOT_NO, Indexes.IDX_BLOCK_TIME, Indexes.TX_COUNT_IDX);
    }

    @Override
    public Identity<BlockRecord, Long> getIdentity() {
        return (Identity<BlockRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BlockRecord> getPrimaryKey() {
        return Keys.BLOCK_PKEY;
    }

    @Override
    public List<UniqueKey<BlockRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_BLOCK);
    }

    @Override
    public Block as(String alias) {
        return new Block(DSL.name(alias), this);
    }

    @Override
    public Block as(Name alias) {
        return new Block(alias, this);
    }

    @Override
    public Block as(Table<?> alias) {
        return new Block(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Block rename(String name) {
        return new Block(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Block rename(Name name) {
        return new Block(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Block rename(Table<?> name) {
        return new Block(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<Long, Long, Integer, Integer, String, String, Long, Integer, Integer, Integer, Long, Long, LocalDateTime, Long, String, Long> fieldsRow() {
        return (Row16) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function16<? super Long, ? super Long, ? super Integer, ? super Integer, ? super String, ? super String, ? super Long, ? super Integer, ? super Integer, ? super Integer, ? super Long, ? super Long, ? super LocalDateTime, ? super Long, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function16<? super Long, ? super Long, ? super Integer, ? super Integer, ? super String, ? super String, ? super Long, ? super Integer, ? super Integer, ? super Integer, ? super Long, ? super Long, ? super LocalDateTime, ? super Long, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
