/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables;


import java.math.BigInteger;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.cardanofoundation.ledgersync.jooq.DefaultSchema;
import org.cardanofoundation.ledgersync.jooq.Indexes;
import org.cardanofoundation.ledgersync.jooq.Keys;
import org.cardanofoundation.ledgersync.jooq.tables.records.MultiAssetRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MultiAsset extends TableImpl<MultiAssetRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>multi_asset</code>
     */
    public static final MultiAsset MULTI_ASSET = new MultiAsset();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MultiAssetRecord> getRecordType() {
        return MultiAssetRecord.class;
    }

    /**
     * The column <code>multi_asset.id</code>.
     */
    public final TableField<MultiAssetRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>multi_asset.fingerprint</code>.
     */
    public final TableField<MultiAssetRecord, String> FINGERPRINT = createField(DSL.name("fingerprint"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>multi_asset.name</code>.
     */
    public final TableField<MultiAssetRecord, byte[]> NAME = createField(DSL.name("name"), SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>multi_asset.policy</code>.
     */
    public final TableField<MultiAssetRecord, String> POLICY = createField(DSL.name("policy"), SQLDataType.VARCHAR(56).nullable(false), this, "");

    /**
     * The column <code>multi_asset.supply</code>.
     */
    public final TableField<MultiAssetRecord, BigInteger> SUPPLY = createField(DSL.name("supply"), SQLDataType.DECIMAL_INTEGER(23), this, "");

    /**
     * The column <code>multi_asset.tx_count</code>.
     */
    public final TableField<MultiAssetRecord, Long> TX_COUNT = createField(DSL.name("tx_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>multi_asset.time</code>.
     */
    public final TableField<MultiAssetRecord, LocalDateTime> TIME = createField(DSL.name("time"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>multi_asset.total_volume</code>.
     */
    public final TableField<MultiAssetRecord, BigInteger> TOTAL_VOLUME = createField(DSL.name("total_volume"), SQLDataType.DECIMAL_INTEGER(40), this, "");

    /**
     * The column <code>multi_asset.name_view</code>.
     */
    public final TableField<MultiAssetRecord, String> NAME_VIEW = createField(DSL.name("name_view"), SQLDataType.VARCHAR(64), this, "");

    private MultiAsset(Name alias, Table<MultiAssetRecord> aliased) {
        this(alias, aliased, null);
    }

    private MultiAsset(Name alias, Table<MultiAssetRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>multi_asset</code> table reference
     */
    public MultiAsset(String alias) {
        this(DSL.name(alias), MULTI_ASSET);
    }

    /**
     * Create an aliased <code>multi_asset</code> table reference
     */
    public MultiAsset(Name alias) {
        this(alias, MULTI_ASSET);
    }

    /**
     * Create a <code>multi_asset</code> table reference
     */
    public MultiAsset() {
        this(DSL.name("multi_asset"), null);
    }

    public <O extends Record> MultiAsset(Table<O> child, ForeignKey<O, MultiAssetRecord> key) {
        super(child, key, MULTI_ASSET);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_MULTI_ASSET_NAME_VIEW, Indexes.MULTI_ASSET_FINGERPRINT_UINDEX, Indexes.MULTI_ASSET_SUPPLY_IDX, Indexes.MULTI_ASSET_TIME_IDX);
    }

    @Override
    public Identity<MultiAssetRecord, Long> getIdentity() {
        return (Identity<MultiAssetRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MultiAssetRecord> getPrimaryKey() {
        return Keys.MULTI_ASSET_PKEY;
    }

    @Override
    public List<UniqueKey<MultiAssetRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_MULTI_ASSET);
    }

    @Override
    public MultiAsset as(String alias) {
        return new MultiAsset(DSL.name(alias), this);
    }

    @Override
    public MultiAsset as(Name alias) {
        return new MultiAsset(alias, this);
    }

    @Override
    public MultiAsset as(Table<?> alias) {
        return new MultiAsset(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MultiAsset rename(String name) {
        return new MultiAsset(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MultiAsset rename(Name name) {
        return new MultiAsset(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MultiAsset rename(Table<?> name) {
        return new MultiAsset(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, byte[], String, BigInteger, Long, LocalDateTime, BigInteger, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Long, ? super String, ? super byte[], ? super String, ? super BigInteger, ? super Long, ? super LocalDateTime, ? super BigInteger, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Long, ? super String, ? super byte[], ? super String, ? super BigInteger, ? super Long, ? super LocalDateTime, ? super BigInteger, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
