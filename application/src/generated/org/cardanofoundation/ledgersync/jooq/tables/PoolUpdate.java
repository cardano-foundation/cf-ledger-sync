/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables;


import java.math.BigInteger;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.cardanofoundation.ledgersync.jooq.DefaultSchema;
import org.cardanofoundation.ledgersync.jooq.Indexes;
import org.cardanofoundation.ledgersync.jooq.Keys;
import org.cardanofoundation.ledgersync.jooq.tables.records.PoolUpdateRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PoolUpdate extends TableImpl<PoolUpdateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pool_update</code>
     */
    public static final PoolUpdate POOL_UPDATE = new PoolUpdate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PoolUpdateRecord> getRecordType() {
        return PoolUpdateRecord.class;
    }

    /**
     * The column <code>pool_update.id</code>.
     */
    public final TableField<PoolUpdateRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>pool_update.active_epoch_no</code>.
     */
    public final TableField<PoolUpdateRecord, Long> ACTIVE_EPOCH_NO = createField(DSL.name("active_epoch_no"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pool_update.cert_index</code>.
     */
    public final TableField<PoolUpdateRecord, Integer> CERT_INDEX = createField(DSL.name("cert_index"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>pool_update.fixed_cost</code>.
     */
    public final TableField<PoolUpdateRecord, BigInteger> FIXED_COST = createField(DSL.name("fixed_cost"), SQLDataType.DECIMAL_INTEGER(20).nullable(false), this, "");

    /**
     * The column <code>pool_update.margin</code>.
     */
    public final TableField<PoolUpdateRecord, Double> MARGIN = createField(DSL.name("margin"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>pool_update.pledge</code>.
     */
    public final TableField<PoolUpdateRecord, BigInteger> PLEDGE = createField(DSL.name("pledge"), SQLDataType.DECIMAL_INTEGER(20).nullable(false), this, "");

    /**
     * The column <code>pool_update.vrf_key_hash</code>.
     */
    public final TableField<PoolUpdateRecord, String> VRF_KEY_HASH = createField(DSL.name("vrf_key_hash"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>pool_update.meta_id</code>.
     */
    public final TableField<PoolUpdateRecord, Long> META_ID = createField(DSL.name("meta_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pool_update.hash_id</code>.
     */
    public final TableField<PoolUpdateRecord, Long> HASH_ID = createField(DSL.name("hash_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pool_update.registered_tx_id</code>.
     */
    public final TableField<PoolUpdateRecord, Long> REGISTERED_TX_ID = createField(DSL.name("registered_tx_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pool_update.reward_addr_id</code>.
     */
    public final TableField<PoolUpdateRecord, Long> REWARD_ADDR_ID = createField(DSL.name("reward_addr_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private PoolUpdate(Name alias, Table<PoolUpdateRecord> aliased) {
        this(alias, aliased, null);
    }

    private PoolUpdate(Name alias, Table<PoolUpdateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pool_update</code> table reference
     */
    public PoolUpdate(String alias) {
        this(DSL.name(alias), POOL_UPDATE);
    }

    /**
     * Create an aliased <code>pool_update</code> table reference
     */
    public PoolUpdate(Name alias) {
        this(alias, POOL_UPDATE);
    }

    /**
     * Create a <code>pool_update</code> table reference
     */
    public PoolUpdate() {
        this(DSL.name("pool_update"), null);
    }

    public <O extends Record> PoolUpdate(Table<O> child, ForeignKey<O, PoolUpdateRecord> key) {
        super(child, key, POOL_UPDATE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_POOL_UPDATE_ACTIVE_EPOCH_NO, Indexes.IDX_POOL_UPDATE_HASH_ID, Indexes.IDX_POOL_UPDATE_META_ID, Indexes.IDX_POOL_UPDATE_REGISTERED_TX_ID, Indexes.IDX_POOL_UPDATE_REWARD_ADDR);
    }

    @Override
    public Identity<PoolUpdateRecord, Long> getIdentity() {
        return (Identity<PoolUpdateRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PoolUpdateRecord> getPrimaryKey() {
        return Keys.POOL_UPDATE_PKEY;
    }

    @Override
    public List<UniqueKey<PoolUpdateRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_POOL_UPDATE);
    }

    @Override
    public PoolUpdate as(String alias) {
        return new PoolUpdate(DSL.name(alias), this);
    }

    @Override
    public PoolUpdate as(Name alias) {
        return new PoolUpdate(alias, this);
    }

    @Override
    public PoolUpdate as(Table<?> alias) {
        return new PoolUpdate(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PoolUpdate rename(String name) {
        return new PoolUpdate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PoolUpdate rename(Name name) {
        return new PoolUpdate(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PoolUpdate rename(Table<?> name) {
        return new PoolUpdate(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, Long, Integer, BigInteger, Double, BigInteger, String, Long, Long, Long, Long> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super Long, ? super Long, ? super Integer, ? super BigInteger, ? super Double, ? super BigInteger, ? super String, ? super Long, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super Long, ? super Long, ? super Integer, ? super BigInteger, ? super Double, ? super BigInteger, ? super String, ? super Long, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
