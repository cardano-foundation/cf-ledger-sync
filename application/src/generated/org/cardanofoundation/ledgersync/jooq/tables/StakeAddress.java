/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables;


import java.math.BigInteger;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.cardanofoundation.ledgersync.jooq.DefaultSchema;
import org.cardanofoundation.ledgersync.jooq.Indexes;
import org.cardanofoundation.ledgersync.jooq.Keys;
import org.cardanofoundation.ledgersync.jooq.tables.records.StakeAddressRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StakeAddress extends TableImpl<StakeAddressRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>stake_address</code>
     */
    public static final StakeAddress STAKE_ADDRESS = new StakeAddress();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StakeAddressRecord> getRecordType() {
        return StakeAddressRecord.class;
    }

    /**
     * The column <code>stake_address.id</code>.
     */
    public final TableField<StakeAddressRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>stake_address.hash_raw</code>.
     */
    public final TableField<StakeAddressRecord, String> HASH_RAW = createField(DSL.name("hash_raw"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stake_address.script_hash</code>.
     */
    public final TableField<StakeAddressRecord, String> SCRIPT_HASH = createField(DSL.name("script_hash"), SQLDataType.VARCHAR(56), this, "");

    /**
     * The column <code>stake_address.view</code>.
     */
    public final TableField<StakeAddressRecord, String> VIEW = createField(DSL.name("view"), SQLDataType.VARCHAR(65535).nullable(false), this, "");

    /**
     * The column <code>stake_address.balance</code>.
     */
    public final TableField<StakeAddressRecord, BigInteger> BALANCE = createField(DSL.name("balance"), SQLDataType.DECIMAL_INTEGER(39), this, "");

    /**
     * The column <code>stake_address.available_reward</code>.
     */
    public final TableField<StakeAddressRecord, BigInteger> AVAILABLE_REWARD = createField(DSL.name("available_reward"), SQLDataType.DECIMAL_INTEGER(39), this, "");

    private StakeAddress(Name alias, Table<StakeAddressRecord> aliased) {
        this(alias, aliased, null);
    }

    private StakeAddress(Name alias, Table<StakeAddressRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>stake_address</code> table reference
     */
    public StakeAddress(String alias) {
        this(DSL.name(alias), STAKE_ADDRESS);
    }

    /**
     * Create an aliased <code>stake_address</code> table reference
     */
    public StakeAddress(Name alias) {
        this(alias, STAKE_ADDRESS);
    }

    /**
     * Create a <code>stake_address</code> table reference
     */
    public StakeAddress() {
        this(DSL.name("stake_address"), null);
    }

    public <O extends Record> StakeAddress(Table<O> child, ForeignKey<O, StakeAddressRecord> key) {
        super(child, key, STAKE_ADDRESS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_STAKE_ADDRESS_HASH_RAW, Indexes.IDX_STAKE_ADDRESS_VIEW, Indexes.STAKE_ADDRESS_BALANCE_IDX);
    }

    @Override
    public Identity<StakeAddressRecord, Long> getIdentity() {
        return (Identity<StakeAddressRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<StakeAddressRecord> getPrimaryKey() {
        return Keys.STAKE_ADDRESS_PKEY;
    }

    @Override
    public List<UniqueKey<StakeAddressRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_STAKE_ADDRESS);
    }

    @Override
    public StakeAddress as(String alias) {
        return new StakeAddress(DSL.name(alias), this);
    }

    @Override
    public StakeAddress as(Name alias) {
        return new StakeAddress(alias, this);
    }

    @Override
    public StakeAddress as(Table<?> alias) {
        return new StakeAddress(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public StakeAddress rename(String name) {
        return new StakeAddress(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StakeAddress rename(Name name) {
        return new StakeAddress(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public StakeAddress rename(Table<?> name) {
        return new StakeAddress(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, String, BigInteger, BigInteger> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super String, ? super String, ? super String, ? super BigInteger, ? super BigInteger, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super String, ? super String, ? super String, ? super BigInteger, ? super BigInteger, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
