/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables;


import java.math.BigInteger;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.cardanofoundation.ledgersync.jooq.DefaultSchema;
import org.cardanofoundation.ledgersync.jooq.Keys;
import org.cardanofoundation.ledgersync.jooq.tables.records.FailedTxOutRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function13;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FailedTxOut extends TableImpl<FailedTxOutRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>failed_tx_out</code>
     */
    public static final FailedTxOut FAILED_TX_OUT = new FailedTxOut();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FailedTxOutRecord> getRecordType() {
        return FailedTxOutRecord.class;
    }

    /**
     * The column <code>failed_tx_out.id</code>.
     */
    public final TableField<FailedTxOutRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>failed_tx_out.address</code>.
     */
    public final TableField<FailedTxOutRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>failed_tx_out.address_has_script</code>.
     */
    public final TableField<FailedTxOutRecord, Boolean> ADDRESS_HAS_SCRIPT = createField(DSL.name("address_has_script"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>failed_tx_out.address_raw</code>.
     */
    public final TableField<FailedTxOutRecord, byte[]> ADDRESS_RAW = createField(DSL.name("address_raw"), SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>failed_tx_out.data_hash</code>.
     */
    public final TableField<FailedTxOutRecord, String> DATA_HASH = createField(DSL.name("data_hash"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>failed_tx_out.index</code>.
     */
    public final TableField<FailedTxOutRecord, Short> INDEX = createField(DSL.name("index"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>failed_tx_out.multi_assets_descr</code>.
     */
    public final TableField<FailedTxOutRecord, String> MULTI_ASSETS_DESCR = createField(DSL.name("multi_assets_descr"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>failed_tx_out.payment_cred</code>.
     */
    public final TableField<FailedTxOutRecord, String> PAYMENT_CRED = createField(DSL.name("payment_cred"), SQLDataType.VARCHAR(56), this, "");

    /**
     * The column <code>failed_tx_out.value</code>.
     */
    public final TableField<FailedTxOutRecord, BigInteger> VALUE = createField(DSL.name("value"), SQLDataType.DECIMAL_INTEGER(20).nullable(false), this, "");

    /**
     * The column <code>failed_tx_out.inline_datum_id</code>.
     */
    public final TableField<FailedTxOutRecord, Long> INLINE_DATUM_ID = createField(DSL.name("inline_datum_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>failed_tx_out.reference_script_id</code>.
     */
    public final TableField<FailedTxOutRecord, Long> REFERENCE_SCRIPT_ID = createField(DSL.name("reference_script_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>failed_tx_out.stake_address_id</code>.
     */
    public final TableField<FailedTxOutRecord, Long> STAKE_ADDRESS_ID = createField(DSL.name("stake_address_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>failed_tx_out.tx_id</code>.
     */
    public final TableField<FailedTxOutRecord, Long> TX_ID = createField(DSL.name("tx_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private FailedTxOut(Name alias, Table<FailedTxOutRecord> aliased) {
        this(alias, aliased, null);
    }

    private FailedTxOut(Name alias, Table<FailedTxOutRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>failed_tx_out</code> table reference
     */
    public FailedTxOut(String alias) {
        this(DSL.name(alias), FAILED_TX_OUT);
    }

    /**
     * Create an aliased <code>failed_tx_out</code> table reference
     */
    public FailedTxOut(Name alias) {
        this(alias, FAILED_TX_OUT);
    }

    /**
     * Create a <code>failed_tx_out</code> table reference
     */
    public FailedTxOut() {
        this(DSL.name("failed_tx_out"), null);
    }

    public <O extends Record> FailedTxOut(Table<O> child, ForeignKey<O, FailedTxOutRecord> key) {
        super(child, key, FAILED_TX_OUT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<FailedTxOutRecord, Long> getIdentity() {
        return (Identity<FailedTxOutRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<FailedTxOutRecord> getPrimaryKey() {
        return Keys.FAILED_TX_OUT_PKEY;
    }

    @Override
    public List<UniqueKey<FailedTxOutRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_COL_FAILED_TXOUT);
    }

    @Override
    public FailedTxOut as(String alias) {
        return new FailedTxOut(DSL.name(alias), this);
    }

    @Override
    public FailedTxOut as(Name alias) {
        return new FailedTxOut(alias, this);
    }

    @Override
    public FailedTxOut as(Table<?> alias) {
        return new FailedTxOut(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FailedTxOut rename(String name) {
        return new FailedTxOut(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FailedTxOut rename(Name name) {
        return new FailedTxOut(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FailedTxOut rename(Table<?> name) {
        return new FailedTxOut(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, String, Boolean, byte[], String, Short, String, String, BigInteger, Long, Long, Long, Long> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function13<? super Long, ? super String, ? super Boolean, ? super byte[], ? super String, ? super Short, ? super String, ? super String, ? super BigInteger, ? super Long, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function13<? super Long, ? super String, ? super Boolean, ? super byte[], ? super String, ? super Short, ? super String, ? super String, ? super BigInteger, ? super Long, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
