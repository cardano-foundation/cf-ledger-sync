/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.cardanofoundation.ledgersync.jooq.AbstractSpringDAOImpl;
import org.cardanofoundation.ledgersync.jooq.tables.Block;
import org.cardanofoundation.ledgersync.jooq.tables.records.BlockRecord;
import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class BlockDao extends AbstractSpringDAOImpl<BlockRecord, org.cardanofoundation.ledgersync.jooq.tables.pojos.Block, Long> {

    /**
     * Create a new BlockDao without any configuration
     */
    public BlockDao() {
        super(Block.BLOCK, org.cardanofoundation.ledgersync.jooq.tables.pojos.Block.class);
    }

    /**
     * Create a new BlockDao with an attached configuration
     */
    @Autowired
    public BlockDao(Configuration configuration) {
        super(Block.BLOCK, org.cardanofoundation.ledgersync.jooq.tables.pojos.Block.class, configuration);
    }

    @Override
    public Long getId(org.cardanofoundation.ledgersync.jooq.tables.pojos.Block object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Block> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Block.BLOCK.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Block> fetchById(Long... values) {
        return fetch(Block.BLOCK.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public org.cardanofoundation.ledgersync.jooq.tables.pojos.Block fetchOneById(Long value) {
        return fetchOne(Block.BLOCK.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<org.cardanofoundation.ledgersync.jooq.tables.pojos.Block> fetchOptionalById(Long value) {
        return fetchOptional(Block.BLOCK.ID, value);
    }

    /**
     * Fetch records that have <code>block_no BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Block> fetchRangeOfBlockNo(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Block.BLOCK.BLOCK_NO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>block_no IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Block> fetchByBlockNo(Long... values) {
        return fetch(Block.BLOCK.BLOCK_NO, values);
    }

    /**
     * Fetch records that have <code>epoch_no BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Block> fetchRangeOfEpochNo(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Block.BLOCK.EPOCH_NO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>epoch_no IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Block> fetchByEpochNo(Integer... values) {
        return fetch(Block.BLOCK.EPOCH_NO, values);
    }

    /**
     * Fetch records that have <code>epoch_slot_no BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Block> fetchRangeOfEpochSlotNo(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Block.BLOCK.EPOCH_SLOT_NO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>epoch_slot_no IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Block> fetchByEpochSlotNo(Integer... values) {
        return fetch(Block.BLOCK.EPOCH_SLOT_NO, values);
    }

    /**
     * Fetch records that have <code>hash BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Block> fetchRangeOfHash(String lowerInclusive, String upperInclusive) {
        return fetchRange(Block.BLOCK.HASH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>hash IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Block> fetchByHash(String... values) {
        return fetch(Block.BLOCK.HASH, values);
    }

    /**
     * Fetch a unique record that has <code>hash = value</code>
     */
    public org.cardanofoundation.ledgersync.jooq.tables.pojos.Block fetchOneByHash(String value) {
        return fetchOne(Block.BLOCK.HASH, value);
    }

    /**
     * Fetch a unique record that has <code>hash = value</code>
     */
    public Optional<org.cardanofoundation.ledgersync.jooq.tables.pojos.Block> fetchOptionalByHash(String value) {
        return fetchOptional(Block.BLOCK.HASH, value);
    }

    /**
     * Fetch records that have <code>op_cert BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Block> fetchRangeOfOpCert(String lowerInclusive, String upperInclusive) {
        return fetchRange(Block.BLOCK.OP_CERT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>op_cert IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Block> fetchByOpCert(String... values) {
        return fetch(Block.BLOCK.OP_CERT, values);
    }

    /**
     * Fetch records that have <code>op_cert_counter BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Block> fetchRangeOfOpCertCounter(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Block.BLOCK.OP_CERT_COUNTER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>op_cert_counter IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Block> fetchByOpCertCounter(Long... values) {
        return fetch(Block.BLOCK.OP_CERT_COUNTER, values);
    }

    /**
     * Fetch records that have <code>proto_major BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Block> fetchRangeOfProtoMajor(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Block.BLOCK.PROTO_MAJOR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>proto_major IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Block> fetchByProtoMajor(Integer... values) {
        return fetch(Block.BLOCK.PROTO_MAJOR, values);
    }

    /**
     * Fetch records that have <code>proto_minor BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Block> fetchRangeOfProtoMinor(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Block.BLOCK.PROTO_MINOR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>proto_minor IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Block> fetchByProtoMinor(Integer... values) {
        return fetch(Block.BLOCK.PROTO_MINOR, values);
    }

    /**
     * Fetch records that have <code>size BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Block> fetchRangeOfSize(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Block.BLOCK.SIZE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>size IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Block> fetchBySize(Integer... values) {
        return fetch(Block.BLOCK.SIZE, values);
    }

    /**
     * Fetch records that have <code>slot_leader_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Block> fetchRangeOfSlotLeaderId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Block.BLOCK.SLOT_LEADER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>slot_leader_id IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Block> fetchBySlotLeaderId(Long... values) {
        return fetch(Block.BLOCK.SLOT_LEADER_ID, values);
    }

    /**
     * Fetch records that have <code>slot_no BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Block> fetchRangeOfSlotNo(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Block.BLOCK.SLOT_NO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>slot_no IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Block> fetchBySlotNo(Long... values) {
        return fetch(Block.BLOCK.SLOT_NO, values);
    }

    /**
     * Fetch records that have <code>time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Block> fetchRangeOfTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Block.BLOCK.TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>time IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Block> fetchByTime(LocalDateTime... values) {
        return fetch(Block.BLOCK.TIME, values);
    }

    /**
     * Fetch records that have <code>tx_count BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Block> fetchRangeOfTxCount(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Block.BLOCK.TX_COUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tx_count IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Block> fetchByTxCount(Long... values) {
        return fetch(Block.BLOCK.TX_COUNT, values);
    }

    /**
     * Fetch records that have <code>vrf_key BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Block> fetchRangeOfVrfKey(String lowerInclusive, String upperInclusive) {
        return fetchRange(Block.BLOCK.VRF_KEY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>vrf_key IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Block> fetchByVrfKey(String... values) {
        return fetch(Block.BLOCK.VRF_KEY, values);
    }

    /**
     * Fetch records that have <code>previous_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Block> fetchRangeOfPreviousId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Block.BLOCK.PREVIOUS_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>previous_id IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Block> fetchByPreviousId(Long... values) {
        return fetch(Block.BLOCK.PREVIOUS_ID, values);
    }
}
