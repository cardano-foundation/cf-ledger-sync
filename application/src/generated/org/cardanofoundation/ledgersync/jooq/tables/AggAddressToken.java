/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables;


import java.math.BigInteger;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.cardanofoundation.ledgersync.jooq.DefaultSchema;
import org.cardanofoundation.ledgersync.jooq.Indexes;
import org.cardanofoundation.ledgersync.jooq.Keys;
import org.cardanofoundation.ledgersync.jooq.tables.records.AggAddressTokenRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AggAddressToken extends TableImpl<AggAddressTokenRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>agg_address_token</code>
     */
    public static final AggAddressToken AGG_ADDRESS_TOKEN = new AggAddressToken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AggAddressTokenRecord> getRecordType() {
        return AggAddressTokenRecord.class;
    }

    /**
     * The column <code>agg_address_token.id</code>.
     */
    public final TableField<AggAddressTokenRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>agg_address_token.balance</code>.
     */
    public final TableField<AggAddressTokenRecord, BigInteger> BALANCE = createField(DSL.name("balance"), SQLDataType.DECIMAL_INTEGER(39).nullable(false), this, "");

    /**
     * The column <code>agg_address_token.ident</code>.
     */
    public final TableField<AggAddressTokenRecord, Long> IDENT = createField(DSL.name("ident"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>agg_address_token.day</code>.
     */
    public final TableField<AggAddressTokenRecord, LocalDate> DAY = createField(DSL.name("day"), SQLDataType.LOCALDATE, this, "");

    private AggAddressToken(Name alias, Table<AggAddressTokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private AggAddressToken(Name alias, Table<AggAddressTokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>agg_address_token</code> table reference
     */
    public AggAddressToken(String alias) {
        this(DSL.name(alias), AGG_ADDRESS_TOKEN);
    }

    /**
     * Create an aliased <code>agg_address_token</code> table reference
     */
    public AggAddressToken(Name alias) {
        this(alias, AGG_ADDRESS_TOKEN);
    }

    /**
     * Create a <code>agg_address_token</code> table reference
     */
    public AggAddressToken() {
        this(DSL.name("agg_address_token"), null);
    }

    public <O extends Record> AggAddressToken(Table<O> child, ForeignKey<O, AggAddressTokenRecord> key) {
        super(child, key, AGG_ADDRESS_TOKEN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.AGG_ADDRESS_TOKEN_DAY_IDX, Indexes.AGG_ADDRESS_TOKEN_IDENT_DAY_BALANCE_IDX);
    }

    @Override
    public Identity<AggAddressTokenRecord, Long> getIdentity() {
        return (Identity<AggAddressTokenRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AggAddressTokenRecord> getPrimaryKey() {
        return Keys.AGG_ADDRESS_TOKEN_PKEY;
    }

    @Override
    public AggAddressToken as(String alias) {
        return new AggAddressToken(DSL.name(alias), this);
    }

    @Override
    public AggAddressToken as(Name alias) {
        return new AggAddressToken(alias, this);
    }

    @Override
    public AggAddressToken as(Table<?> alias) {
        return new AggAddressToken(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AggAddressToken rename(String name) {
        return new AggAddressToken(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AggAddressToken rename(Name name) {
        return new AggAddressToken(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AggAddressToken rename(Table<?> name) {
        return new AggAddressToken(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, BigInteger, Long, LocalDate> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super BigInteger, ? super Long, ? super LocalDate, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super BigInteger, ? super Long, ? super LocalDate, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
