/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.cardanofoundation.ledgersync.jooq.DefaultSchema;
import org.cardanofoundation.ledgersync.jooq.Indexes;
import org.cardanofoundation.ledgersync.jooq.Keys;
import org.cardanofoundation.ledgersync.jooq.tables.records.PoolRelayRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PoolRelay extends TableImpl<PoolRelayRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pool_relay</code>
     */
    public static final PoolRelay POOL_RELAY = new PoolRelay();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PoolRelayRecord> getRecordType() {
        return PoolRelayRecord.class;
    }

    /**
     * The column <code>pool_relay.id</code>.
     */
    public final TableField<PoolRelayRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>pool_relay.dns_name</code>.
     */
    public final TableField<PoolRelayRecord, String> DNS_NAME = createField(DSL.name("dns_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>pool_relay.dns_srv_name</code>.
     */
    public final TableField<PoolRelayRecord, String> DNS_SRV_NAME = createField(DSL.name("dns_srv_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>pool_relay.ipv4</code>.
     */
    public final TableField<PoolRelayRecord, String> IPV4 = createField(DSL.name("ipv4"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>pool_relay.ipv6</code>.
     */
    public final TableField<PoolRelayRecord, String> IPV6 = createField(DSL.name("ipv6"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>pool_relay.port</code>.
     */
    public final TableField<PoolRelayRecord, Integer> PORT = createField(DSL.name("port"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>pool_relay.update_id</code>.
     */
    public final TableField<PoolRelayRecord, Long> UPDATE_ID = createField(DSL.name("update_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private PoolRelay(Name alias, Table<PoolRelayRecord> aliased) {
        this(alias, aliased, null);
    }

    private PoolRelay(Name alias, Table<PoolRelayRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pool_relay</code> table reference
     */
    public PoolRelay(String alias) {
        this(DSL.name(alias), POOL_RELAY);
    }

    /**
     * Create an aliased <code>pool_relay</code> table reference
     */
    public PoolRelay(Name alias) {
        this(alias, POOL_RELAY);
    }

    /**
     * Create a <code>pool_relay</code> table reference
     */
    public PoolRelay() {
        this(DSL.name("pool_relay"), null);
    }

    public <O extends Record> PoolRelay(Table<O> child, ForeignKey<O, PoolRelayRecord> key) {
        super(child, key, POOL_RELAY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_POOL_RELAY_UPDATE_ID);
    }

    @Override
    public Identity<PoolRelayRecord, Long> getIdentity() {
        return (Identity<PoolRelayRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PoolRelayRecord> getPrimaryKey() {
        return Keys.POOL_RELAY_PKEY;
    }

    @Override
    public List<UniqueKey<PoolRelayRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_POOL_RELAY);
    }

    @Override
    public PoolRelay as(String alias) {
        return new PoolRelay(DSL.name(alias), this);
    }

    @Override
    public PoolRelay as(Name alias) {
        return new PoolRelay(alias, this);
    }

    @Override
    public PoolRelay as(Table<?> alias) {
        return new PoolRelay(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PoolRelay rename(String name) {
        return new PoolRelay(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PoolRelay rename(Name name) {
        return new PoolRelay(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PoolRelay rename(Table<?> name) {
        return new PoolRelay(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, String, String, String, Integer, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
