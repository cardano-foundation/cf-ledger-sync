/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.cardanofoundation.ledgersync.jooq.DefaultSchema;
import org.cardanofoundation.ledgersync.jooq.Keys;
import org.cardanofoundation.ledgersync.jooq.tables.records.MetaRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Meta extends TableImpl<MetaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>meta</code>
     */
    public static final Meta META = new Meta();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MetaRecord> getRecordType() {
        return MetaRecord.class;
    }

    /**
     * The column <code>meta.id</code>.
     */
    public final TableField<MetaRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>meta.network_name</code>.
     */
    public final TableField<MetaRecord, String> NETWORK_NAME = createField(DSL.name("network_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>meta.start_time</code>.
     */
    public final TableField<MetaRecord, LocalDateTime> START_TIME = createField(DSL.name("start_time"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>meta.version</code>.
     */
    public final TableField<MetaRecord, String> VERSION = createField(DSL.name("version"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private Meta(Name alias, Table<MetaRecord> aliased) {
        this(alias, aliased, null);
    }

    private Meta(Name alias, Table<MetaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>meta</code> table reference
     */
    public Meta(String alias) {
        this(DSL.name(alias), META);
    }

    /**
     * Create an aliased <code>meta</code> table reference
     */
    public Meta(Name alias) {
        this(alias, META);
    }

    /**
     * Create a <code>meta</code> table reference
     */
    public Meta() {
        this(DSL.name("meta"), null);
    }

    public <O extends Record> Meta(Table<O> child, ForeignKey<O, MetaRecord> key) {
        super(child, key, META);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<MetaRecord, Long> getIdentity() {
        return (Identity<MetaRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MetaRecord> getPrimaryKey() {
        return Keys.META_PKEY;
    }

    @Override
    public List<UniqueKey<MetaRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_META);
    }

    @Override
    public Meta as(String alias) {
        return new Meta(DSL.name(alias), this);
    }

    @Override
    public Meta as(Name alias) {
        return new Meta(alias, this);
    }

    @Override
    public Meta as(Table<?> alias) {
        return new Meta(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Meta rename(String name) {
        return new Meta(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Meta rename(Name name) {
        return new Meta(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Meta rename(Table<?> name) {
        return new Meta(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, LocalDateTime, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
