/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.cardanofoundation.ledgersync.jooq.DefaultSchema;
import org.cardanofoundation.ledgersync.jooq.Indexes;
import org.cardanofoundation.ledgersync.jooq.Keys;
import org.cardanofoundation.ledgersync.jooq.tables.records.SlotLeaderRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SlotLeader extends TableImpl<SlotLeaderRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>slot_leader</code>
     */
    public static final SlotLeader SLOT_LEADER = new SlotLeader();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SlotLeaderRecord> getRecordType() {
        return SlotLeaderRecord.class;
    }

    /**
     * The column <code>slot_leader.id</code>.
     */
    public final TableField<SlotLeaderRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>slot_leader.description</code>.
     */
    public final TableField<SlotLeaderRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(65535).nullable(false), this, "");

    /**
     * The column <code>slot_leader.hash</code>.
     */
    public final TableField<SlotLeaderRecord, String> HASH = createField(DSL.name("hash"), SQLDataType.VARCHAR(56).nullable(false), this, "");

    /**
     * The column <code>slot_leader.pool_hash_id</code>.
     */
    public final TableField<SlotLeaderRecord, Long> POOL_HASH_ID = createField(DSL.name("pool_hash_id"), SQLDataType.BIGINT, this, "");

    private SlotLeader(Name alias, Table<SlotLeaderRecord> aliased) {
        this(alias, aliased, null);
    }

    private SlotLeader(Name alias, Table<SlotLeaderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>slot_leader</code> table reference
     */
    public SlotLeader(String alias) {
        this(DSL.name(alias), SLOT_LEADER);
    }

    /**
     * Create an aliased <code>slot_leader</code> table reference
     */
    public SlotLeader(Name alias) {
        this(alias, SLOT_LEADER);
    }

    /**
     * Create a <code>slot_leader</code> table reference
     */
    public SlotLeader() {
        this(DSL.name("slot_leader"), null);
    }

    public <O extends Record> SlotLeader(Table<O> child, ForeignKey<O, SlotLeaderRecord> key) {
        super(child, key, SLOT_LEADER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SLOT_LEADER_POOL_HASH_ID, Indexes.SLOT_LEADER_HASH_INDEX);
    }

    @Override
    public Identity<SlotLeaderRecord, Long> getIdentity() {
        return (Identity<SlotLeaderRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SlotLeaderRecord> getPrimaryKey() {
        return Keys.SLOT_LEADER_PKEY;
    }

    @Override
    public List<UniqueKey<SlotLeaderRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_SLOT_LEADER);
    }

    @Override
    public SlotLeader as(String alias) {
        return new SlotLeader(DSL.name(alias), this);
    }

    @Override
    public SlotLeader as(Name alias) {
        return new SlotLeader(alias, this);
    }

    @Override
    public SlotLeader as(Table<?> alias) {
        return new SlotLeader(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SlotLeader rename(String name) {
        return new SlotLeader(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SlotLeader rename(Name name) {
        return new SlotLeader(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SlotLeader rename(Table<?> name) {
        return new SlotLeader(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super String, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super String, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
