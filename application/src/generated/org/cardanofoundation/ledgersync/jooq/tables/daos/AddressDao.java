/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables.daos;


import java.math.BigInteger;
import java.util.List;
import java.util.Optional;

import org.cardanofoundation.ledgersync.jooq.AbstractSpringDAOImpl;
import org.cardanofoundation.ledgersync.jooq.tables.Address;
import org.cardanofoundation.ledgersync.jooq.tables.records.AddressRecord;
import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class AddressDao extends AbstractSpringDAOImpl<AddressRecord, org.cardanofoundation.ledgersync.jooq.tables.pojos.Address, Long> {

    /**
     * Create a new AddressDao without any configuration
     */
    public AddressDao() {
        super(Address.ADDRESS, org.cardanofoundation.ledgersync.jooq.tables.pojos.Address.class);
    }

    /**
     * Create a new AddressDao with an attached configuration
     */
    @Autowired
    public AddressDao(Configuration configuration) {
        super(Address.ADDRESS, org.cardanofoundation.ledgersync.jooq.tables.pojos.Address.class, configuration);
    }

    @Override
    public Long getId(org.cardanofoundation.ledgersync.jooq.tables.pojos.Address object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Address> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Address.ADDRESS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Address> fetchById(Long... values) {
        return fetch(Address.ADDRESS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public org.cardanofoundation.ledgersync.jooq.tables.pojos.Address fetchOneById(Long value) {
        return fetchOne(Address.ADDRESS.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<org.cardanofoundation.ledgersync.jooq.tables.pojos.Address> fetchOptionalById(Long value) {
        return fetchOptional(Address.ADDRESS.ID, value);
    }

    /**
     * Fetch records that have <code>address BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Address> fetchRangeOfAddress(String lowerInclusive, String upperInclusive) {
        return fetchRange(Address.ADDRESS.ADDRESS_, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>address IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Address> fetchByAddress(String... values) {
        return fetch(Address.ADDRESS.ADDRESS_, values);
    }

    /**
     * Fetch records that have <code>address_has_script BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Address> fetchRangeOfAddressHasScript(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Address.ADDRESS.ADDRESS_HAS_SCRIPT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>address_has_script IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Address> fetchByAddressHasScript(Boolean... values) {
        return fetch(Address.ADDRESS.ADDRESS_HAS_SCRIPT, values);
    }

    /**
     * Fetch records that have <code>balance BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Address> fetchRangeOfBalance(BigInteger lowerInclusive, BigInteger upperInclusive) {
        return fetchRange(Address.ADDRESS.BALANCE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>balance IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Address> fetchByBalance(BigInteger... values) {
        return fetch(Address.ADDRESS.BALANCE, values);
    }

    /**
     * Fetch records that have <code>tx_count BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Address> fetchRangeOfTxCount(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Address.ADDRESS.TX_COUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tx_count IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Address> fetchByTxCount(Long... values) {
        return fetch(Address.ADDRESS.TX_COUNT, values);
    }

    /**
     * Fetch records that have <code>stake_address_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Address> fetchRangeOfStakeAddressId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Address.ADDRESS.STAKE_ADDRESS_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>stake_address_id IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Address> fetchByStakeAddressId(Long... values) {
        return fetch(Address.ADDRESS.STAKE_ADDRESS_ID, values);
    }

    /**
     * Fetch records that have <code>verified_contract BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Address> fetchRangeOfVerifiedContract(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Address.ADDRESS.VERIFIED_CONTRACT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>verified_contract IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Address> fetchByVerifiedContract(Boolean... values) {
        return fetch(Address.ADDRESS.VERIFIED_CONTRACT, values);
    }
}
