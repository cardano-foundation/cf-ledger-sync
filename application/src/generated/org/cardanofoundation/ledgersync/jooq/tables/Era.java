/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables;


import java.util.function.Function;

import org.cardanofoundation.ledgersync.jooq.DefaultSchema;
import org.cardanofoundation.ledgersync.jooq.Keys;
import org.cardanofoundation.ledgersync.jooq.tables.records.EraRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Era extends TableImpl<EraRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>era</code>
     */
    public static final Era ERA = new Era();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EraRecord> getRecordType() {
        return EraRecord.class;
    }

    /**
     * The column <code>era.era</code>.
     */
    public final TableField<EraRecord, Integer> ERA_ = createField(DSL.name("era"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>era.start_slot</code>.
     */
    public final TableField<EraRecord, Long> START_SLOT = createField(DSL.name("start_slot"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>era.block</code>.
     */
    public final TableField<EraRecord, Long> BLOCK = createField(DSL.name("block"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>era.block_hash</code>.
     */
    public final TableField<EraRecord, String> BLOCK_HASH = createField(DSL.name("block_hash"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    private Era(Name alias, Table<EraRecord> aliased) {
        this(alias, aliased, null);
    }

    private Era(Name alias, Table<EraRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>era</code> table reference
     */
    public Era(String alias) {
        this(DSL.name(alias), ERA);
    }

    /**
     * Create an aliased <code>era</code> table reference
     */
    public Era(Name alias) {
        this(alias, ERA);
    }

    /**
     * Create a <code>era</code> table reference
     */
    public Era() {
        this(DSL.name("era"), null);
    }

    public <O extends Record> Era(Table<O> child, ForeignKey<O, EraRecord> key) {
        super(child, key, ERA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<EraRecord> getPrimaryKey() {
        return Keys.ERA_PKEY;
    }

    @Override
    public Era as(String alias) {
        return new Era(DSL.name(alias), this);
    }

    @Override
    public Era as(Name alias) {
        return new Era(alias, this);
    }

    @Override
    public Era as(Table<?> alias) {
        return new Era(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Era rename(String name) {
        return new Era(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Era rename(Name name) {
        return new Era(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Era rename(Table<?> name) {
        return new Era(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Long, Long, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Long, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Long, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
