/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.cardanofoundation.ledgersync.jooq.DefaultSchema;
import org.cardanofoundation.ledgersync.jooq.Indexes;
import org.cardanofoundation.ledgersync.jooq.Keys;
import org.cardanofoundation.ledgersync.jooq.tables.records.ExtraKeyWitnessRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExtraKeyWitness extends TableImpl<ExtraKeyWitnessRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>extra_key_witness</code>
     */
    public static final ExtraKeyWitness EXTRA_KEY_WITNESS = new ExtraKeyWitness();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExtraKeyWitnessRecord> getRecordType() {
        return ExtraKeyWitnessRecord.class;
    }

    /**
     * The column <code>extra_key_witness.id</code>.
     */
    public final TableField<ExtraKeyWitnessRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>extra_key_witness.hash</code>.
     */
    public final TableField<ExtraKeyWitnessRecord, String> HASH = createField(DSL.name("hash"), SQLDataType.VARCHAR(56).nullable(false), this, "");

    /**
     * The column <code>extra_key_witness.tx_id</code>.
     */
    public final TableField<ExtraKeyWitnessRecord, Long> TX_ID = createField(DSL.name("tx_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private ExtraKeyWitness(Name alias, Table<ExtraKeyWitnessRecord> aliased) {
        this(alias, aliased, null);
    }

    private ExtraKeyWitness(Name alias, Table<ExtraKeyWitnessRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>extra_key_witness</code> table reference
     */
    public ExtraKeyWitness(String alias) {
        this(DSL.name(alias), EXTRA_KEY_WITNESS);
    }

    /**
     * Create an aliased <code>extra_key_witness</code> table reference
     */
    public ExtraKeyWitness(Name alias) {
        this(alias, EXTRA_KEY_WITNESS);
    }

    /**
     * Create a <code>extra_key_witness</code> table reference
     */
    public ExtraKeyWitness() {
        this(DSL.name("extra_key_witness"), null);
    }

    public <O extends Record> ExtraKeyWitness(Table<O> child, ForeignKey<O, ExtraKeyWitnessRecord> key) {
        super(child, key, EXTRA_KEY_WITNESS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.EXTRA_KEY_WITNESS_HASH_INDEX, Indexes.IDX_EXTRA_KEY_WITNESS_TX_ID);
    }

    @Override
    public Identity<ExtraKeyWitnessRecord, Long> getIdentity() {
        return (Identity<ExtraKeyWitnessRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ExtraKeyWitnessRecord> getPrimaryKey() {
        return Keys.EXTRA_KEY_WITNESS_PKEY;
    }

    @Override
    public List<UniqueKey<ExtraKeyWitnessRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_WITNESS);
    }

    @Override
    public ExtraKeyWitness as(String alias) {
        return new ExtraKeyWitness(DSL.name(alias), this);
    }

    @Override
    public ExtraKeyWitness as(Name alias) {
        return new ExtraKeyWitness(alias, this);
    }

    @Override
    public ExtraKeyWitness as(Table<?> alias) {
        return new ExtraKeyWitness(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ExtraKeyWitness rename(String name) {
        return new ExtraKeyWitness(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExtraKeyWitness rename(Name name) {
        return new ExtraKeyWitness(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExtraKeyWitness rename(Table<?> name) {
        return new ExtraKeyWitness(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
