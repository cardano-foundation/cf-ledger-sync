/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables.records;


import java.time.LocalDateTime;

import org.cardanofoundation.ledgersync.jooq.tables.Cursor_;
import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cursor_Record extends UpdatableRecordImpl<Cursor_Record> implements Record8<Integer, String, Long, Long, Integer, String, LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>cursor_.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>cursor_.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>cursor_.block_hash</code>.
     */
    public void setBlockHash(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>cursor_.block_hash</code>.
     */
    public String getBlockHash() {
        return (String) get(1);
    }

    /**
     * Setter for <code>cursor_.slot</code>.
     */
    public void setSlot(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>cursor_.slot</code>.
     */
    public Long getSlot() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>cursor_.block_number</code>.
     */
    public void setBlockNumber(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>cursor_.block_number</code>.
     */
    public Long getBlockNumber() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>cursor_.era</code>.
     */
    public void setEra(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>cursor_.era</code>.
     */
    public Integer getEra() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>cursor_.prev_block_hash</code>.
     */
    public void setPrevBlockHash(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>cursor_.prev_block_hash</code>.
     */
    public String getPrevBlockHash() {
        return (String) get(5);
    }

    /**
     * Setter for <code>cursor_.create_datetime</code>.
     */
    public void setCreateDatetime(LocalDateTime value) {
        set(6, value);
    }

    /**
     * Getter for <code>cursor_.create_datetime</code>.
     */
    public LocalDateTime getCreateDatetime() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>cursor_.update_datetime</code>.
     */
    public void setUpdateDatetime(LocalDateTime value) {
        set(7, value);
    }

    /**
     * Getter for <code>cursor_.update_datetime</code>.
     */
    public LocalDateTime getUpdateDatetime() {
        return (LocalDateTime) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Integer, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, Long, Long, Integer, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Integer, String, Long, Long, Integer, String, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Cursor_.CURSOR_.ID;
    }

    @Override
    public Field<String> field2() {
        return Cursor_.CURSOR_.BLOCK_HASH;
    }

    @Override
    public Field<Long> field3() {
        return Cursor_.CURSOR_.SLOT;
    }

    @Override
    public Field<Long> field4() {
        return Cursor_.CURSOR_.BLOCK_NUMBER;
    }

    @Override
    public Field<Integer> field5() {
        return Cursor_.CURSOR_.ERA;
    }

    @Override
    public Field<String> field6() {
        return Cursor_.CURSOR_.PREV_BLOCK_HASH;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return Cursor_.CURSOR_.CREATE_DATETIME;
    }

    @Override
    public Field<LocalDateTime> field8() {
        return Cursor_.CURSOR_.UPDATE_DATETIME;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getBlockHash();
    }

    @Override
    public Long component3() {
        return getSlot();
    }

    @Override
    public Long component4() {
        return getBlockNumber();
    }

    @Override
    public Integer component5() {
        return getEra();
    }

    @Override
    public String component6() {
        return getPrevBlockHash();
    }

    @Override
    public LocalDateTime component7() {
        return getCreateDatetime();
    }

    @Override
    public LocalDateTime component8() {
        return getUpdateDatetime();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getBlockHash();
    }

    @Override
    public Long value3() {
        return getSlot();
    }

    @Override
    public Long value4() {
        return getBlockNumber();
    }

    @Override
    public Integer value5() {
        return getEra();
    }

    @Override
    public String value6() {
        return getPrevBlockHash();
    }

    @Override
    public LocalDateTime value7() {
        return getCreateDatetime();
    }

    @Override
    public LocalDateTime value8() {
        return getUpdateDatetime();
    }

    @Override
    public Cursor_Record value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public Cursor_Record value2(String value) {
        setBlockHash(value);
        return this;
    }

    @Override
    public Cursor_Record value3(Long value) {
        setSlot(value);
        return this;
    }

    @Override
    public Cursor_Record value4(Long value) {
        setBlockNumber(value);
        return this;
    }

    @Override
    public Cursor_Record value5(Integer value) {
        setEra(value);
        return this;
    }

    @Override
    public Cursor_Record value6(String value) {
        setPrevBlockHash(value);
        return this;
    }

    @Override
    public Cursor_Record value7(LocalDateTime value) {
        setCreateDatetime(value);
        return this;
    }

    @Override
    public Cursor_Record value8(LocalDateTime value) {
        setUpdateDatetime(value);
        return this;
    }

    @Override
    public Cursor_Record values(Integer value1, String value2, Long value3, Long value4, Integer value5, String value6, LocalDateTime value7, LocalDateTime value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached Cursor_Record
     */
    public Cursor_Record() {
        super(Cursor_.CURSOR_);
    }

    /**
     * Create a detached, initialised Cursor_Record
     */
    public Cursor_Record(Integer id, String blockHash, Long slot, Long blockNumber, Integer era, String prevBlockHash, LocalDateTime createDatetime, LocalDateTime updateDatetime) {
        super(Cursor_.CURSOR_);

        setId(id);
        setBlockHash(blockHash);
        setSlot(slot);
        setBlockNumber(blockNumber);
        setEra(era);
        setPrevBlockHash(prevBlockHash);
        setCreateDatetime(createDatetime);
        setUpdateDatetime(updateDatetime);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised Cursor_Record
     */
    public Cursor_Record(org.cardanofoundation.ledgersync.jooq.tables.pojos.Cursor_ value) {
        super(Cursor_.CURSOR_);

        if (value != null) {
            setId(value.getId());
            setBlockHash(value.getBlockHash());
            setSlot(value.getSlot());
            setBlockNumber(value.getBlockNumber());
            setEra(value.getEra());
            setPrevBlockHash(value.getPrevBlockHash());
            setCreateDatetime(value.getCreateDatetime());
            setUpdateDatetime(value.getUpdateDatetime());
            resetChangedOnNotNull();
        }
    }
}
