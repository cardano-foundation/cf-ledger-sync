/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables.pojos;


import java.io.Serializable;
import java.math.BigInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Address implements Serializable {

    private static final long serialVersionUID = 1L;

    private Long id;
    private String address;
    private Boolean addressHasScript;
    private BigInteger balance;
    private Long txCount;
    private Long stakeAddressId;
    private Boolean verifiedContract;

    public Address() {}

    public Address(Address value) {
        this.id = value.id;
        this.address = value.address;
        this.addressHasScript = value.addressHasScript;
        this.balance = value.balance;
        this.txCount = value.txCount;
        this.stakeAddressId = value.stakeAddressId;
        this.verifiedContract = value.verifiedContract;
    }

    public Address(
        Long id,
        String address,
        Boolean addressHasScript,
        BigInteger balance,
        Long txCount,
        Long stakeAddressId,
        Boolean verifiedContract
    ) {
        this.id = id;
        this.address = address;
        this.addressHasScript = addressHasScript;
        this.balance = balance;
        this.txCount = txCount;
        this.stakeAddressId = stakeAddressId;
        this.verifiedContract = verifiedContract;
    }

    /**
     * Getter for <code>address.id</code>.
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Setter for <code>address.id</code>.
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Getter for <code>address.address</code>.
     */
    public String getAddress() {
        return this.address;
    }

    /**
     * Setter for <code>address.address</code>.
     */
    public void setAddress(String address) {
        this.address = address;
    }

    /**
     * Getter for <code>address.address_has_script</code>.
     */
    public Boolean getAddressHasScript() {
        return this.addressHasScript;
    }

    /**
     * Setter for <code>address.address_has_script</code>.
     */
    public void setAddressHasScript(Boolean addressHasScript) {
        this.addressHasScript = addressHasScript;
    }

    /**
     * Getter for <code>address.balance</code>.
     */
    public BigInteger getBalance() {
        return this.balance;
    }

    /**
     * Setter for <code>address.balance</code>.
     */
    public void setBalance(BigInteger balance) {
        this.balance = balance;
    }

    /**
     * Getter for <code>address.tx_count</code>.
     */
    public Long getTxCount() {
        return this.txCount;
    }

    /**
     * Setter for <code>address.tx_count</code>.
     */
    public void setTxCount(Long txCount) {
        this.txCount = txCount;
    }

    /**
     * Getter for <code>address.stake_address_id</code>.
     */
    public Long getStakeAddressId() {
        return this.stakeAddressId;
    }

    /**
     * Setter for <code>address.stake_address_id</code>.
     */
    public void setStakeAddressId(Long stakeAddressId) {
        this.stakeAddressId = stakeAddressId;
    }

    /**
     * Getter for <code>address.verified_contract</code>.
     */
    public Boolean getVerifiedContract() {
        return this.verifiedContract;
    }

    /**
     * Setter for <code>address.verified_contract</code>.
     */
    public void setVerifiedContract(Boolean verifiedContract) {
        this.verifiedContract = verifiedContract;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Address other = (Address) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.address == null) {
            if (other.address != null)
                return false;
        }
        else if (!this.address.equals(other.address))
            return false;
        if (this.addressHasScript == null) {
            if (other.addressHasScript != null)
                return false;
        }
        else if (!this.addressHasScript.equals(other.addressHasScript))
            return false;
        if (this.balance == null) {
            if (other.balance != null)
                return false;
        }
        else if (!this.balance.equals(other.balance))
            return false;
        if (this.txCount == null) {
            if (other.txCount != null)
                return false;
        }
        else if (!this.txCount.equals(other.txCount))
            return false;
        if (this.stakeAddressId == null) {
            if (other.stakeAddressId != null)
                return false;
        }
        else if (!this.stakeAddressId.equals(other.stakeAddressId))
            return false;
        if (this.verifiedContract == null) {
            if (other.verifiedContract != null)
                return false;
        }
        else if (!this.verifiedContract.equals(other.verifiedContract))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.address == null) ? 0 : this.address.hashCode());
        result = prime * result + ((this.addressHasScript == null) ? 0 : this.addressHasScript.hashCode());
        result = prime * result + ((this.balance == null) ? 0 : this.balance.hashCode());
        result = prime * result + ((this.txCount == null) ? 0 : this.txCount.hashCode());
        result = prime * result + ((this.stakeAddressId == null) ? 0 : this.stakeAddressId.hashCode());
        result = prime * result + ((this.verifiedContract == null) ? 0 : this.verifiedContract.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Address (");

        sb.append(id);
        sb.append(", ").append(address);
        sb.append(", ").append(addressHasScript);
        sb.append(", ").append(balance);
        sb.append(", ").append(txCount);
        sb.append(", ").append(stakeAddressId);
        sb.append(", ").append(verifiedContract);

        sb.append(")");
        return sb.toString();
    }
}
