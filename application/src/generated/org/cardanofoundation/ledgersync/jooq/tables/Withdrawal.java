/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables;


import java.math.BigInteger;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.cardanofoundation.ledgersync.jooq.DefaultSchema;
import org.cardanofoundation.ledgersync.jooq.Indexes;
import org.cardanofoundation.ledgersync.jooq.Keys;
import org.cardanofoundation.ledgersync.jooq.tables.records.WithdrawalRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Withdrawal extends TableImpl<WithdrawalRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>withdrawal</code>
     */
    public static final Withdrawal WITHDRAWAL = new Withdrawal();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WithdrawalRecord> getRecordType() {
        return WithdrawalRecord.class;
    }

    /**
     * The column <code>withdrawal.id</code>.
     */
    public final TableField<WithdrawalRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>withdrawal.amount</code>.
     */
    public final TableField<WithdrawalRecord, BigInteger> AMOUNT = createField(DSL.name("amount"), SQLDataType.DECIMAL_INTEGER(20).nullable(false), this, "");

    /**
     * The column <code>withdrawal.addr_id</code>.
     */
    public final TableField<WithdrawalRecord, Long> ADDR_ID = createField(DSL.name("addr_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>withdrawal.redeemer_id</code>.
     */
    public final TableField<WithdrawalRecord, Long> REDEEMER_ID = createField(DSL.name("redeemer_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>withdrawal.tx_id</code>.
     */
    public final TableField<WithdrawalRecord, Long> TX_ID = createField(DSL.name("tx_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private Withdrawal(Name alias, Table<WithdrawalRecord> aliased) {
        this(alias, aliased, null);
    }

    private Withdrawal(Name alias, Table<WithdrawalRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>withdrawal</code> table reference
     */
    public Withdrawal(String alias) {
        this(DSL.name(alias), WITHDRAWAL);
    }

    /**
     * Create an aliased <code>withdrawal</code> table reference
     */
    public Withdrawal(Name alias) {
        this(alias, WITHDRAWAL);
    }

    /**
     * Create a <code>withdrawal</code> table reference
     */
    public Withdrawal() {
        this(DSL.name("withdrawal"), null);
    }

    public <O extends Record> Withdrawal(Table<O> child, ForeignKey<O, WithdrawalRecord> key) {
        super(child, key, WITHDRAWAL);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_WITHDRAWAL_ADDR_ID, Indexes.IDX_WITHDRAWAL_REDEEMER_ID, Indexes.IDX_WITHDRAWAL_TX_ID);
    }

    @Override
    public Identity<WithdrawalRecord, Long> getIdentity() {
        return (Identity<WithdrawalRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<WithdrawalRecord> getPrimaryKey() {
        return Keys.WITHDRAWAL_PKEY;
    }

    @Override
    public Withdrawal as(String alias) {
        return new Withdrawal(DSL.name(alias), this);
    }

    @Override
    public Withdrawal as(Name alias) {
        return new Withdrawal(alias, this);
    }

    @Override
    public Withdrawal as(Table<?> alias) {
        return new Withdrawal(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Withdrawal rename(String name) {
        return new Withdrawal(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Withdrawal rename(Name name) {
        return new Withdrawal(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Withdrawal rename(Table<?> name) {
        return new Withdrawal(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, BigInteger, Long, Long, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super BigInteger, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super BigInteger, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
