/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.cardanofoundation.ledgersync.jooq.DefaultSchema;
import org.cardanofoundation.ledgersync.jooq.Indexes;
import org.cardanofoundation.ledgersync.jooq.Keys;
import org.cardanofoundation.ledgersync.jooq.tables.records.StakeKeyReportHistoryRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function12;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StakeKeyReportHistory extends TableImpl<StakeKeyReportHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>stake_key_report_history</code>
     */
    public static final StakeKeyReportHistory STAKE_KEY_REPORT_HISTORY = new StakeKeyReportHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StakeKeyReportHistoryRecord> getRecordType() {
        return StakeKeyReportHistoryRecord.class;
    }

    /**
     * The column <code>stake_key_report_history.id</code>.
     */
    public final TableField<StakeKeyReportHistoryRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>stake_key_report_history.stake_key</code>.
     */
    public final TableField<StakeKeyReportHistoryRecord, String> STAKE_KEY = createField(DSL.name("stake_key"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stake_key_report_history.from_date</code>.
     */
    public final TableField<StakeKeyReportHistoryRecord, LocalDateTime> FROM_DATE = createField(DSL.name("from_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>stake_key_report_history.to_date</code>.
     */
    public final TableField<StakeKeyReportHistoryRecord, LocalDateTime> TO_DATE = createField(DSL.name("to_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>stake_key_report_history.is_ada_transfer</code>.
     */
    public final TableField<StakeKeyReportHistoryRecord, Boolean> IS_ADA_TRANSFER = createField(DSL.name("is_ada_transfer"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>stake_key_report_history.is_fees_paid</code>.
     */
    public final TableField<StakeKeyReportHistoryRecord, Boolean> IS_FEES_PAID = createField(DSL.name("is_fees_paid"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>stake_key_report_history.report_id</code>.
     */
    public final TableField<StakeKeyReportHistoryRecord, Long> REPORT_ID = createField(DSL.name("report_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stake_key_report_history.event_registration</code>.
     */
    public final TableField<StakeKeyReportHistoryRecord, Boolean> EVENT_REGISTRATION = createField(DSL.name("event_registration"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>stake_key_report_history.event_delegation</code>.
     */
    public final TableField<StakeKeyReportHistoryRecord, Boolean> EVENT_DELEGATION = createField(DSL.name("event_delegation"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>stake_key_report_history.event_rewards</code>.
     */
    public final TableField<StakeKeyReportHistoryRecord, Boolean> EVENT_REWARDS = createField(DSL.name("event_rewards"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>stake_key_report_history.event_withdrawal</code>.
     */
    public final TableField<StakeKeyReportHistoryRecord, Boolean> EVENT_WITHDRAWAL = createField(DSL.name("event_withdrawal"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>stake_key_report_history.event_deregistration</code>.
     */
    public final TableField<StakeKeyReportHistoryRecord, Boolean> EVENT_DEREGISTRATION = createField(DSL.name("event_deregistration"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    private StakeKeyReportHistory(Name alias, Table<StakeKeyReportHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private StakeKeyReportHistory(Name alias, Table<StakeKeyReportHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>stake_key_report_history</code> table reference
     */
    public StakeKeyReportHistory(String alias) {
        this(DSL.name(alias), STAKE_KEY_REPORT_HISTORY);
    }

    /**
     * Create an aliased <code>stake_key_report_history</code> table reference
     */
    public StakeKeyReportHistory(Name alias) {
        this(alias, STAKE_KEY_REPORT_HISTORY);
    }

    /**
     * Create a <code>stake_key_report_history</code> table reference
     */
    public StakeKeyReportHistory() {
        this(DSL.name("stake_key_report_history"), null);
    }

    public <O extends Record> StakeKeyReportHistory(Table<O> child, ForeignKey<O, StakeKeyReportHistoryRecord> key) {
        super(child, key, STAKE_KEY_REPORT_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.STAKE_KEY_REPORT_HISTORY_REPORT_ID_IDX, Indexes.STAKE_KEY_REPORT_HISTORY_STAKE_KEY_IDX, Indexes.STAKE_KEY_REPORT_HISTORY_STAKE_KEY_REPORT_ID_IDX);
    }

    @Override
    public Identity<StakeKeyReportHistoryRecord, Long> getIdentity() {
        return (Identity<StakeKeyReportHistoryRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<StakeKeyReportHistoryRecord> getPrimaryKey() {
        return Keys.STAKE_KEY_REPORT_HISTORY_PKEY;
    }

    @Override
    public StakeKeyReportHistory as(String alias) {
        return new StakeKeyReportHistory(DSL.name(alias), this);
    }

    @Override
    public StakeKeyReportHistory as(Name alias) {
        return new StakeKeyReportHistory(alias, this);
    }

    @Override
    public StakeKeyReportHistory as(Table<?> alias) {
        return new StakeKeyReportHistory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public StakeKeyReportHistory rename(String name) {
        return new StakeKeyReportHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StakeKeyReportHistory rename(Name name) {
        return new StakeKeyReportHistory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public StakeKeyReportHistory rename(Table<?> name) {
        return new StakeKeyReportHistory(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, String, LocalDateTime, LocalDateTime, Boolean, Boolean, Long, Boolean, Boolean, Boolean, Boolean, Boolean> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super Long, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super Boolean, ? super Boolean, ? super Long, ? super Boolean, ? super Boolean, ? super Boolean, ? super Boolean, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super Long, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super Boolean, ? super Boolean, ? super Long, ? super Boolean, ? super Boolean, ? super Boolean, ? super Boolean, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
