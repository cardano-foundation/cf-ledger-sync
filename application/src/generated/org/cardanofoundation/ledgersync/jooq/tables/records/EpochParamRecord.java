/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables.records;


import java.math.BigInteger;

import org.cardanofoundation.ledgersync.jooq.tables.EpochParam;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EpochParamRecord extends UpdatableRecordImpl<EpochParamRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>epoch_param.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>epoch_param.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>epoch_param.coins_per_utxo_size</code>.
     */
    public void setCoinsPerUtxoSize(BigInteger value) {
        set(1, value);
    }

    /**
     * Getter for <code>epoch_param.coins_per_utxo_size</code>.
     */
    public BigInteger getCoinsPerUtxoSize() {
        return (BigInteger) get(1);
    }

    /**
     * Setter for <code>epoch_param.collateral_percent</code>.
     */
    public void setCollateralPercent(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>epoch_param.collateral_percent</code>.
     */
    public Integer getCollateralPercent() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>epoch_param.decentralisation</code>.
     */
    public void setDecentralisation(Double value) {
        set(3, value);
    }

    /**
     * Getter for <code>epoch_param.decentralisation</code>.
     */
    public Double getDecentralisation() {
        return (Double) get(3);
    }

    /**
     * Setter for <code>epoch_param.epoch_no</code>.
     */
    public void setEpochNo(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>epoch_param.epoch_no</code>.
     */
    public Integer getEpochNo() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>epoch_param.extra_entropy</code>.
     */
    public void setExtraEntropy(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>epoch_param.extra_entropy</code>.
     */
    public String getExtraEntropy() {
        return (String) get(5);
    }

    /**
     * Setter for <code>epoch_param.influence</code>.
     */
    public void setInfluence(Double value) {
        set(6, value);
    }

    /**
     * Getter for <code>epoch_param.influence</code>.
     */
    public Double getInfluence() {
        return (Double) get(6);
    }

    /**
     * Setter for <code>epoch_param.key_deposit</code>.
     */
    public void setKeyDeposit(BigInteger value) {
        set(7, value);
    }

    /**
     * Getter for <code>epoch_param.key_deposit</code>.
     */
    public BigInteger getKeyDeposit() {
        return (BigInteger) get(7);
    }

    /**
     * Setter for <code>epoch_param.max_bh_size</code>.
     */
    public void setMaxBhSize(Integer value) {
        set(8, value);
    }

    /**
     * Getter for <code>epoch_param.max_bh_size</code>.
     */
    public Integer getMaxBhSize() {
        return (Integer) get(8);
    }

    /**
     * Setter for <code>epoch_param.max_block_ex_mem</code>.
     */
    public void setMaxBlockExMem(BigInteger value) {
        set(9, value);
    }

    /**
     * Getter for <code>epoch_param.max_block_ex_mem</code>.
     */
    public BigInteger getMaxBlockExMem() {
        return (BigInteger) get(9);
    }

    /**
     * Setter for <code>epoch_param.max_block_ex_steps</code>.
     */
    public void setMaxBlockExSteps(BigInteger value) {
        set(10, value);
    }

    /**
     * Getter for <code>epoch_param.max_block_ex_steps</code>.
     */
    public BigInteger getMaxBlockExSteps() {
        return (BigInteger) get(10);
    }

    /**
     * Setter for <code>epoch_param.max_block_size</code>.
     */
    public void setMaxBlockSize(Integer value) {
        set(11, value);
    }

    /**
     * Getter for <code>epoch_param.max_block_size</code>.
     */
    public Integer getMaxBlockSize() {
        return (Integer) get(11);
    }

    /**
     * Setter for <code>epoch_param.max_collateral_inputs</code>.
     */
    public void setMaxCollateralInputs(Integer value) {
        set(12, value);
    }

    /**
     * Getter for <code>epoch_param.max_collateral_inputs</code>.
     */
    public Integer getMaxCollateralInputs() {
        return (Integer) get(12);
    }

    /**
     * Setter for <code>epoch_param.max_epoch</code>.
     */
    public void setMaxEpoch(Integer value) {
        set(13, value);
    }

    /**
     * Getter for <code>epoch_param.max_epoch</code>.
     */
    public Integer getMaxEpoch() {
        return (Integer) get(13);
    }

    /**
     * Setter for <code>epoch_param.max_tx_ex_mem</code>.
     */
    public void setMaxTxExMem(BigInteger value) {
        set(14, value);
    }

    /**
     * Getter for <code>epoch_param.max_tx_ex_mem</code>.
     */
    public BigInteger getMaxTxExMem() {
        return (BigInteger) get(14);
    }

    /**
     * Setter for <code>epoch_param.max_tx_ex_steps</code>.
     */
    public void setMaxTxExSteps(BigInteger value) {
        set(15, value);
    }

    /**
     * Getter for <code>epoch_param.max_tx_ex_steps</code>.
     */
    public BigInteger getMaxTxExSteps() {
        return (BigInteger) get(15);
    }

    /**
     * Setter for <code>epoch_param.max_tx_size</code>.
     */
    public void setMaxTxSize(Integer value) {
        set(16, value);
    }

    /**
     * Getter for <code>epoch_param.max_tx_size</code>.
     */
    public Integer getMaxTxSize() {
        return (Integer) get(16);
    }

    /**
     * Setter for <code>epoch_param.max_val_size</code>.
     */
    public void setMaxValSize(BigInteger value) {
        set(17, value);
    }

    /**
     * Getter for <code>epoch_param.max_val_size</code>.
     */
    public BigInteger getMaxValSize() {
        return (BigInteger) get(17);
    }

    /**
     * Setter for <code>epoch_param.min_fee_a</code>.
     */
    public void setMinFeeA(Integer value) {
        set(18, value);
    }

    /**
     * Getter for <code>epoch_param.min_fee_a</code>.
     */
    public Integer getMinFeeA() {
        return (Integer) get(18);
    }

    /**
     * Setter for <code>epoch_param.min_fee_b</code>.
     */
    public void setMinFeeB(Integer value) {
        set(19, value);
    }

    /**
     * Getter for <code>epoch_param.min_fee_b</code>.
     */
    public Integer getMinFeeB() {
        return (Integer) get(19);
    }

    /**
     * Setter for <code>epoch_param.min_pool_cost</code>.
     */
    public void setMinPoolCost(BigInteger value) {
        set(20, value);
    }

    /**
     * Getter for <code>epoch_param.min_pool_cost</code>.
     */
    public BigInteger getMinPoolCost() {
        return (BigInteger) get(20);
    }

    /**
     * Setter for <code>epoch_param.min_utxo_value</code>.
     */
    public void setMinUtxoValue(BigInteger value) {
        set(21, value);
    }

    /**
     * Getter for <code>epoch_param.min_utxo_value</code>.
     */
    public BigInteger getMinUtxoValue() {
        return (BigInteger) get(21);
    }

    /**
     * Setter for <code>epoch_param.monetary_expand_rate</code>.
     */
    public void setMonetaryExpandRate(Double value) {
        set(22, value);
    }

    /**
     * Getter for <code>epoch_param.monetary_expand_rate</code>.
     */
    public Double getMonetaryExpandRate() {
        return (Double) get(22);
    }

    /**
     * Setter for <code>epoch_param.nonce</code>.
     */
    public void setNonce(String value) {
        set(23, value);
    }

    /**
     * Getter for <code>epoch_param.nonce</code>.
     */
    public String getNonce() {
        return (String) get(23);
    }

    /**
     * Setter for <code>epoch_param.optimal_pool_count</code>.
     */
    public void setOptimalPoolCount(Integer value) {
        set(24, value);
    }

    /**
     * Getter for <code>epoch_param.optimal_pool_count</code>.
     */
    public Integer getOptimalPoolCount() {
        return (Integer) get(24);
    }

    /**
     * Setter for <code>epoch_param.pool_deposit</code>.
     */
    public void setPoolDeposit(BigInteger value) {
        set(25, value);
    }

    /**
     * Getter for <code>epoch_param.pool_deposit</code>.
     */
    public BigInteger getPoolDeposit() {
        return (BigInteger) get(25);
    }

    /**
     * Setter for <code>epoch_param.price_mem</code>.
     */
    public void setPriceMem(Double value) {
        set(26, value);
    }

    /**
     * Getter for <code>epoch_param.price_mem</code>.
     */
    public Double getPriceMem() {
        return (Double) get(26);
    }

    /**
     * Setter for <code>epoch_param.price_step</code>.
     */
    public void setPriceStep(Double value) {
        set(27, value);
    }

    /**
     * Getter for <code>epoch_param.price_step</code>.
     */
    public Double getPriceStep() {
        return (Double) get(27);
    }

    /**
     * Setter for <code>epoch_param.protocol_major</code>.
     */
    public void setProtocolMajor(Integer value) {
        set(28, value);
    }

    /**
     * Getter for <code>epoch_param.protocol_major</code>.
     */
    public Integer getProtocolMajor() {
        return (Integer) get(28);
    }

    /**
     * Setter for <code>epoch_param.protocol_minor</code>.
     */
    public void setProtocolMinor(Integer value) {
        set(29, value);
    }

    /**
     * Getter for <code>epoch_param.protocol_minor</code>.
     */
    public Integer getProtocolMinor() {
        return (Integer) get(29);
    }

    /**
     * Setter for <code>epoch_param.treasury_growth_rate</code>.
     */
    public void setTreasuryGrowthRate(Double value) {
        set(30, value);
    }

    /**
     * Getter for <code>epoch_param.treasury_growth_rate</code>.
     */
    public Double getTreasuryGrowthRate() {
        return (Double) get(30);
    }

    /**
     * Setter for <code>epoch_param.block_id</code>.
     */
    public void setBlockId(Long value) {
        set(31, value);
    }

    /**
     * Getter for <code>epoch_param.block_id</code>.
     */
    public Long getBlockId() {
        return (Long) get(31);
    }

    /**
     * Setter for <code>epoch_param.cost_model_id</code>.
     */
    public void setCostModelId(Long value) {
        set(32, value);
    }

    /**
     * Getter for <code>epoch_param.cost_model_id</code>.
     */
    public Long getCostModelId() {
        return (Long) get(32);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached EpochParamRecord
     */
    public EpochParamRecord() {
        super(EpochParam.EPOCH_PARAM);
    }

    /**
     * Create a detached, initialised EpochParamRecord
     */
    public EpochParamRecord(Long id, BigInteger coinsPerUtxoSize, Integer collateralPercent, Double decentralisation, Integer epochNo, String extraEntropy, Double influence, BigInteger keyDeposit, Integer maxBhSize, BigInteger maxBlockExMem, BigInteger maxBlockExSteps, Integer maxBlockSize, Integer maxCollateralInputs, Integer maxEpoch, BigInteger maxTxExMem, BigInteger maxTxExSteps, Integer maxTxSize, BigInteger maxValSize, Integer minFeeA, Integer minFeeB, BigInteger minPoolCost, BigInteger minUtxoValue, Double monetaryExpandRate, String nonce, Integer optimalPoolCount, BigInteger poolDeposit, Double priceMem, Double priceStep, Integer protocolMajor, Integer protocolMinor, Double treasuryGrowthRate, Long blockId, Long costModelId) {
        super(EpochParam.EPOCH_PARAM);

        setId(id);
        setCoinsPerUtxoSize(coinsPerUtxoSize);
        setCollateralPercent(collateralPercent);
        setDecentralisation(decentralisation);
        setEpochNo(epochNo);
        setExtraEntropy(extraEntropy);
        setInfluence(influence);
        setKeyDeposit(keyDeposit);
        setMaxBhSize(maxBhSize);
        setMaxBlockExMem(maxBlockExMem);
        setMaxBlockExSteps(maxBlockExSteps);
        setMaxBlockSize(maxBlockSize);
        setMaxCollateralInputs(maxCollateralInputs);
        setMaxEpoch(maxEpoch);
        setMaxTxExMem(maxTxExMem);
        setMaxTxExSteps(maxTxExSteps);
        setMaxTxSize(maxTxSize);
        setMaxValSize(maxValSize);
        setMinFeeA(minFeeA);
        setMinFeeB(minFeeB);
        setMinPoolCost(minPoolCost);
        setMinUtxoValue(minUtxoValue);
        setMonetaryExpandRate(monetaryExpandRate);
        setNonce(nonce);
        setOptimalPoolCount(optimalPoolCount);
        setPoolDeposit(poolDeposit);
        setPriceMem(priceMem);
        setPriceStep(priceStep);
        setProtocolMajor(protocolMajor);
        setProtocolMinor(protocolMinor);
        setTreasuryGrowthRate(treasuryGrowthRate);
        setBlockId(blockId);
        setCostModelId(costModelId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised EpochParamRecord
     */
    public EpochParamRecord(org.cardanofoundation.ledgersync.jooq.tables.pojos.EpochParam value) {
        super(EpochParam.EPOCH_PARAM);

        if (value != null) {
            setId(value.getId());
            setCoinsPerUtxoSize(value.getCoinsPerUtxoSize());
            setCollateralPercent(value.getCollateralPercent());
            setDecentralisation(value.getDecentralisation());
            setEpochNo(value.getEpochNo());
            setExtraEntropy(value.getExtraEntropy());
            setInfluence(value.getInfluence());
            setKeyDeposit(value.getKeyDeposit());
            setMaxBhSize(value.getMaxBhSize());
            setMaxBlockExMem(value.getMaxBlockExMem());
            setMaxBlockExSteps(value.getMaxBlockExSteps());
            setMaxBlockSize(value.getMaxBlockSize());
            setMaxCollateralInputs(value.getMaxCollateralInputs());
            setMaxEpoch(value.getMaxEpoch());
            setMaxTxExMem(value.getMaxTxExMem());
            setMaxTxExSteps(value.getMaxTxExSteps());
            setMaxTxSize(value.getMaxTxSize());
            setMaxValSize(value.getMaxValSize());
            setMinFeeA(value.getMinFeeA());
            setMinFeeB(value.getMinFeeB());
            setMinPoolCost(value.getMinPoolCost());
            setMinUtxoValue(value.getMinUtxoValue());
            setMonetaryExpandRate(value.getMonetaryExpandRate());
            setNonce(value.getNonce());
            setOptimalPoolCount(value.getOptimalPoolCount());
            setPoolDeposit(value.getPoolDeposit());
            setPriceMem(value.getPriceMem());
            setPriceStep(value.getPriceStep());
            setProtocolMajor(value.getProtocolMajor());
            setProtocolMinor(value.getProtocolMinor());
            setTreasuryGrowthRate(value.getTreasuryGrowthRate());
            setBlockId(value.getBlockId());
            setCostModelId(value.getCostModelId());
            resetChangedOnNotNull();
        }
    }
}
