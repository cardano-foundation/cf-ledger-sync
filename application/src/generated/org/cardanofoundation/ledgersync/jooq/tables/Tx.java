/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables;


import java.math.BigInteger;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.cardanofoundation.ledgersync.jooq.DefaultSchema;
import org.cardanofoundation.ledgersync.jooq.Indexes;
import org.cardanofoundation.ledgersync.jooq.Keys;
import org.cardanofoundation.ledgersync.jooq.tables.records.TxRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function13;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tx extends TableImpl<TxRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tx</code>
     */
    public static final Tx TX = new Tx();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TxRecord> getRecordType() {
        return TxRecord.class;
    }

    /**
     * The column <code>tx.id</code>.
     */
    public final TableField<TxRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>tx.block_id</code>.
     */
    public final TableField<TxRecord, Long> BLOCK_ID = createField(DSL.name("block_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>tx.block_index</code>.
     */
    public final TableField<TxRecord, Long> BLOCK_INDEX = createField(DSL.name("block_index"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>tx.deposit</code>.
     */
    public final TableField<TxRecord, Long> DEPOSIT = createField(DSL.name("deposit"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>tx.fee</code>.
     */
    public final TableField<TxRecord, BigInteger> FEE = createField(DSL.name("fee"), SQLDataType.DECIMAL_INTEGER(20), this, "");

    /**
     * The column <code>tx.hash</code>.
     */
    public final TableField<TxRecord, String> HASH = createField(DSL.name("hash"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>tx.invalid_before</code>.
     */
    public final TableField<TxRecord, BigInteger> INVALID_BEFORE = createField(DSL.name("invalid_before"), SQLDataType.DECIMAL_INTEGER(20), this, "");

    /**
     * The column <code>tx.invalid_hereafter</code>.
     */
    public final TableField<TxRecord, BigInteger> INVALID_HEREAFTER = createField(DSL.name("invalid_hereafter"), SQLDataType.DECIMAL_INTEGER(20), this, "");

    /**
     * The column <code>tx.out_sum</code>.
     */
    public final TableField<TxRecord, BigInteger> OUT_SUM = createField(DSL.name("out_sum"), SQLDataType.DECIMAL_INTEGER(20), this, "");

    /**
     * The column <code>tx.script_size</code>.
     */
    public final TableField<TxRecord, Integer> SCRIPT_SIZE = createField(DSL.name("script_size"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>tx.size</code>.
     */
    public final TableField<TxRecord, Integer> SIZE = createField(DSL.name("size"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>tx.valid_contract</code>.
     */
    public final TableField<TxRecord, Boolean> VALID_CONTRACT = createField(DSL.name("valid_contract"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>tx.tx_metadata_hash_id</code>.
     */
    public final TableField<TxRecord, Long> TX_METADATA_HASH_ID = createField(DSL.name("tx_metadata_hash_id"), SQLDataType.BIGINT, this, "");

    private Tx(Name alias, Table<TxRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tx(Name alias, Table<TxRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>tx</code> table reference
     */
    public Tx(String alias) {
        this(DSL.name(alias), TX);
    }

    /**
     * Create an aliased <code>tx</code> table reference
     */
    public Tx(Name alias) {
        this(alias, TX);
    }

    /**
     * Create a <code>tx</code> table reference
     */
    public Tx() {
        this(DSL.name("tx"), null);
    }

    public <O extends Record> Tx(Table<O> child, ForeignKey<O, TxRecord> key) {
        super(child, key, TX);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_TX_BLOCK_ID, Indexes.TX__TX_METADATA_HASH_IDX, Indexes.TX_BLOCK_ID_ID_IDX, Indexes.TX_FEE_IDX, Indexes.TX_OUT_SUM_IDX);
    }

    @Override
    public Identity<TxRecord, Long> getIdentity() {
        return (Identity<TxRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TxRecord> getPrimaryKey() {
        return Keys.TX_PKEY;
    }

    @Override
    public List<UniqueKey<TxRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_TX);
    }

    @Override
    public Tx as(String alias) {
        return new Tx(DSL.name(alias), this);
    }

    @Override
    public Tx as(Name alias) {
        return new Tx(alias, this);
    }

    @Override
    public Tx as(Table<?> alias) {
        return new Tx(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tx rename(String name) {
        return new Tx(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tx rename(Name name) {
        return new Tx(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tx rename(Table<?> name) {
        return new Tx(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, Long, Long, Long, BigInteger, String, BigInteger, BigInteger, BigInteger, Integer, Integer, Boolean, Long> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function13<? super Long, ? super Long, ? super Long, ? super Long, ? super BigInteger, ? super String, ? super BigInteger, ? super BigInteger, ? super BigInteger, ? super Integer, ? super Integer, ? super Boolean, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function13<? super Long, ? super Long, ? super Long, ? super Long, ? super BigInteger, ? super String, ? super BigInteger, ? super BigInteger, ? super BigInteger, ? super Integer, ? super Integer, ? super Boolean, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
