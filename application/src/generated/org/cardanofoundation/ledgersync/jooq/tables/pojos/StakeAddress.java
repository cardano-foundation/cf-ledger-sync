/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables.pojos;


import java.io.Serializable;
import java.math.BigInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StakeAddress implements Serializable {

    private static final long serialVersionUID = 1L;

    private Long id;
    private String hashRaw;
    private String scriptHash;
    private String view;
    private BigInteger balance;
    private BigInteger availableReward;

    public StakeAddress() {}

    public StakeAddress(StakeAddress value) {
        this.id = value.id;
        this.hashRaw = value.hashRaw;
        this.scriptHash = value.scriptHash;
        this.view = value.view;
        this.balance = value.balance;
        this.availableReward = value.availableReward;
    }

    public StakeAddress(
        Long id,
        String hashRaw,
        String scriptHash,
        String view,
        BigInteger balance,
        BigInteger availableReward
    ) {
        this.id = id;
        this.hashRaw = hashRaw;
        this.scriptHash = scriptHash;
        this.view = view;
        this.balance = balance;
        this.availableReward = availableReward;
    }

    /**
     * Getter for <code>stake_address.id</code>.
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Setter for <code>stake_address.id</code>.
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Getter for <code>stake_address.hash_raw</code>.
     */
    public String getHashRaw() {
        return this.hashRaw;
    }

    /**
     * Setter for <code>stake_address.hash_raw</code>.
     */
    public void setHashRaw(String hashRaw) {
        this.hashRaw = hashRaw;
    }

    /**
     * Getter for <code>stake_address.script_hash</code>.
     */
    public String getScriptHash() {
        return this.scriptHash;
    }

    /**
     * Setter for <code>stake_address.script_hash</code>.
     */
    public void setScriptHash(String scriptHash) {
        this.scriptHash = scriptHash;
    }

    /**
     * Getter for <code>stake_address.view</code>.
     */
    public String getView() {
        return this.view;
    }

    /**
     * Setter for <code>stake_address.view</code>.
     */
    public void setView(String view) {
        this.view = view;
    }

    /**
     * Getter for <code>stake_address.balance</code>.
     */
    public BigInteger getBalance() {
        return this.balance;
    }

    /**
     * Setter for <code>stake_address.balance</code>.
     */
    public void setBalance(BigInteger balance) {
        this.balance = balance;
    }

    /**
     * Getter for <code>stake_address.available_reward</code>.
     */
    public BigInteger getAvailableReward() {
        return this.availableReward;
    }

    /**
     * Setter for <code>stake_address.available_reward</code>.
     */
    public void setAvailableReward(BigInteger availableReward) {
        this.availableReward = availableReward;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final StakeAddress other = (StakeAddress) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.hashRaw == null) {
            if (other.hashRaw != null)
                return false;
        }
        else if (!this.hashRaw.equals(other.hashRaw))
            return false;
        if (this.scriptHash == null) {
            if (other.scriptHash != null)
                return false;
        }
        else if (!this.scriptHash.equals(other.scriptHash))
            return false;
        if (this.view == null) {
            if (other.view != null)
                return false;
        }
        else if (!this.view.equals(other.view))
            return false;
        if (this.balance == null) {
            if (other.balance != null)
                return false;
        }
        else if (!this.balance.equals(other.balance))
            return false;
        if (this.availableReward == null) {
            if (other.availableReward != null)
                return false;
        }
        else if (!this.availableReward.equals(other.availableReward))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.hashRaw == null) ? 0 : this.hashRaw.hashCode());
        result = prime * result + ((this.scriptHash == null) ? 0 : this.scriptHash.hashCode());
        result = prime * result + ((this.view == null) ? 0 : this.view.hashCode());
        result = prime * result + ((this.balance == null) ? 0 : this.balance.hashCode());
        result = prime * result + ((this.availableReward == null) ? 0 : this.availableReward.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("StakeAddress (");

        sb.append(id);
        sb.append(", ").append(hashRaw);
        sb.append(", ").append(scriptHash);
        sb.append(", ").append(view);
        sb.append(", ").append(balance);
        sb.append(", ").append(availableReward);

        sb.append(")");
        return sb.toString();
    }
}
