/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables.records;


import org.cardanofoundation.ledgersync.jooq.tables.StakeRegistration;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StakeRegistrationRecord extends UpdatableRecordImpl<StakeRegistrationRecord> implements Record5<Long, Integer, Integer, Long, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>stake_registration.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>stake_registration.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>stake_registration.cert_index</code>.
     */
    public void setCertIndex(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>stake_registration.cert_index</code>.
     */
    public Integer getCertIndex() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>stake_registration.epoch_no</code>.
     */
    public void setEpochNo(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>stake_registration.epoch_no</code>.
     */
    public Integer getEpochNo() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>stake_registration.addr_id</code>.
     */
    public void setAddrId(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>stake_registration.addr_id</code>.
     */
    public Long getAddrId() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>stake_registration.tx_id</code>.
     */
    public void setTxId(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>stake_registration.tx_id</code>.
     */
    public Long getTxId() {
        return (Long) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Integer, Integer, Long, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Long, Integer, Integer, Long, Long> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return StakeRegistration.STAKE_REGISTRATION.ID;
    }

    @Override
    public Field<Integer> field2() {
        return StakeRegistration.STAKE_REGISTRATION.CERT_INDEX;
    }

    @Override
    public Field<Integer> field3() {
        return StakeRegistration.STAKE_REGISTRATION.EPOCH_NO;
    }

    @Override
    public Field<Long> field4() {
        return StakeRegistration.STAKE_REGISTRATION.ADDR_ID;
    }

    @Override
    public Field<Long> field5() {
        return StakeRegistration.STAKE_REGISTRATION.TX_ID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getCertIndex();
    }

    @Override
    public Integer component3() {
        return getEpochNo();
    }

    @Override
    public Long component4() {
        return getAddrId();
    }

    @Override
    public Long component5() {
        return getTxId();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getCertIndex();
    }

    @Override
    public Integer value3() {
        return getEpochNo();
    }

    @Override
    public Long value4() {
        return getAddrId();
    }

    @Override
    public Long value5() {
        return getTxId();
    }

    @Override
    public StakeRegistrationRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public StakeRegistrationRecord value2(Integer value) {
        setCertIndex(value);
        return this;
    }

    @Override
    public StakeRegistrationRecord value3(Integer value) {
        setEpochNo(value);
        return this;
    }

    @Override
    public StakeRegistrationRecord value4(Long value) {
        setAddrId(value);
        return this;
    }

    @Override
    public StakeRegistrationRecord value5(Long value) {
        setTxId(value);
        return this;
    }

    @Override
    public StakeRegistrationRecord values(Long value1, Integer value2, Integer value3, Long value4, Long value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached StakeRegistrationRecord
     */
    public StakeRegistrationRecord() {
        super(StakeRegistration.STAKE_REGISTRATION);
    }

    /**
     * Create a detached, initialised StakeRegistrationRecord
     */
    public StakeRegistrationRecord(Long id, Integer certIndex, Integer epochNo, Long addrId, Long txId) {
        super(StakeRegistration.STAKE_REGISTRATION);

        setId(id);
        setCertIndex(certIndex);
        setEpochNo(epochNo);
        setAddrId(addrId);
        setTxId(txId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised StakeRegistrationRecord
     */
    public StakeRegistrationRecord(org.cardanofoundation.ledgersync.jooq.tables.pojos.StakeRegistration value) {
        super(StakeRegistration.STAKE_REGISTRATION);

        if (value != null) {
            setId(value.getId());
            setCertIndex(value.getCertIndex());
            setEpochNo(value.getEpochNo());
            setAddrId(value.getAddrId());
            setTxId(value.getTxId());
            resetChangedOnNotNull();
        }
    }
}
