/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables.records;


import java.time.LocalDateTime;

import org.cardanofoundation.ledgersync.jooq.tables.PoolOfflineFetchError;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PoolOfflineFetchErrorRecord extends UpdatableRecordImpl<PoolOfflineFetchErrorRecord> implements Record6<Long, String, LocalDateTime, Integer, Long, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>pool_offline_fetch_error.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>pool_offline_fetch_error.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>pool_offline_fetch_error.fetch_error</code>.
     */
    public void setFetchError(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>pool_offline_fetch_error.fetch_error</code>.
     */
    public String getFetchError() {
        return (String) get(1);
    }

    /**
     * Setter for <code>pool_offline_fetch_error.fetch_time</code>.
     */
    public void setFetchTime(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>pool_offline_fetch_error.fetch_time</code>.
     */
    public LocalDateTime getFetchTime() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>pool_offline_fetch_error.retry_count</code>.
     */
    public void setRetryCount(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>pool_offline_fetch_error.retry_count</code>.
     */
    public Integer getRetryCount() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>pool_offline_fetch_error.pool_id</code>.
     */
    public void setPoolId(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>pool_offline_fetch_error.pool_id</code>.
     */
    public Long getPoolId() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>pool_offline_fetch_error.pmr_id</code>.
     */
    public void setPmrId(Long value) {
        set(5, value);
    }

    /**
     * Getter for <code>pool_offline_fetch_error.pmr_id</code>.
     */
    public Long getPmrId() {
        return (Long) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, LocalDateTime, Integer, Long, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<Long, String, LocalDateTime, Integer, Long, Long> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return PoolOfflineFetchError.POOL_OFFLINE_FETCH_ERROR.ID;
    }

    @Override
    public Field<String> field2() {
        return PoolOfflineFetchError.POOL_OFFLINE_FETCH_ERROR.FETCH_ERROR;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return PoolOfflineFetchError.POOL_OFFLINE_FETCH_ERROR.FETCH_TIME;
    }

    @Override
    public Field<Integer> field4() {
        return PoolOfflineFetchError.POOL_OFFLINE_FETCH_ERROR.RETRY_COUNT;
    }

    @Override
    public Field<Long> field5() {
        return PoolOfflineFetchError.POOL_OFFLINE_FETCH_ERROR.POOL_ID;
    }

    @Override
    public Field<Long> field6() {
        return PoolOfflineFetchError.POOL_OFFLINE_FETCH_ERROR.PMR_ID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getFetchError();
    }

    @Override
    public LocalDateTime component3() {
        return getFetchTime();
    }

    @Override
    public Integer component4() {
        return getRetryCount();
    }

    @Override
    public Long component5() {
        return getPoolId();
    }

    @Override
    public Long component6() {
        return getPmrId();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getFetchError();
    }

    @Override
    public LocalDateTime value3() {
        return getFetchTime();
    }

    @Override
    public Integer value4() {
        return getRetryCount();
    }

    @Override
    public Long value5() {
        return getPoolId();
    }

    @Override
    public Long value6() {
        return getPmrId();
    }

    @Override
    public PoolOfflineFetchErrorRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public PoolOfflineFetchErrorRecord value2(String value) {
        setFetchError(value);
        return this;
    }

    @Override
    public PoolOfflineFetchErrorRecord value3(LocalDateTime value) {
        setFetchTime(value);
        return this;
    }

    @Override
    public PoolOfflineFetchErrorRecord value4(Integer value) {
        setRetryCount(value);
        return this;
    }

    @Override
    public PoolOfflineFetchErrorRecord value5(Long value) {
        setPoolId(value);
        return this;
    }

    @Override
    public PoolOfflineFetchErrorRecord value6(Long value) {
        setPmrId(value);
        return this;
    }

    @Override
    public PoolOfflineFetchErrorRecord values(Long value1, String value2, LocalDateTime value3, Integer value4, Long value5, Long value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PoolOfflineFetchErrorRecord
     */
    public PoolOfflineFetchErrorRecord() {
        super(PoolOfflineFetchError.POOL_OFFLINE_FETCH_ERROR);
    }

    /**
     * Create a detached, initialised PoolOfflineFetchErrorRecord
     */
    public PoolOfflineFetchErrorRecord(Long id, String fetchError, LocalDateTime fetchTime, Integer retryCount, Long poolId, Long pmrId) {
        super(PoolOfflineFetchError.POOL_OFFLINE_FETCH_ERROR);

        setId(id);
        setFetchError(fetchError);
        setFetchTime(fetchTime);
        setRetryCount(retryCount);
        setPoolId(poolId);
        setPmrId(pmrId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised PoolOfflineFetchErrorRecord
     */
    public PoolOfflineFetchErrorRecord(org.cardanofoundation.ledgersync.jooq.tables.pojos.PoolOfflineFetchError value) {
        super(PoolOfflineFetchError.POOL_OFFLINE_FETCH_ERROR);

        if (value != null) {
            setId(value.getId());
            setFetchError(value.getFetchError());
            setFetchTime(value.getFetchTime());
            setRetryCount(value.getRetryCount());
            setPoolId(value.getPoolId());
            setPmrId(value.getPmrId());
            resetChangedOnNotNull();
        }
    }
}
