/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.cardanofoundation.ledgersync.jooq.DefaultSchema;
import org.cardanofoundation.ledgersync.jooq.Indexes;
import org.cardanofoundation.ledgersync.jooq.Keys;
import org.cardanofoundation.ledgersync.jooq.tables.records.TxBootstrapWitnessesRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TxBootstrapWitnesses extends TableImpl<TxBootstrapWitnessesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tx_bootstrap_witnesses</code>
     */
    public static final TxBootstrapWitnesses TX_BOOTSTRAP_WITNESSES = new TxBootstrapWitnesses();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TxBootstrapWitnessesRecord> getRecordType() {
        return TxBootstrapWitnessesRecord.class;
    }

    /**
     * The column <code>tx_bootstrap_witnesses.id</code>.
     */
    public final TableField<TxBootstrapWitnessesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>tx_bootstrap_witnesses.tx_id</code>.
     */
    public final TableField<TxBootstrapWitnessesRecord, Long> TX_ID = createField(DSL.name("tx_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>tx_bootstrap_witnesses.public_key</code>.
     */
    public final TableField<TxBootstrapWitnessesRecord, String> PUBLIC_KEY = createField(DSL.name("public_key"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>tx_bootstrap_witnesses.signature</code>.
     */
    public final TableField<TxBootstrapWitnessesRecord, String> SIGNATURE = createField(DSL.name("signature"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>tx_bootstrap_witnesses.chain_code</code>.
     */
    public final TableField<TxBootstrapWitnessesRecord, String> CHAIN_CODE = createField(DSL.name("chain_code"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>tx_bootstrap_witnesses.attributes</code>.
     */
    public final TableField<TxBootstrapWitnessesRecord, String> ATTRIBUTES = createField(DSL.name("attributes"), SQLDataType.VARCHAR, this, "");

    private TxBootstrapWitnesses(Name alias, Table<TxBootstrapWitnessesRecord> aliased) {
        this(alias, aliased, null);
    }

    private TxBootstrapWitnesses(Name alias, Table<TxBootstrapWitnessesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>tx_bootstrap_witnesses</code> table reference
     */
    public TxBootstrapWitnesses(String alias) {
        this(DSL.name(alias), TX_BOOTSTRAP_WITNESSES);
    }

    /**
     * Create an aliased <code>tx_bootstrap_witnesses</code> table reference
     */
    public TxBootstrapWitnesses(Name alias) {
        this(alias, TX_BOOTSTRAP_WITNESSES);
    }

    /**
     * Create a <code>tx_bootstrap_witnesses</code> table reference
     */
    public TxBootstrapWitnesses() {
        this(DSL.name("tx_bootstrap_witnesses"), null);
    }

    public <O extends Record> TxBootstrapWitnesses(Table<O> child, ForeignKey<O, TxBootstrapWitnessesRecord> key) {
        super(child, key, TX_BOOTSTRAP_WITNESSES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.TX_BOOTSTRAP_WITNESSES_TX_ID_IDX);
    }

    @Override
    public Identity<TxBootstrapWitnessesRecord, Long> getIdentity() {
        return (Identity<TxBootstrapWitnessesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TxBootstrapWitnessesRecord> getPrimaryKey() {
        return Keys.TX_BOOTSTRAP_WITNESSES_PKEY;
    }

    @Override
    public TxBootstrapWitnesses as(String alias) {
        return new TxBootstrapWitnesses(DSL.name(alias), this);
    }

    @Override
    public TxBootstrapWitnesses as(Name alias) {
        return new TxBootstrapWitnesses(alias, this);
    }

    @Override
    public TxBootstrapWitnesses as(Table<?> alias) {
        return new TxBootstrapWitnesses(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TxBootstrapWitnesses rename(String name) {
        return new TxBootstrapWitnesses(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TxBootstrapWitnesses rename(Name name) {
        return new TxBootstrapWitnesses(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TxBootstrapWitnesses rename(Table<?> name) {
        return new TxBootstrapWitnesses(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, String, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super Long, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super Long, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
