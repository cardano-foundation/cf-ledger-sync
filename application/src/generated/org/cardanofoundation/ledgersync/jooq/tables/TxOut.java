/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables;


import java.math.BigInteger;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.cardanofoundation.ledgersync.jooq.DefaultSchema;
import org.cardanofoundation.ledgersync.jooq.Indexes;
import org.cardanofoundation.ledgersync.jooq.Keys;
import org.cardanofoundation.ledgersync.jooq.tables.records.TxOutRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function13;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TxOut extends TableImpl<TxOutRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tx_out</code>
     */
    public static final TxOut TX_OUT = new TxOut();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TxOutRecord> getRecordType() {
        return TxOutRecord.class;
    }

    /**
     * The column <code>tx_out.id</code>.
     */
    public final TableField<TxOutRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>tx_out.address</code>.
     */
    public final TableField<TxOutRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(65535).nullable(false), this, "");

    /**
     * The column <code>tx_out.address_has_script</code>.
     */
    public final TableField<TxOutRecord, Boolean> ADDRESS_HAS_SCRIPT = createField(DSL.name("address_has_script"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>tx_out.address_raw</code>.
     */
    public final TableField<TxOutRecord, byte[]> ADDRESS_RAW = createField(DSL.name("address_raw"), SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>tx_out.data_hash</code>.
     */
    public final TableField<TxOutRecord, String> DATA_HASH = createField(DSL.name("data_hash"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>tx_out.index</code>.
     */
    public final TableField<TxOutRecord, Short> INDEX = createField(DSL.name("index"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>tx_out.payment_cred</code>.
     */
    public final TableField<TxOutRecord, String> PAYMENT_CRED = createField(DSL.name("payment_cred"), SQLDataType.VARCHAR(56), this, "");

    /**
     * The column <code>tx_out.token_type</code>.
     */
    public final TableField<TxOutRecord, Integer> TOKEN_TYPE = createField(DSL.name("token_type"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>tx_out.value</code>.
     */
    public final TableField<TxOutRecord, BigInteger> VALUE = createField(DSL.name("value"), SQLDataType.DECIMAL_INTEGER(20).nullable(false), this, "");

    /**
     * The column <code>tx_out.inline_datum_id</code>.
     */
    public final TableField<TxOutRecord, Long> INLINE_DATUM_ID = createField(DSL.name("inline_datum_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>tx_out.reference_script_id</code>.
     */
    public final TableField<TxOutRecord, Long> REFERENCE_SCRIPT_ID = createField(DSL.name("reference_script_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>tx_out.stake_address_id</code>.
     */
    public final TableField<TxOutRecord, Long> STAKE_ADDRESS_ID = createField(DSL.name("stake_address_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>tx_out.tx_id</code>.
     */
    public final TableField<TxOutRecord, Long> TX_ID = createField(DSL.name("tx_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private TxOut(Name alias, Table<TxOutRecord> aliased) {
        this(alias, aliased, null);
    }

    private TxOut(Name alias, Table<TxOutRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>tx_out</code> table reference
     */
    public TxOut(String alias) {
        this(DSL.name(alias), TX_OUT);
    }

    /**
     * Create an aliased <code>tx_out</code> table reference
     */
    public TxOut(Name alias) {
        this(alias, TX_OUT);
    }

    /**
     * Create a <code>tx_out</code> table reference
     */
    public TxOut() {
        this(DSL.name("tx_out"), null);
    }

    public <O extends Record> TxOut(Table<O> child, ForeignKey<O, TxOutRecord> key) {
        super(child, key, TX_OUT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_TX_OUT_ADDRESS, Indexes.IDX_TX_OUT_PAYMENT_CRED, Indexes.IDX_TX_OUT_STAKE_ADDRESS_ID, Indexes.IDX_TX_OUT_TX_ID, Indexes.TX_OUT_INLINE_DATUM_ID_IDX, Indexes.TX_OUT_REFERENCE_SCRIPT_ID_IDX);
    }

    @Override
    public Identity<TxOutRecord, Long> getIdentity() {
        return (Identity<TxOutRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TxOutRecord> getPrimaryKey() {
        return Keys.TX_OUT_PKEY;
    }

    @Override
    public List<UniqueKey<TxOutRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_TXOUT);
    }

    @Override
    public TxOut as(String alias) {
        return new TxOut(DSL.name(alias), this);
    }

    @Override
    public TxOut as(Name alias) {
        return new TxOut(alias, this);
    }

    @Override
    public TxOut as(Table<?> alias) {
        return new TxOut(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TxOut rename(String name) {
        return new TxOut(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TxOut rename(Name name) {
        return new TxOut(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TxOut rename(Table<?> name) {
        return new TxOut(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, String, Boolean, byte[], String, Short, String, Integer, BigInteger, Long, Long, Long, Long> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function13<? super Long, ? super String, ? super Boolean, ? super byte[], ? super String, ? super Short, ? super String, ? super Integer, ? super BigInteger, ? super Long, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function13<? super Long, ? super String, ? super Boolean, ? super byte[], ? super String, ? super Short, ? super String, ? super Integer, ? super BigInteger, ? super Long, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
