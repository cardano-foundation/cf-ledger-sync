/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.cardanofoundation.ledgersync.jooq.DefaultSchema;
import org.cardanofoundation.ledgersync.jooq.Indexes;
import org.cardanofoundation.ledgersync.jooq.Keys;
import org.cardanofoundation.ledgersync.jooq.tables.records.PoolOfflineDataRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PoolOfflineData extends TableImpl<PoolOfflineDataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pool_offline_data</code>
     */
    public static final PoolOfflineData POOL_OFFLINE_DATA = new PoolOfflineData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PoolOfflineDataRecord> getRecordType() {
        return PoolOfflineDataRecord.class;
    }

    /**
     * The column <code>pool_offline_data.id</code>.
     */
    public final TableField<PoolOfflineDataRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>pool_offline_data.bytes</code>.
     */
    public final TableField<PoolOfflineDataRecord, byte[]> BYTES = createField(DSL.name("bytes"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>pool_offline_data.hash</code>.
     */
    public final TableField<PoolOfflineDataRecord, String> HASH = createField(DSL.name("hash"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>pool_offline_data.json</code>.
     */
    public final TableField<PoolOfflineDataRecord, String> JSON = createField(DSL.name("json"), SQLDataType.VARCHAR(65535).nullable(false), this, "");

    /**
     * The column <code>pool_offline_data.ticker_name</code>.
     */
    public final TableField<PoolOfflineDataRecord, String> TICKER_NAME = createField(DSL.name("ticker_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>pool_offline_data.pool_id</code>.
     */
    public final TableField<PoolOfflineDataRecord, Long> POOL_ID = createField(DSL.name("pool_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pool_offline_data.pmr_id</code>.
     */
    public final TableField<PoolOfflineDataRecord, Long> PMR_ID = createField(DSL.name("pmr_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pool_offline_data.pool_name</code>.
     */
    public final TableField<PoolOfflineDataRecord, String> POOL_NAME = createField(DSL.name("pool_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>pool_offline_data.logo_url</code>.
     */
    public final TableField<PoolOfflineDataRecord, String> LOGO_URL = createField(DSL.name("logo_url"), SQLDataType.VARCHAR(2000), this, "");

    /**
     * The column <code>pool_offline_data.icon_url</code>.
     */
    public final TableField<PoolOfflineDataRecord, String> ICON_URL = createField(DSL.name("icon_url"), SQLDataType.VARCHAR(2000), this, "");

    private PoolOfflineData(Name alias, Table<PoolOfflineDataRecord> aliased) {
        this(alias, aliased, null);
    }

    private PoolOfflineData(Name alias, Table<PoolOfflineDataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pool_offline_data</code> table reference
     */
    public PoolOfflineData(String alias) {
        this(DSL.name(alias), POOL_OFFLINE_DATA);
    }

    /**
     * Create an aliased <code>pool_offline_data</code> table reference
     */
    public PoolOfflineData(Name alias) {
        this(alias, POOL_OFFLINE_DATA);
    }

    /**
     * Create a <code>pool_offline_data</code> table reference
     */
    public PoolOfflineData() {
        this(DSL.name("pool_offline_data"), null);
    }

    public <O extends Record> PoolOfflineData(Table<O> child, ForeignKey<O, PoolOfflineDataRecord> key) {
        super(child, key, POOL_OFFLINE_DATA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_POOL_OFFLINE_DATA_PMR_ID, Indexes.POOL_OFFLINE_DATA_POOL_ID_INDEX);
    }

    @Override
    public Identity<PoolOfflineDataRecord, Long> getIdentity() {
        return (Identity<PoolOfflineDataRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PoolOfflineDataRecord> getPrimaryKey() {
        return Keys.POOL_OFFLINE_DATA_PKEY;
    }

    @Override
    public List<UniqueKey<PoolOfflineDataRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.POOL_OFFLINE_DATA_POOL_ID_UNIQUE);
    }

    @Override
    public PoolOfflineData as(String alias) {
        return new PoolOfflineData(DSL.name(alias), this);
    }

    @Override
    public PoolOfflineData as(Name alias) {
        return new PoolOfflineData(alias, this);
    }

    @Override
    public PoolOfflineData as(Table<?> alias) {
        return new PoolOfflineData(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PoolOfflineData rename(String name) {
        return new PoolOfflineData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PoolOfflineData rename(Name name) {
        return new PoolOfflineData(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PoolOfflineData rename(Table<?> name) {
        return new PoolOfflineData(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, byte[], String, String, String, Long, Long, String, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Long, ? super byte[], ? super String, ? super String, ? super String, ? super Long, ? super Long, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Long, ? super byte[], ? super String, ? super String, ? super String, ? super Long, ? super Long, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
