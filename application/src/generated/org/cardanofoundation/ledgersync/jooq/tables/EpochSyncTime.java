/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.cardanofoundation.ledgersync.jooq.DefaultSchema;
import org.cardanofoundation.ledgersync.jooq.Keys;
import org.cardanofoundation.ledgersync.jooq.tables.records.EpochSyncTimeRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EpochSyncTime extends TableImpl<EpochSyncTimeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>epoch_sync_time</code>
     */
    public static final EpochSyncTime EPOCH_SYNC_TIME = new EpochSyncTime();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EpochSyncTimeRecord> getRecordType() {
        return EpochSyncTimeRecord.class;
    }

    /**
     * The column <code>epoch_sync_time.id</code>.
     */
    public final TableField<EpochSyncTimeRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>epoch_sync_time.no</code>.
     */
    public final TableField<EpochSyncTimeRecord, Long> NO = createField(DSL.name("no"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>epoch_sync_time.seconds</code>.
     */
    public final TableField<EpochSyncTimeRecord, Long> SECONDS = createField(DSL.name("seconds"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>epoch_sync_time.state</code>.
     */
    public final TableField<EpochSyncTimeRecord, String> STATE = createField(DSL.name("state"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private EpochSyncTime(Name alias, Table<EpochSyncTimeRecord> aliased) {
        this(alias, aliased, null);
    }

    private EpochSyncTime(Name alias, Table<EpochSyncTimeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>epoch_sync_time</code> table reference
     */
    public EpochSyncTime(String alias) {
        this(DSL.name(alias), EPOCH_SYNC_TIME);
    }

    /**
     * Create an aliased <code>epoch_sync_time</code> table reference
     */
    public EpochSyncTime(Name alias) {
        this(alias, EPOCH_SYNC_TIME);
    }

    /**
     * Create a <code>epoch_sync_time</code> table reference
     */
    public EpochSyncTime() {
        this(DSL.name("epoch_sync_time"), null);
    }

    public <O extends Record> EpochSyncTime(Table<O> child, ForeignKey<O, EpochSyncTimeRecord> key) {
        super(child, key, EPOCH_SYNC_TIME);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<EpochSyncTimeRecord, Long> getIdentity() {
        return (Identity<EpochSyncTimeRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EpochSyncTimeRecord> getPrimaryKey() {
        return Keys.EPOCH_SYNC_TIME_PKEY;
    }

    @Override
    public List<UniqueKey<EpochSyncTimeRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_EPOCH_SYNC_TIME);
    }

    @Override
    public EpochSyncTime as(String alias) {
        return new EpochSyncTime(DSL.name(alias), this);
    }

    @Override
    public EpochSyncTime as(Name alias) {
        return new EpochSyncTime(alias, this);
    }

    @Override
    public EpochSyncTime as(Table<?> alias) {
        return new EpochSyncTime(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EpochSyncTime rename(String name) {
        return new EpochSyncTime(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EpochSyncTime rename(Name name) {
        return new EpochSyncTime(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EpochSyncTime rename(Table<?> name) {
        return new EpochSyncTime(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, Long, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super Long, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super Long, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
