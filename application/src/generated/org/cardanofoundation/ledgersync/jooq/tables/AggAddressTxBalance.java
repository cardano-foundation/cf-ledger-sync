/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables;


import java.math.BigInteger;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.cardanofoundation.ledgersync.jooq.DefaultSchema;
import org.cardanofoundation.ledgersync.jooq.Indexes;
import org.cardanofoundation.ledgersync.jooq.Keys;
import org.cardanofoundation.ledgersync.jooq.tables.records.AggAddressTxBalanceRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AggAddressTxBalance extends TableImpl<AggAddressTxBalanceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>agg_address_tx_balance</code>
     */
    public static final AggAddressTxBalance AGG_ADDRESS_TX_BALANCE = new AggAddressTxBalance();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AggAddressTxBalanceRecord> getRecordType() {
        return AggAddressTxBalanceRecord.class;
    }

    /**
     * The column <code>agg_address_tx_balance.id</code>.
     */
    public final TableField<AggAddressTxBalanceRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>agg_address_tx_balance.stake_address_id</code>.
     */
    public final TableField<AggAddressTxBalanceRecord, Long> STAKE_ADDRESS_ID = createField(DSL.name("stake_address_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>agg_address_tx_balance.address_id</code>.
     */
    public final TableField<AggAddressTxBalanceRecord, Long> ADDRESS_ID = createField(DSL.name("address_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>agg_address_tx_balance.balance</code>.
     */
    public final TableField<AggAddressTxBalanceRecord, BigInteger> BALANCE = createField(DSL.name("balance"), SQLDataType.DECIMAL_INTEGER(39).nullable(false), this, "");

    /**
     * The column <code>agg_address_tx_balance.day</code>.
     */
    public final TableField<AggAddressTxBalanceRecord, LocalDate> DAY = createField(DSL.name("day"), SQLDataType.LOCALDATE.nullable(false), this, "");

    private AggAddressTxBalance(Name alias, Table<AggAddressTxBalanceRecord> aliased) {
        this(alias, aliased, null);
    }

    private AggAddressTxBalance(Name alias, Table<AggAddressTxBalanceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>agg_address_tx_balance</code> table reference
     */
    public AggAddressTxBalance(String alias) {
        this(DSL.name(alias), AGG_ADDRESS_TX_BALANCE);
    }

    /**
     * Create an aliased <code>agg_address_tx_balance</code> table reference
     */
    public AggAddressTxBalance(Name alias) {
        this(alias, AGG_ADDRESS_TX_BALANCE);
    }

    /**
     * Create a <code>agg_address_tx_balance</code> table reference
     */
    public AggAddressTxBalance() {
        this(DSL.name("agg_address_tx_balance"), null);
    }

    public <O extends Record> AggAddressTxBalance(Table<O> child, ForeignKey<O, AggAddressTxBalanceRecord> key) {
        super(child, key, AGG_ADDRESS_TX_BALANCE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.AGG_ADDRESS_TX_BALANCE_ADDRESS_ID_DAY_BALANCE_IDX, Indexes.AGG_ADDRESS_TX_BALANCE_DAY_IDX, Indexes.AGG_ADDRESS_TX_BALANCE_DAY_INDEX, Indexes.AGG_ADDRESS_TX_BALANCE_STAKE_ADDRESS_ID_DAY_BALANCE_IDX);
    }

    @Override
    public Identity<AggAddressTxBalanceRecord, Long> getIdentity() {
        return (Identity<AggAddressTxBalanceRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AggAddressTxBalanceRecord> getPrimaryKey() {
        return Keys.AGG_ADDRESS_TX_BALANCE_PKEY;
    }

    @Override
    public AggAddressTxBalance as(String alias) {
        return new AggAddressTxBalance(DSL.name(alias), this);
    }

    @Override
    public AggAddressTxBalance as(Name alias) {
        return new AggAddressTxBalance(alias, this);
    }

    @Override
    public AggAddressTxBalance as(Table<?> alias) {
        return new AggAddressTxBalance(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AggAddressTxBalance rename(String name) {
        return new AggAddressTxBalance(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AggAddressTxBalance rename(Name name) {
        return new AggAddressTxBalance(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AggAddressTxBalance rename(Table<?> name) {
        return new AggAddressTxBalance(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, Long, BigInteger, LocalDate> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super Long, ? super Long, ? super BigInteger, ? super LocalDate, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super Long, ? super Long, ? super BigInteger, ? super LocalDate, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
