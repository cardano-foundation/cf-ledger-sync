/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.cardanofoundation.ledgersync.jooq.DefaultSchema;
import org.cardanofoundation.ledgersync.jooq.Indexes;
import org.cardanofoundation.ledgersync.jooq.Keys;
import org.cardanofoundation.ledgersync.jooq.tables.records.UnconsumeTxInRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UnconsumeTxIn extends TableImpl<UnconsumeTxInRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>unconsume_tx_in</code>
     */
    public static final UnconsumeTxIn UNCONSUME_TX_IN = new UnconsumeTxIn();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UnconsumeTxInRecord> getRecordType() {
        return UnconsumeTxInRecord.class;
    }

    /**
     * The column <code>unconsume_tx_in.id</code>.
     */
    public final TableField<UnconsumeTxInRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>unconsume_tx_in.tx_out_index</code>.
     */
    public final TableField<UnconsumeTxInRecord, Short> TX_OUT_INDEX = createField(DSL.name("tx_out_index"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>unconsume_tx_in.tx_in_id</code>.
     */
    public final TableField<UnconsumeTxInRecord, Long> TX_IN_ID = createField(DSL.name("tx_in_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>unconsume_tx_in.tx_out_id</code>.
     */
    public final TableField<UnconsumeTxInRecord, Long> TX_OUT_ID = createField(DSL.name("tx_out_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>unconsume_tx_in.redeemer_id</code>.
     */
    public final TableField<UnconsumeTxInRecord, Long> REDEEMER_ID = createField(DSL.name("redeemer_id"), SQLDataType.BIGINT, this, "");

    private UnconsumeTxIn(Name alias, Table<UnconsumeTxInRecord> aliased) {
        this(alias, aliased, null);
    }

    private UnconsumeTxIn(Name alias, Table<UnconsumeTxInRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>unconsume_tx_in</code> table reference
     */
    public UnconsumeTxIn(String alias) {
        this(DSL.name(alias), UNCONSUME_TX_IN);
    }

    /**
     * Create an aliased <code>unconsume_tx_in</code> table reference
     */
    public UnconsumeTxIn(Name alias) {
        this(alias, UNCONSUME_TX_IN);
    }

    /**
     * Create a <code>unconsume_tx_in</code> table reference
     */
    public UnconsumeTxIn() {
        this(DSL.name("unconsume_tx_in"), null);
    }

    public <O extends Record> UnconsumeTxIn(Table<O> child, ForeignKey<O, UnconsumeTxInRecord> key) {
        super(child, key, UNCONSUME_TX_IN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_UNCONSUME_TX_IN_REDEEMER_ID);
    }

    @Override
    public Identity<UnconsumeTxInRecord, Long> getIdentity() {
        return (Identity<UnconsumeTxInRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<UnconsumeTxInRecord> getPrimaryKey() {
        return Keys.UNCONSUME_TX_IN_PKEY;
    }

    @Override
    public List<UniqueKey<UnconsumeTxInRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_COL_TXIN);
    }

    @Override
    public UnconsumeTxIn as(String alias) {
        return new UnconsumeTxIn(DSL.name(alias), this);
    }

    @Override
    public UnconsumeTxIn as(Name alias) {
        return new UnconsumeTxIn(alias, this);
    }

    @Override
    public UnconsumeTxIn as(Table<?> alias) {
        return new UnconsumeTxIn(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UnconsumeTxIn rename(String name) {
        return new UnconsumeTxIn(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UnconsumeTxIn rename(Name name) {
        return new UnconsumeTxIn(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UnconsumeTxIn rename(Table<?> name) {
        return new UnconsumeTxIn(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Short, Long, Long, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super Short, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super Short, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
