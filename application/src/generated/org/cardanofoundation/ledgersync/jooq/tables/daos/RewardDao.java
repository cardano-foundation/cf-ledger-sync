/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables.daos;


import java.math.BigInteger;
import java.util.List;
import java.util.Optional;

import org.cardanofoundation.ledgersync.jooq.AbstractSpringDAOImpl;
import org.cardanofoundation.ledgersync.jooq.tables.Reward;
import org.cardanofoundation.ledgersync.jooq.tables.records.RewardRecord;
import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class RewardDao extends AbstractSpringDAOImpl<RewardRecord, org.cardanofoundation.ledgersync.jooq.tables.pojos.Reward, Long> {

    /**
     * Create a new RewardDao without any configuration
     */
    public RewardDao() {
        super(Reward.REWARD, org.cardanofoundation.ledgersync.jooq.tables.pojos.Reward.class);
    }

    /**
     * Create a new RewardDao with an attached configuration
     */
    @Autowired
    public RewardDao(Configuration configuration) {
        super(Reward.REWARD, org.cardanofoundation.ledgersync.jooq.tables.pojos.Reward.class, configuration);
    }

    @Override
    public Long getId(org.cardanofoundation.ledgersync.jooq.tables.pojos.Reward object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Reward> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Reward.REWARD.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Reward> fetchById(Long... values) {
        return fetch(Reward.REWARD.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public org.cardanofoundation.ledgersync.jooq.tables.pojos.Reward fetchOneById(Long value) {
        return fetchOne(Reward.REWARD.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<org.cardanofoundation.ledgersync.jooq.tables.pojos.Reward> fetchOptionalById(Long value) {
        return fetchOptional(Reward.REWARD.ID, value);
    }

    /**
     * Fetch records that have <code>amount BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Reward> fetchRangeOfAmount(BigInteger lowerInclusive, BigInteger upperInclusive) {
        return fetchRange(Reward.REWARD.AMOUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>amount IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Reward> fetchByAmount(BigInteger... values) {
        return fetch(Reward.REWARD.AMOUNT, values);
    }

    /**
     * Fetch records that have <code>earned_epoch BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Reward> fetchRangeOfEarnedEpoch(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Reward.REWARD.EARNED_EPOCH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>earned_epoch IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Reward> fetchByEarnedEpoch(Long... values) {
        return fetch(Reward.REWARD.EARNED_EPOCH, values);
    }

    /**
     * Fetch records that have <code>spendable_epoch BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Reward> fetchRangeOfSpendableEpoch(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Reward.REWARD.SPENDABLE_EPOCH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>spendable_epoch IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Reward> fetchBySpendableEpoch(Long... values) {
        return fetch(Reward.REWARD.SPENDABLE_EPOCH, values);
    }

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Reward> fetchRangeOfType(String lowerInclusive, String upperInclusive) {
        return fetchRange(Reward.REWARD.TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Reward> fetchByType(String... values) {
        return fetch(Reward.REWARD.TYPE, values);
    }

    /**
     * Fetch records that have <code>addr_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Reward> fetchRangeOfAddrId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Reward.REWARD.ADDR_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>addr_id IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Reward> fetchByAddrId(Long... values) {
        return fetch(Reward.REWARD.ADDR_ID, values);
    }

    /**
     * Fetch records that have <code>pool_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Reward> fetchRangeOfPoolId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Reward.REWARD.POOL_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>pool_id IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Reward> fetchByPoolId(Long... values) {
        return fetch(Reward.REWARD.POOL_ID, values);
    }
}
