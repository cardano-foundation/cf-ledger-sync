/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables;


import java.math.BigInteger;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.cardanofoundation.ledgersync.jooq.DefaultSchema;
import org.cardanofoundation.ledgersync.jooq.Indexes;
import org.cardanofoundation.ledgersync.jooq.Keys;
import org.cardanofoundation.ledgersync.jooq.tables.records.MaTxOutRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MaTxOut extends TableImpl<MaTxOutRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ma_tx_out</code>
     */
    public static final MaTxOut MA_TX_OUT = new MaTxOut();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MaTxOutRecord> getRecordType() {
        return MaTxOutRecord.class;
    }

    /**
     * The column <code>ma_tx_out.id</code>.
     */
    public final TableField<MaTxOutRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>ma_tx_out.quantity</code>.
     */
    public final TableField<MaTxOutRecord, BigInteger> QUANTITY = createField(DSL.name("quantity"), SQLDataType.DECIMAL_INTEGER(20).nullable(false), this, "");

    /**
     * The column <code>ma_tx_out.ident</code>.
     */
    public final TableField<MaTxOutRecord, Long> IDENT = createField(DSL.name("ident"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>ma_tx_out.tx_out_id</code>.
     */
    public final TableField<MaTxOutRecord, Long> TX_OUT_ID = createField(DSL.name("tx_out_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private MaTxOut(Name alias, Table<MaTxOutRecord> aliased) {
        this(alias, aliased, null);
    }

    private MaTxOut(Name alias, Table<MaTxOutRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ma_tx_out</code> table reference
     */
    public MaTxOut(String alias) {
        this(DSL.name(alias), MA_TX_OUT);
    }

    /**
     * Create an aliased <code>ma_tx_out</code> table reference
     */
    public MaTxOut(Name alias) {
        this(alias, MA_TX_OUT);
    }

    /**
     * Create a <code>ma_tx_out</code> table reference
     */
    public MaTxOut() {
        this(DSL.name("ma_tx_out"), null);
    }

    public <O extends Record> MaTxOut(Table<O> child, ForeignKey<O, MaTxOutRecord> key) {
        super(child, key, MA_TX_OUT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_MA_TX_OUT_TX_OUT_ID, Indexes.MA_TX_OUT_IDENT_INDEX);
    }

    @Override
    public Identity<MaTxOutRecord, Long> getIdentity() {
        return (Identity<MaTxOutRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MaTxOutRecord> getPrimaryKey() {
        return Keys.MA_TX_OUT_PKEY;
    }

    @Override
    public List<UniqueKey<MaTxOutRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_MA_TX_OUT);
    }

    @Override
    public MaTxOut as(String alias) {
        return new MaTxOut(DSL.name(alias), this);
    }

    @Override
    public MaTxOut as(Name alias) {
        return new MaTxOut(alias, this);
    }

    @Override
    public MaTxOut as(Table<?> alias) {
        return new MaTxOut(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MaTxOut rename(String name) {
        return new MaTxOut(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MaTxOut rename(Name name) {
        return new MaTxOut(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MaTxOut rename(Table<?> name) {
        return new MaTxOut(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, BigInteger, Long, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super BigInteger, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super BigInteger, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
