/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables.daos;


import java.util.List;
import java.util.Optional;

import org.cardanofoundation.ledgersync.jooq.AbstractSpringDAOImpl;
import org.cardanofoundation.ledgersync.jooq.tables.Era;
import org.cardanofoundation.ledgersync.jooq.tables.records.EraRecord;
import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class EraDao extends AbstractSpringDAOImpl<EraRecord, org.cardanofoundation.ledgersync.jooq.tables.pojos.Era, Integer> {

    /**
     * Create a new EraDao without any configuration
     */
    public EraDao() {
        super(Era.ERA, org.cardanofoundation.ledgersync.jooq.tables.pojos.Era.class);
    }

    /**
     * Create a new EraDao with an attached configuration
     */
    @Autowired
    public EraDao(Configuration configuration) {
        super(Era.ERA, org.cardanofoundation.ledgersync.jooq.tables.pojos.Era.class, configuration);
    }

    @Override
    public Integer getId(org.cardanofoundation.ledgersync.jooq.tables.pojos.Era object) {
        return object.getEra();
    }

    /**
     * Fetch records that have <code>era BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Era> fetchRangeOfEra(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Era.ERA.ERA_, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>era IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Era> fetchByEra(Integer... values) {
        return fetch(Era.ERA.ERA_, values);
    }

    /**
     * Fetch a unique record that has <code>era = value</code>
     */
    public org.cardanofoundation.ledgersync.jooq.tables.pojos.Era fetchOneByEra(Integer value) {
        return fetchOne(Era.ERA.ERA_, value);
    }

    /**
     * Fetch a unique record that has <code>era = value</code>
     */
    public Optional<org.cardanofoundation.ledgersync.jooq.tables.pojos.Era> fetchOptionalByEra(Integer value) {
        return fetchOptional(Era.ERA.ERA_, value);
    }

    /**
     * Fetch records that have <code>start_slot BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Era> fetchRangeOfStartSlot(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Era.ERA.START_SLOT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>start_slot IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Era> fetchByStartSlot(Long... values) {
        return fetch(Era.ERA.START_SLOT, values);
    }

    /**
     * Fetch records that have <code>block BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Era> fetchRangeOfBlock(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Era.ERA.BLOCK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>block IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Era> fetchByBlock(Long... values) {
        return fetch(Era.ERA.BLOCK, values);
    }

    /**
     * Fetch records that have <code>block_hash BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Era> fetchRangeOfBlockHash(String lowerInclusive, String upperInclusive) {
        return fetchRange(Era.ERA.BLOCK_HASH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>block_hash IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Era> fetchByBlockHash(String... values) {
        return fetch(Era.ERA.BLOCK_HASH, values);
    }
}
