/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.cardanofoundation.ledgersync.jooq.AbstractSpringDAOImpl;
import org.cardanofoundation.ledgersync.jooq.tables.Meta;
import org.cardanofoundation.ledgersync.jooq.tables.records.MetaRecord;
import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class MetaDao extends AbstractSpringDAOImpl<MetaRecord, org.cardanofoundation.ledgersync.jooq.tables.pojos.Meta, Long> {

    /**
     * Create a new MetaDao without any configuration
     */
    public MetaDao() {
        super(Meta.META, org.cardanofoundation.ledgersync.jooq.tables.pojos.Meta.class);
    }

    /**
     * Create a new MetaDao with an attached configuration
     */
    @Autowired
    public MetaDao(Configuration configuration) {
        super(Meta.META, org.cardanofoundation.ledgersync.jooq.tables.pojos.Meta.class, configuration);
    }

    @Override
    public Long getId(org.cardanofoundation.ledgersync.jooq.tables.pojos.Meta object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Meta> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Meta.META.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Meta> fetchById(Long... values) {
        return fetch(Meta.META.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public org.cardanofoundation.ledgersync.jooq.tables.pojos.Meta fetchOneById(Long value) {
        return fetchOne(Meta.META.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<org.cardanofoundation.ledgersync.jooq.tables.pojos.Meta> fetchOptionalById(Long value) {
        return fetchOptional(Meta.META.ID, value);
    }

    /**
     * Fetch records that have <code>network_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Meta> fetchRangeOfNetworkName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Meta.META.NETWORK_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>network_name IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Meta> fetchByNetworkName(String... values) {
        return fetch(Meta.META.NETWORK_NAME, values);
    }

    /**
     * Fetch records that have <code>start_time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Meta> fetchRangeOfStartTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Meta.META.START_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>start_time IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Meta> fetchByStartTime(LocalDateTime... values) {
        return fetch(Meta.META.START_TIME, values);
    }

    /**
     * Fetch a unique record that has <code>start_time = value</code>
     */
    public org.cardanofoundation.ledgersync.jooq.tables.pojos.Meta fetchOneByStartTime(LocalDateTime value) {
        return fetchOne(Meta.META.START_TIME, value);
    }

    /**
     * Fetch a unique record that has <code>start_time = value</code>
     */
    public Optional<org.cardanofoundation.ledgersync.jooq.tables.pojos.Meta> fetchOptionalByStartTime(LocalDateTime value) {
        return fetchOptional(Meta.META.START_TIME, value);
    }

    /**
     * Fetch records that have <code>version BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Meta> fetchRangeOfVersion(String lowerInclusive, String upperInclusive) {
        return fetchRange(Meta.META.VERSION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>version IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.Meta> fetchByVersion(String... values) {
        return fetch(Meta.META.VERSION, values);
    }
}
