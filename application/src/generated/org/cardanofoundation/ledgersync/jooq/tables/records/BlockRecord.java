/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables.records;


import java.time.LocalDateTime;

import org.cardanofoundation.ledgersync.jooq.tables.Block;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record16;
import org.jooq.Row16;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BlockRecord extends UpdatableRecordImpl<BlockRecord> implements Record16<Long, Long, Integer, Integer, String, String, Long, Integer, Integer, Integer, Long, Long, LocalDateTime, Long, String, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>block.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>block.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>block.block_no</code>.
     */
    public void setBlockNo(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>block.block_no</code>.
     */
    public Long getBlockNo() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>block.epoch_no</code>.
     */
    public void setEpochNo(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>block.epoch_no</code>.
     */
    public Integer getEpochNo() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>block.epoch_slot_no</code>.
     */
    public void setEpochSlotNo(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>block.epoch_slot_no</code>.
     */
    public Integer getEpochSlotNo() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>block.hash</code>.
     */
    public void setHash(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>block.hash</code>.
     */
    public String getHash() {
        return (String) get(4);
    }

    /**
     * Setter for <code>block.op_cert</code>.
     */
    public void setOpCert(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>block.op_cert</code>.
     */
    public String getOpCert() {
        return (String) get(5);
    }

    /**
     * Setter for <code>block.op_cert_counter</code>.
     */
    public void setOpCertCounter(Long value) {
        set(6, value);
    }

    /**
     * Getter for <code>block.op_cert_counter</code>.
     */
    public Long getOpCertCounter() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>block.proto_major</code>.
     */
    public void setProtoMajor(Integer value) {
        set(7, value);
    }

    /**
     * Getter for <code>block.proto_major</code>.
     */
    public Integer getProtoMajor() {
        return (Integer) get(7);
    }

    /**
     * Setter for <code>block.proto_minor</code>.
     */
    public void setProtoMinor(Integer value) {
        set(8, value);
    }

    /**
     * Getter for <code>block.proto_minor</code>.
     */
    public Integer getProtoMinor() {
        return (Integer) get(8);
    }

    /**
     * Setter for <code>block.size</code>.
     */
    public void setSize(Integer value) {
        set(9, value);
    }

    /**
     * Getter for <code>block.size</code>.
     */
    public Integer getSize() {
        return (Integer) get(9);
    }

    /**
     * Setter for <code>block.slot_leader_id</code>.
     */
    public void setSlotLeaderId(Long value) {
        set(10, value);
    }

    /**
     * Getter for <code>block.slot_leader_id</code>.
     */
    public Long getSlotLeaderId() {
        return (Long) get(10);
    }

    /**
     * Setter for <code>block.slot_no</code>.
     */
    public void setSlotNo(Long value) {
        set(11, value);
    }

    /**
     * Getter for <code>block.slot_no</code>.
     */
    public Long getSlotNo() {
        return (Long) get(11);
    }

    /**
     * Setter for <code>block.time</code>.
     */
    public void setTime(LocalDateTime value) {
        set(12, value);
    }

    /**
     * Getter for <code>block.time</code>.
     */
    public LocalDateTime getTime() {
        return (LocalDateTime) get(12);
    }

    /**
     * Setter for <code>block.tx_count</code>.
     */
    public void setTxCount(Long value) {
        set(13, value);
    }

    /**
     * Getter for <code>block.tx_count</code>.
     */
    public Long getTxCount() {
        return (Long) get(13);
    }

    /**
     * Setter for <code>block.vrf_key</code>.
     */
    public void setVrfKey(String value) {
        set(14, value);
    }

    /**
     * Getter for <code>block.vrf_key</code>.
     */
    public String getVrfKey() {
        return (String) get(14);
    }

    /**
     * Setter for <code>block.previous_id</code>.
     */
    public void setPreviousId(Long value) {
        set(15, value);
    }

    /**
     * Getter for <code>block.previous_id</code>.
     */
    public Long getPreviousId() {
        return (Long) get(15);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record16 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row16<Long, Long, Integer, Integer, String, String, Long, Integer, Integer, Integer, Long, Long, LocalDateTime, Long, String, Long> fieldsRow() {
        return (Row16) super.fieldsRow();
    }

    @Override
    public Row16<Long, Long, Integer, Integer, String, String, Long, Integer, Integer, Integer, Long, Long, LocalDateTime, Long, String, Long> valuesRow() {
        return (Row16) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Block.BLOCK.ID;
    }

    @Override
    public Field<Long> field2() {
        return Block.BLOCK.BLOCK_NO;
    }

    @Override
    public Field<Integer> field3() {
        return Block.BLOCK.EPOCH_NO;
    }

    @Override
    public Field<Integer> field4() {
        return Block.BLOCK.EPOCH_SLOT_NO;
    }

    @Override
    public Field<String> field5() {
        return Block.BLOCK.HASH;
    }

    @Override
    public Field<String> field6() {
        return Block.BLOCK.OP_CERT;
    }

    @Override
    public Field<Long> field7() {
        return Block.BLOCK.OP_CERT_COUNTER;
    }

    @Override
    public Field<Integer> field8() {
        return Block.BLOCK.PROTO_MAJOR;
    }

    @Override
    public Field<Integer> field9() {
        return Block.BLOCK.PROTO_MINOR;
    }

    @Override
    public Field<Integer> field10() {
        return Block.BLOCK.SIZE;
    }

    @Override
    public Field<Long> field11() {
        return Block.BLOCK.SLOT_LEADER_ID;
    }

    @Override
    public Field<Long> field12() {
        return Block.BLOCK.SLOT_NO;
    }

    @Override
    public Field<LocalDateTime> field13() {
        return Block.BLOCK.TIME;
    }

    @Override
    public Field<Long> field14() {
        return Block.BLOCK.TX_COUNT;
    }

    @Override
    public Field<String> field15() {
        return Block.BLOCK.VRF_KEY;
    }

    @Override
    public Field<Long> field16() {
        return Block.BLOCK.PREVIOUS_ID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getBlockNo();
    }

    @Override
    public Integer component3() {
        return getEpochNo();
    }

    @Override
    public Integer component4() {
        return getEpochSlotNo();
    }

    @Override
    public String component5() {
        return getHash();
    }

    @Override
    public String component6() {
        return getOpCert();
    }

    @Override
    public Long component7() {
        return getOpCertCounter();
    }

    @Override
    public Integer component8() {
        return getProtoMajor();
    }

    @Override
    public Integer component9() {
        return getProtoMinor();
    }

    @Override
    public Integer component10() {
        return getSize();
    }

    @Override
    public Long component11() {
        return getSlotLeaderId();
    }

    @Override
    public Long component12() {
        return getSlotNo();
    }

    @Override
    public LocalDateTime component13() {
        return getTime();
    }

    @Override
    public Long component14() {
        return getTxCount();
    }

    @Override
    public String component15() {
        return getVrfKey();
    }

    @Override
    public Long component16() {
        return getPreviousId();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getBlockNo();
    }

    @Override
    public Integer value3() {
        return getEpochNo();
    }

    @Override
    public Integer value4() {
        return getEpochSlotNo();
    }

    @Override
    public String value5() {
        return getHash();
    }

    @Override
    public String value6() {
        return getOpCert();
    }

    @Override
    public Long value7() {
        return getOpCertCounter();
    }

    @Override
    public Integer value8() {
        return getProtoMajor();
    }

    @Override
    public Integer value9() {
        return getProtoMinor();
    }

    @Override
    public Integer value10() {
        return getSize();
    }

    @Override
    public Long value11() {
        return getSlotLeaderId();
    }

    @Override
    public Long value12() {
        return getSlotNo();
    }

    @Override
    public LocalDateTime value13() {
        return getTime();
    }

    @Override
    public Long value14() {
        return getTxCount();
    }

    @Override
    public String value15() {
        return getVrfKey();
    }

    @Override
    public Long value16() {
        return getPreviousId();
    }

    @Override
    public BlockRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public BlockRecord value2(Long value) {
        setBlockNo(value);
        return this;
    }

    @Override
    public BlockRecord value3(Integer value) {
        setEpochNo(value);
        return this;
    }

    @Override
    public BlockRecord value4(Integer value) {
        setEpochSlotNo(value);
        return this;
    }

    @Override
    public BlockRecord value5(String value) {
        setHash(value);
        return this;
    }

    @Override
    public BlockRecord value6(String value) {
        setOpCert(value);
        return this;
    }

    @Override
    public BlockRecord value7(Long value) {
        setOpCertCounter(value);
        return this;
    }

    @Override
    public BlockRecord value8(Integer value) {
        setProtoMajor(value);
        return this;
    }

    @Override
    public BlockRecord value9(Integer value) {
        setProtoMinor(value);
        return this;
    }

    @Override
    public BlockRecord value10(Integer value) {
        setSize(value);
        return this;
    }

    @Override
    public BlockRecord value11(Long value) {
        setSlotLeaderId(value);
        return this;
    }

    @Override
    public BlockRecord value12(Long value) {
        setSlotNo(value);
        return this;
    }

    @Override
    public BlockRecord value13(LocalDateTime value) {
        setTime(value);
        return this;
    }

    @Override
    public BlockRecord value14(Long value) {
        setTxCount(value);
        return this;
    }

    @Override
    public BlockRecord value15(String value) {
        setVrfKey(value);
        return this;
    }

    @Override
    public BlockRecord value16(Long value) {
        setPreviousId(value);
        return this;
    }

    @Override
    public BlockRecord values(Long value1, Long value2, Integer value3, Integer value4, String value5, String value6, Long value7, Integer value8, Integer value9, Integer value10, Long value11, Long value12, LocalDateTime value13, Long value14, String value15, Long value16) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BlockRecord
     */
    public BlockRecord() {
        super(Block.BLOCK);
    }

    /**
     * Create a detached, initialised BlockRecord
     */
    public BlockRecord(Long id, Long blockNo, Integer epochNo, Integer epochSlotNo, String hash, String opCert, Long opCertCounter, Integer protoMajor, Integer protoMinor, Integer size, Long slotLeaderId, Long slotNo, LocalDateTime time, Long txCount, String vrfKey, Long previousId) {
        super(Block.BLOCK);

        setId(id);
        setBlockNo(blockNo);
        setEpochNo(epochNo);
        setEpochSlotNo(epochSlotNo);
        setHash(hash);
        setOpCert(opCert);
        setOpCertCounter(opCertCounter);
        setProtoMajor(protoMajor);
        setProtoMinor(protoMinor);
        setSize(size);
        setSlotLeaderId(slotLeaderId);
        setSlotNo(slotNo);
        setTime(time);
        setTxCount(txCount);
        setVrfKey(vrfKey);
        setPreviousId(previousId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised BlockRecord
     */
    public BlockRecord(org.cardanofoundation.ledgersync.jooq.tables.pojos.Block value) {
        super(Block.BLOCK);

        if (value != null) {
            setId(value.getId());
            setBlockNo(value.getBlockNo());
            setEpochNo(value.getEpochNo());
            setEpochSlotNo(value.getEpochSlotNo());
            setHash(value.getHash());
            setOpCert(value.getOpCert());
            setOpCertCounter(value.getOpCertCounter());
            setProtoMajor(value.getProtoMajor());
            setProtoMinor(value.getProtoMinor());
            setSize(value.getSize());
            setSlotLeaderId(value.getSlotLeaderId());
            setSlotNo(value.getSlotNo());
            setTime(value.getTime());
            setTxCount(value.getTxCount());
            setVrfKey(value.getVrfKey());
            setPreviousId(value.getPreviousId());
            resetChangedOnNotNull();
        }
    }
}
