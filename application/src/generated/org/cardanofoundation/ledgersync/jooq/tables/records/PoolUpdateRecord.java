/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables.records;


import java.math.BigInteger;

import org.cardanofoundation.ledgersync.jooq.tables.PoolUpdate;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record11;
import org.jooq.Row11;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PoolUpdateRecord extends UpdatableRecordImpl<PoolUpdateRecord> implements Record11<Long, Long, Integer, BigInteger, Double, BigInteger, String, Long, Long, Long, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>pool_update.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>pool_update.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>pool_update.active_epoch_no</code>.
     */
    public void setActiveEpochNo(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>pool_update.active_epoch_no</code>.
     */
    public Long getActiveEpochNo() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>pool_update.cert_index</code>.
     */
    public void setCertIndex(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>pool_update.cert_index</code>.
     */
    public Integer getCertIndex() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>pool_update.fixed_cost</code>.
     */
    public void setFixedCost(BigInteger value) {
        set(3, value);
    }

    /**
     * Getter for <code>pool_update.fixed_cost</code>.
     */
    public BigInteger getFixedCost() {
        return (BigInteger) get(3);
    }

    /**
     * Setter for <code>pool_update.margin</code>.
     */
    public void setMargin(Double value) {
        set(4, value);
    }

    /**
     * Getter for <code>pool_update.margin</code>.
     */
    public Double getMargin() {
        return (Double) get(4);
    }

    /**
     * Setter for <code>pool_update.pledge</code>.
     */
    public void setPledge(BigInteger value) {
        set(5, value);
    }

    /**
     * Getter for <code>pool_update.pledge</code>.
     */
    public BigInteger getPledge() {
        return (BigInteger) get(5);
    }

    /**
     * Setter for <code>pool_update.vrf_key_hash</code>.
     */
    public void setVrfKeyHash(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>pool_update.vrf_key_hash</code>.
     */
    public String getVrfKeyHash() {
        return (String) get(6);
    }

    /**
     * Setter for <code>pool_update.meta_id</code>.
     */
    public void setMetaId(Long value) {
        set(7, value);
    }

    /**
     * Getter for <code>pool_update.meta_id</code>.
     */
    public Long getMetaId() {
        return (Long) get(7);
    }

    /**
     * Setter for <code>pool_update.hash_id</code>.
     */
    public void setHashId(Long value) {
        set(8, value);
    }

    /**
     * Getter for <code>pool_update.hash_id</code>.
     */
    public Long getHashId() {
        return (Long) get(8);
    }

    /**
     * Setter for <code>pool_update.registered_tx_id</code>.
     */
    public void setRegisteredTxId(Long value) {
        set(9, value);
    }

    /**
     * Getter for <code>pool_update.registered_tx_id</code>.
     */
    public Long getRegisteredTxId() {
        return (Long) get(9);
    }

    /**
     * Setter for <code>pool_update.reward_addr_id</code>.
     */
    public void setRewardAddrId(Long value) {
        set(10, value);
    }

    /**
     * Getter for <code>pool_update.reward_addr_id</code>.
     */
    public Long getRewardAddrId() {
        return (Long) get(10);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record11 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, Long, Integer, BigInteger, Double, BigInteger, String, Long, Long, Long, Long> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    @Override
    public Row11<Long, Long, Integer, BigInteger, Double, BigInteger, String, Long, Long, Long, Long> valuesRow() {
        return (Row11) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return PoolUpdate.POOL_UPDATE.ID;
    }

    @Override
    public Field<Long> field2() {
        return PoolUpdate.POOL_UPDATE.ACTIVE_EPOCH_NO;
    }

    @Override
    public Field<Integer> field3() {
        return PoolUpdate.POOL_UPDATE.CERT_INDEX;
    }

    @Override
    public Field<BigInteger> field4() {
        return PoolUpdate.POOL_UPDATE.FIXED_COST;
    }

    @Override
    public Field<Double> field5() {
        return PoolUpdate.POOL_UPDATE.MARGIN;
    }

    @Override
    public Field<BigInteger> field6() {
        return PoolUpdate.POOL_UPDATE.PLEDGE;
    }

    @Override
    public Field<String> field7() {
        return PoolUpdate.POOL_UPDATE.VRF_KEY_HASH;
    }

    @Override
    public Field<Long> field8() {
        return PoolUpdate.POOL_UPDATE.META_ID;
    }

    @Override
    public Field<Long> field9() {
        return PoolUpdate.POOL_UPDATE.HASH_ID;
    }

    @Override
    public Field<Long> field10() {
        return PoolUpdate.POOL_UPDATE.REGISTERED_TX_ID;
    }

    @Override
    public Field<Long> field11() {
        return PoolUpdate.POOL_UPDATE.REWARD_ADDR_ID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getActiveEpochNo();
    }

    @Override
    public Integer component3() {
        return getCertIndex();
    }

    @Override
    public BigInteger component4() {
        return getFixedCost();
    }

    @Override
    public Double component5() {
        return getMargin();
    }

    @Override
    public BigInteger component6() {
        return getPledge();
    }

    @Override
    public String component7() {
        return getVrfKeyHash();
    }

    @Override
    public Long component8() {
        return getMetaId();
    }

    @Override
    public Long component9() {
        return getHashId();
    }

    @Override
    public Long component10() {
        return getRegisteredTxId();
    }

    @Override
    public Long component11() {
        return getRewardAddrId();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getActiveEpochNo();
    }

    @Override
    public Integer value3() {
        return getCertIndex();
    }

    @Override
    public BigInteger value4() {
        return getFixedCost();
    }

    @Override
    public Double value5() {
        return getMargin();
    }

    @Override
    public BigInteger value6() {
        return getPledge();
    }

    @Override
    public String value7() {
        return getVrfKeyHash();
    }

    @Override
    public Long value8() {
        return getMetaId();
    }

    @Override
    public Long value9() {
        return getHashId();
    }

    @Override
    public Long value10() {
        return getRegisteredTxId();
    }

    @Override
    public Long value11() {
        return getRewardAddrId();
    }

    @Override
    public PoolUpdateRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public PoolUpdateRecord value2(Long value) {
        setActiveEpochNo(value);
        return this;
    }

    @Override
    public PoolUpdateRecord value3(Integer value) {
        setCertIndex(value);
        return this;
    }

    @Override
    public PoolUpdateRecord value4(BigInteger value) {
        setFixedCost(value);
        return this;
    }

    @Override
    public PoolUpdateRecord value5(Double value) {
        setMargin(value);
        return this;
    }

    @Override
    public PoolUpdateRecord value6(BigInteger value) {
        setPledge(value);
        return this;
    }

    @Override
    public PoolUpdateRecord value7(String value) {
        setVrfKeyHash(value);
        return this;
    }

    @Override
    public PoolUpdateRecord value8(Long value) {
        setMetaId(value);
        return this;
    }

    @Override
    public PoolUpdateRecord value9(Long value) {
        setHashId(value);
        return this;
    }

    @Override
    public PoolUpdateRecord value10(Long value) {
        setRegisteredTxId(value);
        return this;
    }

    @Override
    public PoolUpdateRecord value11(Long value) {
        setRewardAddrId(value);
        return this;
    }

    @Override
    public PoolUpdateRecord values(Long value1, Long value2, Integer value3, BigInteger value4, Double value5, BigInteger value6, String value7, Long value8, Long value9, Long value10, Long value11) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PoolUpdateRecord
     */
    public PoolUpdateRecord() {
        super(PoolUpdate.POOL_UPDATE);
    }

    /**
     * Create a detached, initialised PoolUpdateRecord
     */
    public PoolUpdateRecord(Long id, Long activeEpochNo, Integer certIndex, BigInteger fixedCost, Double margin, BigInteger pledge, String vrfKeyHash, Long metaId, Long hashId, Long registeredTxId, Long rewardAddrId) {
        super(PoolUpdate.POOL_UPDATE);

        setId(id);
        setActiveEpochNo(activeEpochNo);
        setCertIndex(certIndex);
        setFixedCost(fixedCost);
        setMargin(margin);
        setPledge(pledge);
        setVrfKeyHash(vrfKeyHash);
        setMetaId(metaId);
        setHashId(hashId);
        setRegisteredTxId(registeredTxId);
        setRewardAddrId(rewardAddrId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised PoolUpdateRecord
     */
    public PoolUpdateRecord(org.cardanofoundation.ledgersync.jooq.tables.pojos.PoolUpdate value) {
        super(PoolUpdate.POOL_UPDATE);

        if (value != null) {
            setId(value.getId());
            setActiveEpochNo(value.getActiveEpochNo());
            setCertIndex(value.getCertIndex());
            setFixedCost(value.getFixedCost());
            setMargin(value.getMargin());
            setPledge(value.getPledge());
            setVrfKeyHash(value.getVrfKeyHash());
            setMetaId(value.getMetaId());
            setHashId(value.getHashId());
            setRegisteredTxId(value.getRegisteredTxId());
            setRewardAddrId(value.getRewardAddrId());
            resetChangedOnNotNull();
        }
    }
}
