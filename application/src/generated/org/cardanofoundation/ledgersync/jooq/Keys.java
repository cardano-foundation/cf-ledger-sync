/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq;


import org.cardanofoundation.ledgersync.jooq.tables.AdaPots;
import org.cardanofoundation.ledgersync.jooq.tables.Address;
import org.cardanofoundation.ledgersync.jooq.tables.AddressToken;
import org.cardanofoundation.ledgersync.jooq.tables.AddressTokenBalance;
import org.cardanofoundation.ledgersync.jooq.tables.AddressTxBalance;
import org.cardanofoundation.ledgersync.jooq.tables.AggAddressToken;
import org.cardanofoundation.ledgersync.jooq.tables.AggAddressTxBalance;
import org.cardanofoundation.ledgersync.jooq.tables.AggPoolInfo;
import org.cardanofoundation.ledgersync.jooq.tables.AssetMetadata;
import org.cardanofoundation.ledgersync.jooq.tables.Block;
import org.cardanofoundation.ledgersync.jooq.tables.CostModel;
import org.cardanofoundation.ledgersync.jooq.tables.Datum;
import org.cardanofoundation.ledgersync.jooq.tables.Delegation;
import org.cardanofoundation.ledgersync.jooq.tables.DelistedPool;
import org.cardanofoundation.ledgersync.jooq.tables.Epoch;
import org.cardanofoundation.ledgersync.jooq.tables.EpochParam;
import org.cardanofoundation.ledgersync.jooq.tables.EpochStake;
import org.cardanofoundation.ledgersync.jooq.tables.EpochSyncTime;
import org.cardanofoundation.ledgersync.jooq.tables.ExtraKeyWitness;
import org.cardanofoundation.ledgersync.jooq.tables.FailedTxOut;
import org.cardanofoundation.ledgersync.jooq.tables.MaTxMint;
import org.cardanofoundation.ledgersync.jooq.tables.MaTxOut;
import org.cardanofoundation.ledgersync.jooq.tables.Meta;
import org.cardanofoundation.ledgersync.jooq.tables.MultiAsset;
import org.cardanofoundation.ledgersync.jooq.tables.ParamProposal;
import org.cardanofoundation.ledgersync.jooq.tables.PoolHash;
import org.cardanofoundation.ledgersync.jooq.tables.PoolMetadataRef;
import org.cardanofoundation.ledgersync.jooq.tables.PoolOfflineData;
import org.cardanofoundation.ledgersync.jooq.tables.PoolOfflineFetchError;
import org.cardanofoundation.ledgersync.jooq.tables.PoolOwner;
import org.cardanofoundation.ledgersync.jooq.tables.PoolRelay;
import org.cardanofoundation.ledgersync.jooq.tables.PoolReportHistory;
import org.cardanofoundation.ledgersync.jooq.tables.PoolRetire;
import org.cardanofoundation.ledgersync.jooq.tables.PoolUpdate;
import org.cardanofoundation.ledgersync.jooq.tables.PotTransfer;
import org.cardanofoundation.ledgersync.jooq.tables.Redeemer;
import org.cardanofoundation.ledgersync.jooq.tables.RedeemerData;
import org.cardanofoundation.ledgersync.jooq.tables.ReferenceTxIn;
import org.cardanofoundation.ledgersync.jooq.tables.ReportHistory;
import org.cardanofoundation.ledgersync.jooq.tables.Reserve;
import org.cardanofoundation.ledgersync.jooq.tables.ReservedPoolTicker;
import org.cardanofoundation.ledgersync.jooq.tables.Reward;
import org.cardanofoundation.ledgersync.jooq.tables.RollbackHistory;
import org.cardanofoundation.ledgersync.jooq.tables.SchemaVersion;
import org.cardanofoundation.ledgersync.jooq.tables.Script;
import org.cardanofoundation.ledgersync.jooq.tables.SlotLeader;
import org.cardanofoundation.ledgersync.jooq.tables.StakeAddress;
import org.cardanofoundation.ledgersync.jooq.tables.StakeDeregistration;
import org.cardanofoundation.ledgersync.jooq.tables.StakeKeyReportHistory;
import org.cardanofoundation.ledgersync.jooq.tables.StakeRegistration;
import org.cardanofoundation.ledgersync.jooq.tables.StakeTxBalance;
import org.cardanofoundation.ledgersync.jooq.tables.TokenInfo;
import org.cardanofoundation.ledgersync.jooq.tables.TokenInfoCheckpoint;
import org.cardanofoundation.ledgersync.jooq.tables.Treasury;
import org.cardanofoundation.ledgersync.jooq.tables.Tx;
import org.cardanofoundation.ledgersync.jooq.tables.TxChart;
import org.cardanofoundation.ledgersync.jooq.tables.TxIn;
import org.cardanofoundation.ledgersync.jooq.tables.TxMetadata;
import org.cardanofoundation.ledgersync.jooq.tables.TxMetadataHash;
import org.cardanofoundation.ledgersync.jooq.tables.TxOut;
import org.cardanofoundation.ledgersync.jooq.tables.UnconsumeTxIn;
import org.cardanofoundation.ledgersync.jooq.tables.Withdrawal;
import org.cardanofoundation.ledgersync.jooq.tables.records.AdaPotsRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.AddressRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.AddressTokenBalanceRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.AddressTokenRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.AddressTxBalanceRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.AggAddressTokenRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.AggAddressTxBalanceRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.AggPoolInfoRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.AssetMetadataRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.BlockRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.CostModelRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.DatumRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.DelegationRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.DelistedPoolRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.EpochParamRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.EpochRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.EpochStakeRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.EpochSyncTimeRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.ExtraKeyWitnessRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.FailedTxOutRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.MaTxMintRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.MaTxOutRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.MetaRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.MultiAssetRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.ParamProposalRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.PoolHashRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.PoolMetadataRefRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.PoolOfflineDataRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.PoolOfflineFetchErrorRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.PoolOwnerRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.PoolRelayRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.PoolReportHistoryRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.PoolRetireRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.PoolUpdateRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.PotTransferRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.RedeemerDataRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.RedeemerRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.ReferenceTxInRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.ReportHistoryRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.ReserveRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.ReservedPoolTickerRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.RewardRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.RollbackHistoryRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.SchemaVersionRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.ScriptRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.SlotLeaderRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.StakeAddressRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.StakeDeregistrationRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.StakeKeyReportHistoryRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.StakeRegistrationRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.StakeTxBalanceRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.TokenInfoCheckpointRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.TokenInfoRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.TreasuryRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.TxChartRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.TxInRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.TxMetadataHashRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.TxMetadataRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.TxOutRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.TxRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.UnconsumeTxInRecord;
import org.cardanofoundation.ledgersync.jooq.tables.records.WithdrawalRecord;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in the
 * default schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AdaPotsRecord> ADA_POTS_PKEY = Internal.createUniqueKey(AdaPots.ADA_POTS, DSL.name("ada_pots_pkey"), new TableField[] { AdaPots.ADA_POTS.ID }, true);
    public static final UniqueKey<AdaPotsRecord> UK_ADA_POTS_BLOCK_ID = Internal.createUniqueKey(AdaPots.ADA_POTS, DSL.name("uk_ada_pots_block_id"), new TableField[] { AdaPots.ADA_POTS.BLOCK_ID }, true);
    public static final UniqueKey<AdaPotsRecord> UNIQUE_ADA_POTS = Internal.createUniqueKey(AdaPots.ADA_POTS, DSL.name("unique_ada_pots"), new TableField[] { AdaPots.ADA_POTS.BLOCK_ID }, true);
    public static final UniqueKey<AddressRecord> ADDRESS_PKEY = Internal.createUniqueKey(Address.ADDRESS, DSL.name("address_pkey"), new TableField[] { Address.ADDRESS.ID }, true);
    public static final UniqueKey<AddressTokenRecord> ADDRESS_TOKEN_PKEY = Internal.createUniqueKey(AddressToken.ADDRESS_TOKEN, DSL.name("address_token_pkey"), new TableField[] { AddressToken.ADDRESS_TOKEN.ID }, true);
    public static final UniqueKey<AddressTokenBalanceRecord> ADDRESS_TOKEN_BALANCE_PKEY = Internal.createUniqueKey(AddressTokenBalance.ADDRESS_TOKEN_BALANCE, DSL.name("address_token_balance_pkey"), new TableField[] { AddressTokenBalance.ADDRESS_TOKEN_BALANCE.ID }, true);
    public static final UniqueKey<AddressTxBalanceRecord> ADDRESS_TX_BALANCE_PKEY = Internal.createUniqueKey(AddressTxBalance.ADDRESS_TX_BALANCE, DSL.name("address_tx_balance_pkey"), new TableField[] { AddressTxBalance.ADDRESS_TX_BALANCE.ID }, true);
    public static final UniqueKey<AggAddressTokenRecord> AGG_ADDRESS_TOKEN_PKEY = Internal.createUniqueKey(AggAddressToken.AGG_ADDRESS_TOKEN, DSL.name("agg_address_token_pkey"), new TableField[] { AggAddressToken.AGG_ADDRESS_TOKEN.ID }, true);
    public static final UniqueKey<AggAddressTxBalanceRecord> AGG_ADDRESS_TX_BALANCE_PKEY = Internal.createUniqueKey(AggAddressTxBalance.AGG_ADDRESS_TX_BALANCE, DSL.name("agg_address_tx_balance_pkey"), new TableField[] { AggAddressTxBalance.AGG_ADDRESS_TX_BALANCE.ID }, true);
    public static final UniqueKey<AggPoolInfoRecord> AGG_POOL_INFO_PKEY = Internal.createUniqueKey(AggPoolInfo.AGG_POOL_INFO, DSL.name("agg_pool_info_pkey"), new TableField[] { AggPoolInfo.AGG_POOL_INFO.ID }, true);
    public static final UniqueKey<AssetMetadataRecord> ASSET_METADATA_PKEY = Internal.createUniqueKey(AssetMetadata.ASSET_METADATA, DSL.name("asset_metadata_pkey"), new TableField[] { AssetMetadata.ASSET_METADATA.ID }, true);
    public static final UniqueKey<BlockRecord> BLOCK_PKEY = Internal.createUniqueKey(Block.BLOCK, DSL.name("block_pkey"), new TableField[] { Block.BLOCK.ID }, true);
    public static final UniqueKey<BlockRecord> UNIQUE_BLOCK = Internal.createUniqueKey(Block.BLOCK, DSL.name("unique_block"), new TableField[] { Block.BLOCK.HASH }, true);
    public static final UniqueKey<CostModelRecord> COST_MODEL_PKEY = Internal.createUniqueKey(CostModel.COST_MODEL, DSL.name("cost_model_pkey"), new TableField[] { CostModel.COST_MODEL.ID }, true);
    public static final UniqueKey<CostModelRecord> UNIQUE_COST_MODEL = Internal.createUniqueKey(CostModel.COST_MODEL, DSL.name("unique_cost_model"), new TableField[] { CostModel.COST_MODEL.HASH }, true);
    public static final UniqueKey<DatumRecord> DATUM_PKEY = Internal.createUniqueKey(Datum.DATUM, DSL.name("datum_pkey"), new TableField[] { Datum.DATUM.ID }, true);
    public static final UniqueKey<DatumRecord> UNIQUE_DATUM = Internal.createUniqueKey(Datum.DATUM, DSL.name("unique_datum"), new TableField[] { Datum.DATUM.HASH }, true);
    public static final UniqueKey<DelegationRecord> DELEGATION_PKEY = Internal.createUniqueKey(Delegation.DELEGATION, DSL.name("delegation_pkey"), new TableField[] { Delegation.DELEGATION.ID }, true);
    public static final UniqueKey<DelegationRecord> UNIQUE_DELEGATION = Internal.createUniqueKey(Delegation.DELEGATION, DSL.name("unique_delegation"), new TableField[] { Delegation.DELEGATION.TX_ID, Delegation.DELEGATION.CERT_INDEX }, true);
    public static final UniqueKey<DelistedPoolRecord> DELISTED_POOL_PKEY = Internal.createUniqueKey(DelistedPool.DELISTED_POOL, DSL.name("delisted_pool_pkey"), new TableField[] { DelistedPool.DELISTED_POOL.ID }, true);
    public static final UniqueKey<DelistedPoolRecord> UNIQUE_DELISTED_POOL = Internal.createUniqueKey(DelistedPool.DELISTED_POOL, DSL.name("unique_delisted_pool"), new TableField[] { DelistedPool.DELISTED_POOL.HASH_RAW }, true);
    public static final UniqueKey<EpochRecord> EPOCH_PKEY = Internal.createUniqueKey(Epoch.EPOCH, DSL.name("epoch_pkey"), new TableField[] { Epoch.EPOCH.ID }, true);
    public static final UniqueKey<EpochRecord> UNIQUE_EPOCH = Internal.createUniqueKey(Epoch.EPOCH, DSL.name("unique_epoch"), new TableField[] { Epoch.EPOCH.NO }, true);
    public static final UniqueKey<EpochParamRecord> EPOCH_PARAM_PKEY = Internal.createUniqueKey(EpochParam.EPOCH_PARAM, DSL.name("epoch_param_pkey"), new TableField[] { EpochParam.EPOCH_PARAM.ID }, true);
    public static final UniqueKey<EpochParamRecord> UNIQUE_EPOCH_PARAM = Internal.createUniqueKey(EpochParam.EPOCH_PARAM, DSL.name("unique_epoch_param"), new TableField[] { EpochParam.EPOCH_PARAM.EPOCH_NO, EpochParam.EPOCH_PARAM.BLOCK_ID }, true);
    public static final UniqueKey<EpochStakeRecord> EPOCH_STAKE_PKEY = Internal.createUniqueKey(EpochStake.EPOCH_STAKE, DSL.name("epoch_stake_pkey"), new TableField[] { EpochStake.EPOCH_STAKE.ID }, true);
    public static final UniqueKey<EpochStakeRecord> UNIQUE_STAKE = Internal.createUniqueKey(EpochStake.EPOCH_STAKE, DSL.name("unique_stake"), new TableField[] { EpochStake.EPOCH_STAKE.EPOCH_NO, EpochStake.EPOCH_STAKE.ADDR_ID, EpochStake.EPOCH_STAKE.POOL_ID }, true);
    public static final UniqueKey<EpochSyncTimeRecord> EPOCH_SYNC_TIME_PKEY = Internal.createUniqueKey(EpochSyncTime.EPOCH_SYNC_TIME, DSL.name("epoch_sync_time_pkey"), new TableField[] { EpochSyncTime.EPOCH_SYNC_TIME.ID }, true);
    public static final UniqueKey<EpochSyncTimeRecord> UNIQUE_EPOCH_SYNC_TIME = Internal.createUniqueKey(EpochSyncTime.EPOCH_SYNC_TIME, DSL.name("unique_epoch_sync_time"), new TableField[] { EpochSyncTime.EPOCH_SYNC_TIME.NO }, true);
    public static final UniqueKey<ExtraKeyWitnessRecord> EXTRA_KEY_WITNESS_PKEY = Internal.createUniqueKey(ExtraKeyWitness.EXTRA_KEY_WITNESS, DSL.name("extra_key_witness_pkey"), new TableField[] { ExtraKeyWitness.EXTRA_KEY_WITNESS.ID }, true);
    public static final UniqueKey<ExtraKeyWitnessRecord> UNIQUE_WITNESS = Internal.createUniqueKey(ExtraKeyWitness.EXTRA_KEY_WITNESS, DSL.name("unique_witness"), new TableField[] { ExtraKeyWitness.EXTRA_KEY_WITNESS.HASH }, true);
    public static final UniqueKey<FailedTxOutRecord> FAILED_TX_OUT_PKEY = Internal.createUniqueKey(FailedTxOut.FAILED_TX_OUT, DSL.name("failed_tx_out_pkey"), new TableField[] { FailedTxOut.FAILED_TX_OUT.ID }, true);
    public static final UniqueKey<FailedTxOutRecord> UNIQUE_COL_FAILED_TXOUT = Internal.createUniqueKey(FailedTxOut.FAILED_TX_OUT, DSL.name("unique_col_failed_txout"), new TableField[] { FailedTxOut.FAILED_TX_OUT.TX_ID, FailedTxOut.FAILED_TX_OUT.INDEX }, true);
    public static final UniqueKey<MaTxMintRecord> MA_TX_MINT_PKEY = Internal.createUniqueKey(MaTxMint.MA_TX_MINT, DSL.name("ma_tx_mint_pkey"), new TableField[] { MaTxMint.MA_TX_MINT.ID }, true);
    public static final UniqueKey<MaTxMintRecord> UNIQUE_MA_TX_MINT = Internal.createUniqueKey(MaTxMint.MA_TX_MINT, DSL.name("unique_ma_tx_mint"), new TableField[] { MaTxMint.MA_TX_MINT.IDENT, MaTxMint.MA_TX_MINT.TX_ID }, true);
    public static final UniqueKey<MaTxOutRecord> MA_TX_OUT_PKEY = Internal.createUniqueKey(MaTxOut.MA_TX_OUT, DSL.name("ma_tx_out_pkey"), new TableField[] { MaTxOut.MA_TX_OUT.ID }, true);
    public static final UniqueKey<MaTxOutRecord> UNIQUE_MA_TX_OUT = Internal.createUniqueKey(MaTxOut.MA_TX_OUT, DSL.name("unique_ma_tx_out"), new TableField[] { MaTxOut.MA_TX_OUT.IDENT, MaTxOut.MA_TX_OUT.TX_OUT_ID }, true);
    public static final UniqueKey<MetaRecord> META_PKEY = Internal.createUniqueKey(Meta.META, DSL.name("meta_pkey"), new TableField[] { Meta.META.ID }, true);
    public static final UniqueKey<MetaRecord> UNIQUE_META = Internal.createUniqueKey(Meta.META, DSL.name("unique_meta"), new TableField[] { Meta.META.START_TIME }, true);
    public static final UniqueKey<MultiAssetRecord> MULTI_ASSET_PKEY = Internal.createUniqueKey(MultiAsset.MULTI_ASSET, DSL.name("multi_asset_pkey"), new TableField[] { MultiAsset.MULTI_ASSET.ID }, true);
    public static final UniqueKey<MultiAssetRecord> UNIQUE_MULTI_ASSET = Internal.createUniqueKey(MultiAsset.MULTI_ASSET, DSL.name("unique_multi_asset"), new TableField[] { MultiAsset.MULTI_ASSET.POLICY, MultiAsset.MULTI_ASSET.NAME }, true);
    public static final UniqueKey<ParamProposalRecord> PARAM_PROPOSAL_PKEY = Internal.createUniqueKey(ParamProposal.PARAM_PROPOSAL, DSL.name("param_proposal_pkey"), new TableField[] { ParamProposal.PARAM_PROPOSAL.ID }, true);
    public static final UniqueKey<ParamProposalRecord> UNIQUE_PARAM_PROPOSAL = Internal.createUniqueKey(ParamProposal.PARAM_PROPOSAL, DSL.name("unique_param_proposal"), new TableField[] { ParamProposal.PARAM_PROPOSAL.KEY, ParamProposal.PARAM_PROPOSAL.REGISTERED_TX_ID }, true);
    public static final UniqueKey<PoolHashRecord> POOL_HASH_PKEY = Internal.createUniqueKey(PoolHash.POOL_HASH, DSL.name("pool_hash_pkey"), new TableField[] { PoolHash.POOL_HASH.ID }, true);
    public static final UniqueKey<PoolMetadataRefRecord> POOL_METADATA_REF_PKEY = Internal.createUniqueKey(PoolMetadataRef.POOL_METADATA_REF, DSL.name("pool_metadata_ref_pkey"), new TableField[] { PoolMetadataRef.POOL_METADATA_REF.ID }, true);
    public static final UniqueKey<PoolMetadataRefRecord> UNIQUE_POOL_METADATA_REF = Internal.createUniqueKey(PoolMetadataRef.POOL_METADATA_REF, DSL.name("unique_pool_metadata_ref"), new TableField[] { PoolMetadataRef.POOL_METADATA_REF.POOL_ID, PoolMetadataRef.POOL_METADATA_REF.URL, PoolMetadataRef.POOL_METADATA_REF.HASH }, true);
    public static final UniqueKey<PoolOfflineDataRecord> POOL_OFFLINE_DATA_PKEY = Internal.createUniqueKey(PoolOfflineData.POOL_OFFLINE_DATA, DSL.name("pool_offline_data_pkey"), new TableField[] { PoolOfflineData.POOL_OFFLINE_DATA.ID }, true);
    public static final UniqueKey<PoolOfflineDataRecord> POOL_OFFLINE_DATA_POOL_ID_UNIQUE = Internal.createUniqueKey(PoolOfflineData.POOL_OFFLINE_DATA, DSL.name("pool_offline_data_pool_id_unique"), new TableField[] { PoolOfflineData.POOL_OFFLINE_DATA.POOL_ID }, true);
    public static final UniqueKey<PoolOfflineFetchErrorRecord> POOL_OFFLINE_FETCH_ERROR_PKEY = Internal.createUniqueKey(PoolOfflineFetchError.POOL_OFFLINE_FETCH_ERROR, DSL.name("pool_offline_fetch_error_pkey"), new TableField[] { PoolOfflineFetchError.POOL_OFFLINE_FETCH_ERROR.ID }, true);
    public static final UniqueKey<PoolOwnerRecord> POOL_OWNER_PKEY = Internal.createUniqueKey(PoolOwner.POOL_OWNER, DSL.name("pool_owner_pkey"), new TableField[] { PoolOwner.POOL_OWNER.ID }, true);
    public static final UniqueKey<PoolOwnerRecord> UNIQUE_POOL_OWNER = Internal.createUniqueKey(PoolOwner.POOL_OWNER, DSL.name("unique_pool_owner"), new TableField[] { PoolOwner.POOL_OWNER.ADDR_ID, PoolOwner.POOL_OWNER.POOL_UPDATE_ID }, true);
    public static final UniqueKey<PoolRelayRecord> POOL_RELAY_PKEY = Internal.createUniqueKey(PoolRelay.POOL_RELAY, DSL.name("pool_relay_pkey"), new TableField[] { PoolRelay.POOL_RELAY.ID }, true);
    public static final UniqueKey<PoolRelayRecord> UNIQUE_POOL_RELAY = Internal.createUniqueKey(PoolRelay.POOL_RELAY, DSL.name("unique_pool_relay"), new TableField[] { PoolRelay.POOL_RELAY.UPDATE_ID, PoolRelay.POOL_RELAY.IPV4, PoolRelay.POOL_RELAY.IPV6, PoolRelay.POOL_RELAY.DNS_NAME }, true);
    public static final UniqueKey<PoolReportHistoryRecord> POOL_REPORT_HISTORY_PKEY = Internal.createUniqueKey(PoolReportHistory.POOL_REPORT_HISTORY, DSL.name("pool_report_history_pkey"), new TableField[] { PoolReportHistory.POOL_REPORT_HISTORY.ID }, true);
    public static final UniqueKey<PoolRetireRecord> POOL_RETIRE_PKEY = Internal.createUniqueKey(PoolRetire.POOL_RETIRE, DSL.name("pool_retire_pkey"), new TableField[] { PoolRetire.POOL_RETIRE.ID }, true);
    public static final UniqueKey<PoolRetireRecord> UNIQUE_POOL_RETIRING = Internal.createUniqueKey(PoolRetire.POOL_RETIRE, DSL.name("unique_pool_retiring"), new TableField[] { PoolRetire.POOL_RETIRE.ANNOUNCED_TX_ID, PoolRetire.POOL_RETIRE.CERT_INDEX }, true);
    public static final UniqueKey<PoolUpdateRecord> POOL_UPDATE_PKEY = Internal.createUniqueKey(PoolUpdate.POOL_UPDATE, DSL.name("pool_update_pkey"), new TableField[] { PoolUpdate.POOL_UPDATE.ID }, true);
    public static final UniqueKey<PoolUpdateRecord> UNIQUE_POOL_UPDATE = Internal.createUniqueKey(PoolUpdate.POOL_UPDATE, DSL.name("unique_pool_update"), new TableField[] { PoolUpdate.POOL_UPDATE.REGISTERED_TX_ID, PoolUpdate.POOL_UPDATE.CERT_INDEX }, true);
    public static final UniqueKey<PotTransferRecord> POT_TRANSFER_PKEY = Internal.createUniqueKey(PotTransfer.POT_TRANSFER, DSL.name("pot_transfer_pkey"), new TableField[] { PotTransfer.POT_TRANSFER.ID }, true);
    public static final UniqueKey<PotTransferRecord> UNIQUE_POT_TRANSFER = Internal.createUniqueKey(PotTransfer.POT_TRANSFER, DSL.name("unique_pot_transfer"), new TableField[] { PotTransfer.POT_TRANSFER.TX_ID, PotTransfer.POT_TRANSFER.CERT_INDEX }, true);
    public static final UniqueKey<RedeemerRecord> REDEEMER_PKEY = Internal.createUniqueKey(Redeemer.REDEEMER, DSL.name("redeemer_pkey"), new TableField[] { Redeemer.REDEEMER.ID }, true);
    public static final UniqueKey<RedeemerRecord> UNIQUE_REDEEMER = Internal.createUniqueKey(Redeemer.REDEEMER, DSL.name("unique_redeemer"), new TableField[] { Redeemer.REDEEMER.TX_ID, Redeemer.REDEEMER.PURPOSE, Redeemer.REDEEMER.INDEX }, true);
    public static final UniqueKey<RedeemerDataRecord> REDEEMER_DATA_PKEY = Internal.createUniqueKey(RedeemerData.REDEEMER_DATA, DSL.name("redeemer_data_pkey"), new TableField[] { RedeemerData.REDEEMER_DATA.ID }, true);
    public static final UniqueKey<RedeemerDataRecord> UNIQUE_REDEEMER_DATA = Internal.createUniqueKey(RedeemerData.REDEEMER_DATA, DSL.name("unique_redeemer_data"), new TableField[] { RedeemerData.REDEEMER_DATA.HASH }, true);
    public static final UniqueKey<ReferenceTxInRecord> REFERENCE_TX_IN_PKEY = Internal.createUniqueKey(ReferenceTxIn.REFERENCE_TX_IN, DSL.name("reference_tx_in_pkey"), new TableField[] { ReferenceTxIn.REFERENCE_TX_IN.ID }, true);
    public static final UniqueKey<ReferenceTxInRecord> UNIQUE_REF_TXIN = Internal.createUniqueKey(ReferenceTxIn.REFERENCE_TX_IN, DSL.name("unique_ref_txin"), new TableField[] { ReferenceTxIn.REFERENCE_TX_IN.TX_IN_ID, ReferenceTxIn.REFERENCE_TX_IN.TX_OUT_ID, ReferenceTxIn.REFERENCE_TX_IN.TX_OUT_INDEX }, true);
    public static final UniqueKey<ReportHistoryRecord> REPORT_HISTORY_PKEY = Internal.createUniqueKey(ReportHistory.REPORT_HISTORY, DSL.name("report_history_pkey"), new TableField[] { ReportHistory.REPORT_HISTORY.ID }, true);
    public static final UniqueKey<ReportHistoryRecord> STORAGE_KEY_UNIQUE = Internal.createUniqueKey(ReportHistory.REPORT_HISTORY, DSL.name("storage_key_unique"), new TableField[] { ReportHistory.REPORT_HISTORY.STORAGE_KEY }, true);
    public static final UniqueKey<ReserveRecord> RESERVE_PKEY = Internal.createUniqueKey(Reserve.RESERVE, DSL.name("reserve_pkey"), new TableField[] { Reserve.RESERVE.ID }, true);
    public static final UniqueKey<ReserveRecord> UNIQUE_RESERVES = Internal.createUniqueKey(Reserve.RESERVE, DSL.name("unique_reserves"), new TableField[] { Reserve.RESERVE.ADDR_ID, Reserve.RESERVE.TX_ID, Reserve.RESERVE.CERT_INDEX }, true);
    public static final UniqueKey<ReservedPoolTickerRecord> RESERVED_POOL_TICKER_PKEY = Internal.createUniqueKey(ReservedPoolTicker.RESERVED_POOL_TICKER, DSL.name("reserved_pool_ticker_pkey"), new TableField[] { ReservedPoolTicker.RESERVED_POOL_TICKER.ID }, true);
    public static final UniqueKey<ReservedPoolTickerRecord> UNIQUE_RESERVED_POOL_TICKER = Internal.createUniqueKey(ReservedPoolTicker.RESERVED_POOL_TICKER, DSL.name("unique_reserved_pool_ticker"), new TableField[] { ReservedPoolTicker.RESERVED_POOL_TICKER.NAME }, true);
    public static final UniqueKey<RewardRecord> REWARD_PKEY = Internal.createUniqueKey(Reward.REWARD, DSL.name("reward_pkey"), new TableField[] { Reward.REWARD.ID }, true);
    public static final UniqueKey<RewardRecord> UNIQUE_REWARD = Internal.createUniqueKey(Reward.REWARD, DSL.name("unique_reward"), new TableField[] { Reward.REWARD.ADDR_ID, Reward.REWARD.TYPE, Reward.REWARD.EARNED_EPOCH, Reward.REWARD.POOL_ID }, true);
    public static final UniqueKey<RollbackHistoryRecord> ROLLBACK_HISTORY_PKEY = Internal.createUniqueKey(RollbackHistory.ROLLBACK_HISTORY, DSL.name("rollback_history_pkey"), new TableField[] { RollbackHistory.ROLLBACK_HISTORY.ID }, true);
    public static final UniqueKey<SchemaVersionRecord> SCHEMA_VERSION_PKEY = Internal.createUniqueKey(SchemaVersion.SCHEMA_VERSION, DSL.name("schema_version_pkey"), new TableField[] { SchemaVersion.SCHEMA_VERSION.ID }, true);
    public static final UniqueKey<ScriptRecord> SCRIPT_PKEY = Internal.createUniqueKey(Script.SCRIPT, DSL.name("script_pkey"), new TableField[] { Script.SCRIPT.ID }, true);
    public static final UniqueKey<SlotLeaderRecord> SLOT_LEADER_PKEY = Internal.createUniqueKey(SlotLeader.SLOT_LEADER, DSL.name("slot_leader_pkey"), new TableField[] { SlotLeader.SLOT_LEADER.ID }, true);
    public static final UniqueKey<SlotLeaderRecord> UNIQUE_SLOT_LEADER = Internal.createUniqueKey(SlotLeader.SLOT_LEADER, DSL.name("unique_slot_leader"), new TableField[] { SlotLeader.SLOT_LEADER.HASH }, true);
    public static final UniqueKey<StakeAddressRecord> STAKE_ADDRESS_PKEY = Internal.createUniqueKey(StakeAddress.STAKE_ADDRESS, DSL.name("stake_address_pkey"), new TableField[] { StakeAddress.STAKE_ADDRESS.ID }, true);
    public static final UniqueKey<StakeAddressRecord> UNIQUE_STAKE_ADDRESS = Internal.createUniqueKey(StakeAddress.STAKE_ADDRESS, DSL.name("unique_stake_address"), new TableField[] { StakeAddress.STAKE_ADDRESS.HASH_RAW }, true);
    public static final UniqueKey<StakeDeregistrationRecord> STAKE_DEREGISTRATION_PKEY = Internal.createUniqueKey(StakeDeregistration.STAKE_DEREGISTRATION, DSL.name("stake_deregistration_pkey"), new TableField[] { StakeDeregistration.STAKE_DEREGISTRATION.ID }, true);
    public static final UniqueKey<StakeDeregistrationRecord> UNIQUE_STAKE_DEREGISTRATION = Internal.createUniqueKey(StakeDeregistration.STAKE_DEREGISTRATION, DSL.name("unique_stake_deregistration"), new TableField[] { StakeDeregistration.STAKE_DEREGISTRATION.TX_ID, StakeDeregistration.STAKE_DEREGISTRATION.CERT_INDEX }, true);
    public static final UniqueKey<StakeKeyReportHistoryRecord> STAKE_KEY_REPORT_HISTORY_PKEY = Internal.createUniqueKey(StakeKeyReportHistory.STAKE_KEY_REPORT_HISTORY, DSL.name("stake_key_report_history_pkey"), new TableField[] { StakeKeyReportHistory.STAKE_KEY_REPORT_HISTORY.ID }, true);
    public static final UniqueKey<StakeRegistrationRecord> STAKE_REGISTRATION_PKEY = Internal.createUniqueKey(StakeRegistration.STAKE_REGISTRATION, DSL.name("stake_registration_pkey"), new TableField[] { StakeRegistration.STAKE_REGISTRATION.ID }, true);
    public static final UniqueKey<StakeRegistrationRecord> UNIQUE_STAKE_REGISTRATION = Internal.createUniqueKey(StakeRegistration.STAKE_REGISTRATION, DSL.name("unique_stake_registration"), new TableField[] { StakeRegistration.STAKE_REGISTRATION.TX_ID, StakeRegistration.STAKE_REGISTRATION.CERT_INDEX }, true);
    public static final UniqueKey<StakeTxBalanceRecord> STAKE_TX_BALANCE_PKEY = Internal.createUniqueKey(StakeTxBalance.STAKE_TX_BALANCE, DSL.name("stake_tx_balance_pkey"), new TableField[] { StakeTxBalance.STAKE_TX_BALANCE.ID }, true);
    public static final UniqueKey<TokenInfoRecord> TOKEN_INFO_PKEY = Internal.createUniqueKey(TokenInfo.TOKEN_INFO, DSL.name("token_info_pkey"), new TableField[] { TokenInfo.TOKEN_INFO.ID }, true);
    public static final UniqueKey<TokenInfoRecord> UNIQUE_TOKEN_INFO = Internal.createUniqueKey(TokenInfo.TOKEN_INFO, DSL.name("unique_token_info"), new TableField[] { TokenInfo.TOKEN_INFO.IDENT }, true);
    public static final UniqueKey<TokenInfoCheckpointRecord> BLOCK_TOKEN_INFO_PKEY = Internal.createUniqueKey(TokenInfoCheckpoint.TOKEN_INFO_CHECKPOINT, DSL.name("block_token_info_pkey"), new TableField[] { TokenInfoCheckpoint.TOKEN_INFO_CHECKPOINT.ID }, true);
    public static final UniqueKey<TreasuryRecord> TREASURY_PKEY = Internal.createUniqueKey(Treasury.TREASURY, DSL.name("treasury_pkey"), new TableField[] { Treasury.TREASURY.ID }, true);
    public static final UniqueKey<TreasuryRecord> UNIQUE_TREASURY = Internal.createUniqueKey(Treasury.TREASURY, DSL.name("unique_treasury"), new TableField[] { Treasury.TREASURY.ADDR_ID, Treasury.TREASURY.TX_ID, Treasury.TREASURY.CERT_INDEX }, true);
    public static final UniqueKey<TxRecord> TX_PKEY = Internal.createUniqueKey(Tx.TX, DSL.name("tx_pkey"), new TableField[] { Tx.TX.ID }, true);
    public static final UniqueKey<TxRecord> UNIQUE_TX = Internal.createUniqueKey(Tx.TX, DSL.name("unique_tx"), new TableField[] { Tx.TX.HASH }, true);
    public static final UniqueKey<TxChartRecord> TX_CHART_PKEY = Internal.createUniqueKey(TxChart.TX_CHART, DSL.name("tx_chart_pkey"), new TableField[] { TxChart.TX_CHART.ID }, true);
    public static final UniqueKey<TxInRecord> TX_IN_PKEY = Internal.createUniqueKey(TxIn.TX_IN, DSL.name("tx_in_pkey"), new TableField[] { TxIn.TX_IN.ID }, true);
    public static final UniqueKey<TxInRecord> UNIQUE_TXIN = Internal.createUniqueKey(TxIn.TX_IN, DSL.name("unique_txin"), new TableField[] { TxIn.TX_IN.TX_OUT_ID, TxIn.TX_IN.TX_OUT_INDEX }, true);
    public static final UniqueKey<TxMetadataRecord> TX_METADATA_PKEY = Internal.createUniqueKey(TxMetadata.TX_METADATA, DSL.name("tx_metadata_pkey"), new TableField[] { TxMetadata.TX_METADATA.ID }, true);
    public static final UniqueKey<TxMetadataRecord> UNIQUE_TX_METADATA = Internal.createUniqueKey(TxMetadata.TX_METADATA, DSL.name("unique_tx_metadata"), new TableField[] { TxMetadata.TX_METADATA.KEY, TxMetadata.TX_METADATA.TX_ID }, true);
    public static final UniqueKey<TxMetadataHashRecord> TX_METADATA_HASH_PKEY = Internal.createUniqueKey(TxMetadataHash.TX_METADATA_HASH, DSL.name("tx_metadata_hash_pkey"), new TableField[] { TxMetadataHash.TX_METADATA_HASH.ID }, true);
    public static final UniqueKey<TxOutRecord> TX_OUT_PKEY = Internal.createUniqueKey(TxOut.TX_OUT, DSL.name("tx_out_pkey"), new TableField[] { TxOut.TX_OUT.ID }, true);
    public static final UniqueKey<TxOutRecord> UNIQUE_TXOUT = Internal.createUniqueKey(TxOut.TX_OUT, DSL.name("unique_txout"), new TableField[] { TxOut.TX_OUT.TX_ID, TxOut.TX_OUT.INDEX }, true);
    public static final UniqueKey<UnconsumeTxInRecord> UNCONSUME_TX_IN_PKEY = Internal.createUniqueKey(UnconsumeTxIn.UNCONSUME_TX_IN, DSL.name("unconsume_tx_in_pkey"), new TableField[] { UnconsumeTxIn.UNCONSUME_TX_IN.ID }, true);
    public static final UniqueKey<UnconsumeTxInRecord> UNIQUE_COL_TXIN = Internal.createUniqueKey(UnconsumeTxIn.UNCONSUME_TX_IN, DSL.name("unique_col_txin"), new TableField[] { UnconsumeTxIn.UNCONSUME_TX_IN.TX_IN_ID, UnconsumeTxIn.UNCONSUME_TX_IN.TX_OUT_ID, UnconsumeTxIn.UNCONSUME_TX_IN.TX_OUT_INDEX }, true);
    public static final UniqueKey<WithdrawalRecord> WITHDRAWAL_PKEY = Internal.createUniqueKey(Withdrawal.WITHDRAWAL, DSL.name("withdrawal_pkey"), new TableField[] { Withdrawal.WITHDRAWAL.ID }, true);
}
