/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables;


import java.math.BigInteger;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.cardanofoundation.ledgersync.jooq.DefaultSchema;
import org.cardanofoundation.ledgersync.jooq.Keys;
import org.cardanofoundation.ledgersync.jooq.tables.records.TokenInfoRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TokenInfo extends TableImpl<TokenInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>token_info</code>
     */
    public static final TokenInfo TOKEN_INFO = new TokenInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TokenInfoRecord> getRecordType() {
        return TokenInfoRecord.class;
    }

    /**
     * The column <code>token_info.id</code>.
     */
    public final TableField<TokenInfoRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>token_info.ident</code>.
     */
    public final TableField<TokenInfoRecord, Long> IDENT = createField(DSL.name("ident"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>token_info.number_of_holders</code>.
     */
    public final TableField<TokenInfoRecord, Long> NUMBER_OF_HOLDERS = createField(DSL.name("number_of_holders"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>token_info.volume_24h</code>.
     */
    public final TableField<TokenInfoRecord, BigInteger> VOLUME_24H = createField(DSL.name("volume_24h"), SQLDataType.DECIMAL_INTEGER(40), this, "");

    /**
     * The column <code>token_info.block_no</code>.
     */
    public final TableField<TokenInfoRecord, Long> BLOCK_NO = createField(DSL.name("block_no"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>token_info.update_time</code>.
     */
    public final TableField<TokenInfoRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(6), this, "");

    private TokenInfo(Name alias, Table<TokenInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private TokenInfo(Name alias, Table<TokenInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>token_info</code> table reference
     */
    public TokenInfo(String alias) {
        this(DSL.name(alias), TOKEN_INFO);
    }

    /**
     * Create an aliased <code>token_info</code> table reference
     */
    public TokenInfo(Name alias) {
        this(alias, TOKEN_INFO);
    }

    /**
     * Create a <code>token_info</code> table reference
     */
    public TokenInfo() {
        this(DSL.name("token_info"), null);
    }

    public <O extends Record> TokenInfo(Table<O> child, ForeignKey<O, TokenInfoRecord> key) {
        super(child, key, TOKEN_INFO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<TokenInfoRecord, Long> getIdentity() {
        return (Identity<TokenInfoRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TokenInfoRecord> getPrimaryKey() {
        return Keys.TOKEN_INFO_PKEY;
    }

    @Override
    public List<UniqueKey<TokenInfoRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_TOKEN_INFO);
    }

    @Override
    public TokenInfo as(String alias) {
        return new TokenInfo(DSL.name(alias), this);
    }

    @Override
    public TokenInfo as(Name alias) {
        return new TokenInfo(alias, this);
    }

    @Override
    public TokenInfo as(Table<?> alias) {
        return new TokenInfo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TokenInfo rename(String name) {
        return new TokenInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TokenInfo rename(Name name) {
        return new TokenInfo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TokenInfo rename(Table<?> name) {
        return new TokenInfo(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, Long, BigInteger, Long, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super Long, ? super Long, ? super BigInteger, ? super Long, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super Long, ? super Long, ? super BigInteger, ? super Long, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
