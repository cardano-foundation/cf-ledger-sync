/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.cardanofoundation.ledgersync.jooq.DefaultSchema;
import org.cardanofoundation.ledgersync.jooq.Indexes;
import org.cardanofoundation.ledgersync.jooq.Keys;
import org.cardanofoundation.ledgersync.jooq.tables.records.AggPoolInfoRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AggPoolInfo extends TableImpl<AggPoolInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>agg_pool_info</code>
     */
    public static final AggPoolInfo AGG_POOL_INFO = new AggPoolInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AggPoolInfoRecord> getRecordType() {
        return AggPoolInfoRecord.class;
    }

    /**
     * The column <code>agg_pool_info.id</code>.
     */
    public final TableField<AggPoolInfoRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>agg_pool_info.pool_id</code>.
     */
    public final TableField<AggPoolInfoRecord, Long> POOL_ID = createField(DSL.name("pool_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>agg_pool_info.block_in_epoch</code>.
     */
    public final TableField<AggPoolInfoRecord, Long> BLOCK_IN_EPOCH = createField(DSL.name("block_in_epoch"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>agg_pool_info.block_life_time</code>.
     */
    public final TableField<AggPoolInfoRecord, Long> BLOCK_LIFE_TIME = createField(DSL.name("block_life_time"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>agg_pool_info.delegator_cnt</code>.
     */
    public final TableField<AggPoolInfoRecord, Long> DELEGATOR_CNT = createField(DSL.name("delegator_cnt"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>agg_pool_info.block_check_point</code>.
     */
    public final TableField<AggPoolInfoRecord, Long> BLOCK_CHECK_POINT = createField(DSL.name("block_check_point"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>agg_pool_info.update_time</code>.
     */
    public final TableField<AggPoolInfoRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(6), this, "");

    private AggPoolInfo(Name alias, Table<AggPoolInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private AggPoolInfo(Name alias, Table<AggPoolInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>agg_pool_info</code> table reference
     */
    public AggPoolInfo(String alias) {
        this(DSL.name(alias), AGG_POOL_INFO);
    }

    /**
     * Create an aliased <code>agg_pool_info</code> table reference
     */
    public AggPoolInfo(Name alias) {
        this(alias, AGG_POOL_INFO);
    }

    /**
     * Create a <code>agg_pool_info</code> table reference
     */
    public AggPoolInfo() {
        this(DSL.name("agg_pool_info"), null);
    }

    public <O extends Record> AggPoolInfo(Table<O> child, ForeignKey<O, AggPoolInfoRecord> key) {
        super(child, key, AGG_POOL_INFO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.AGG_POOL_INFO_BLOCK_IN_EPOCH_IDX, Indexes.AGG_POOL_INFO_BLOCK_LIFE_TIME_IDX, Indexes.AGG_POOL_INFO_DELEGATOR_CNT_IDX, Indexes.EXAGG_POOL_INFO_POOL_ID_IDX);
    }

    @Override
    public Identity<AggPoolInfoRecord, Long> getIdentity() {
        return (Identity<AggPoolInfoRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AggPoolInfoRecord> getPrimaryKey() {
        return Keys.AGG_POOL_INFO_PKEY;
    }

    @Override
    public AggPoolInfo as(String alias) {
        return new AggPoolInfo(DSL.name(alias), this);
    }

    @Override
    public AggPoolInfo as(Name alias) {
        return new AggPoolInfo(alias, this);
    }

    @Override
    public AggPoolInfo as(Table<?> alias) {
        return new AggPoolInfo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AggPoolInfo rename(String name) {
        return new AggPoolInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AggPoolInfo rename(Name name) {
        return new AggPoolInfo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AggPoolInfo rename(Table<?> name) {
        return new AggPoolInfo(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, Long, Long, Long, Long, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
