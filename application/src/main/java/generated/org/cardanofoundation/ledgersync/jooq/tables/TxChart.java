/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.cardanofoundation.ledgersync.jooq.DefaultSchema;
import org.cardanofoundation.ledgersync.jooq.Indexes;
import org.cardanofoundation.ledgersync.jooq.Keys;
import org.cardanofoundation.ledgersync.jooq.tables.records.TxChartRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TxChart extends TableImpl<TxChartRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tx_chart</code>
     */
    public static final TxChart TX_CHART = new TxChart();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TxChartRecord> getRecordType() {
        return TxChartRecord.class;
    }

    /**
     * The column <code>tx_chart.id</code>.
     */
    public final TableField<TxChartRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>tx_chart.day</code>.
     */
    public final TableField<TxChartRecord, Long> DAY = createField(DSL.name("day"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>tx_chart.hour</code>.
     */
    public final TableField<TxChartRecord, Long> HOUR = createField(DSL.name("hour"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>tx_chart.minute</code>.
     */
    public final TableField<TxChartRecord, Long> MINUTE = createField(DSL.name("minute"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>tx_chart.month</code>.
     */
    public final TableField<TxChartRecord, Long> MONTH = createField(DSL.name("month"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>tx_chart.tx_count</code>.
     */
    public final TableField<TxChartRecord, Long> TX_COUNT = createField(DSL.name("tx_count"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>tx_chart.tx_simple</code>.
     */
    public final TableField<TxChartRecord, Long> TX_SIMPLE = createField(DSL.name("tx_simple"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>tx_chart.tx_with_metadata_without_sc</code>.
     */
    public final TableField<TxChartRecord, Long> TX_WITH_METADATA_WITHOUT_SC = createField(DSL.name("tx_with_metadata_without_sc"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>tx_chart.tx_with_sc</code>.
     */
    public final TableField<TxChartRecord, Long> TX_WITH_SC = createField(DSL.name("tx_with_sc"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>tx_chart.year</code>.
     */
    public final TableField<TxChartRecord, Long> YEAR = createField(DSL.name("year"), SQLDataType.BIGINT.nullable(false), this, "");

    private TxChart(Name alias, Table<TxChartRecord> aliased) {
        this(alias, aliased, null);
    }

    private TxChart(Name alias, Table<TxChartRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>tx_chart</code> table reference
     */
    public TxChart(String alias) {
        this(DSL.name(alias), TX_CHART);
    }

    /**
     * Create an aliased <code>tx_chart</code> table reference
     */
    public TxChart(Name alias) {
        this(alias, TX_CHART);
    }

    /**
     * Create a <code>tx_chart</code> table reference
     */
    public TxChart() {
        this(DSL.name("tx_chart"), null);
    }

    public <O extends Record> TxChart(Table<O> child, ForeignKey<O, TxChartRecord> key) {
        super(child, key, TX_CHART);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_TX_CHART_DAY, Indexes.IDX_TX_CHART_HOUR, Indexes.IDX_TX_CHART_MINUTE, Indexes.IDX_TX_CHART_MONTH);
    }

    @Override
    public Identity<TxChartRecord, Long> getIdentity() {
        return (Identity<TxChartRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TxChartRecord> getPrimaryKey() {
        return Keys.TX_CHART_PKEY;
    }

    @Override
    public TxChart as(String alias) {
        return new TxChart(DSL.name(alias), this);
    }

    @Override
    public TxChart as(Name alias) {
        return new TxChart(alias, this);
    }

    @Override
    public TxChart as(Table<?> alias) {
        return new TxChart(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TxChart rename(String name) {
        return new TxChart(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TxChart rename(Name name) {
        return new TxChart(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TxChart rename(Table<?> name) {
        return new TxChart(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Long, Long, Long, Long, Long, Long, Long, Long, Long> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
