/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables;


import java.math.BigInteger;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.cardanofoundation.ledgersync.jooq.DefaultSchema;
import org.cardanofoundation.ledgersync.jooq.Keys;
import org.cardanofoundation.ledgersync.jooq.tables.records.AdaPotsRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AdaPots extends TableImpl<AdaPotsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ada_pots</code>
     */
    public static final AdaPots ADA_POTS = new AdaPots();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdaPotsRecord> getRecordType() {
        return AdaPotsRecord.class;
    }

    /**
     * The column <code>ada_pots.id</code>.
     */
    public final TableField<AdaPotsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>ada_pots.deposits</code>.
     */
    public final TableField<AdaPotsRecord, BigInteger> DEPOSITS = createField(DSL.name("deposits"), SQLDataType.DECIMAL_INTEGER(20).nullable(false), this, "");

    /**
     * The column <code>ada_pots.epoch_no</code>.
     */
    public final TableField<AdaPotsRecord, Integer> EPOCH_NO = createField(DSL.name("epoch_no"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ada_pots.fees</code>.
     */
    public final TableField<AdaPotsRecord, BigInteger> FEES = createField(DSL.name("fees"), SQLDataType.DECIMAL_INTEGER(20).nullable(false), this, "");

    /**
     * The column <code>ada_pots.reserves</code>.
     */
    public final TableField<AdaPotsRecord, BigInteger> RESERVES = createField(DSL.name("reserves"), SQLDataType.DECIMAL_INTEGER(20).nullable(false), this, "");

    /**
     * The column <code>ada_pots.rewards</code>.
     */
    public final TableField<AdaPotsRecord, BigInteger> REWARDS = createField(DSL.name("rewards"), SQLDataType.DECIMAL_INTEGER(20).nullable(false), this, "");

    /**
     * The column <code>ada_pots.slot_no</code>.
     */
    public final TableField<AdaPotsRecord, Long> SLOT_NO = createField(DSL.name("slot_no"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>ada_pots.treasury</code>.
     */
    public final TableField<AdaPotsRecord, BigInteger> TREASURY = createField(DSL.name("treasury"), SQLDataType.DECIMAL_INTEGER(20).nullable(false), this, "");

    /**
     * The column <code>ada_pots.utxo</code>.
     */
    public final TableField<AdaPotsRecord, BigInteger> UTXO = createField(DSL.name("utxo"), SQLDataType.DECIMAL_INTEGER(20).nullable(false), this, "");

    /**
     * The column <code>ada_pots.block_id</code>.
     */
    public final TableField<AdaPotsRecord, Long> BLOCK_ID = createField(DSL.name("block_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private AdaPots(Name alias, Table<AdaPotsRecord> aliased) {
        this(alias, aliased, null);
    }

    private AdaPots(Name alias, Table<AdaPotsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ada_pots</code> table reference
     */
    public AdaPots(String alias) {
        this(DSL.name(alias), ADA_POTS);
    }

    /**
     * Create an aliased <code>ada_pots</code> table reference
     */
    public AdaPots(Name alias) {
        this(alias, ADA_POTS);
    }

    /**
     * Create a <code>ada_pots</code> table reference
     */
    public AdaPots() {
        this(DSL.name("ada_pots"), null);
    }

    public <O extends Record> AdaPots(Table<O> child, ForeignKey<O, AdaPotsRecord> key) {
        super(child, key, ADA_POTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<AdaPotsRecord, Long> getIdentity() {
        return (Identity<AdaPotsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AdaPotsRecord> getPrimaryKey() {
        return Keys.ADA_POTS_PKEY;
    }

    @Override
    public List<UniqueKey<AdaPotsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UK_ADA_POTS_BLOCK_ID, Keys.UNIQUE_ADA_POTS);
    }

    @Override
    public AdaPots as(String alias) {
        return new AdaPots(DSL.name(alias), this);
    }

    @Override
    public AdaPots as(Name alias) {
        return new AdaPots(alias, this);
    }

    @Override
    public AdaPots as(Table<?> alias) {
        return new AdaPots(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AdaPots rename(String name) {
        return new AdaPots(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AdaPots rename(Name name) {
        return new AdaPots(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AdaPots rename(Table<?> name) {
        return new AdaPots(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, BigInteger, Integer, BigInteger, BigInteger, BigInteger, Long, BigInteger, BigInteger, Long> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Long, ? super BigInteger, ? super Integer, ? super BigInteger, ? super BigInteger, ? super BigInteger, ? super Long, ? super BigInteger, ? super BigInteger, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Long, ? super BigInteger, ? super Integer, ? super BigInteger, ? super BigInteger, ? super BigInteger, ? super Long, ? super BigInteger, ? super BigInteger, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
