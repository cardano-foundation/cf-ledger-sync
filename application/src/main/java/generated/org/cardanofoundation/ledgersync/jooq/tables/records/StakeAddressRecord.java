/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables.records;


import java.math.BigInteger;

import org.cardanofoundation.ledgersync.jooq.tables.StakeAddress;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StakeAddressRecord extends UpdatableRecordImpl<StakeAddressRecord> implements Record6<Long, String, String, String, BigInteger, BigInteger> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>stake_address.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>stake_address.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>stake_address.hash_raw</code>.
     */
    public void setHashRaw(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>stake_address.hash_raw</code>.
     */
    public String getHashRaw() {
        return (String) get(1);
    }

    /**
     * Setter for <code>stake_address.script_hash</code>.
     */
    public void setScriptHash(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>stake_address.script_hash</code>.
     */
    public String getScriptHash() {
        return (String) get(2);
    }

    /**
     * Setter for <code>stake_address.view</code>.
     */
    public void setView(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>stake_address.view</code>.
     */
    public String getView() {
        return (String) get(3);
    }

    /**
     * Setter for <code>stake_address.balance</code>.
     */
    public void setBalance(BigInteger value) {
        set(4, value);
    }

    /**
     * Getter for <code>stake_address.balance</code>.
     */
    public BigInteger getBalance() {
        return (BigInteger) get(4);
    }

    /**
     * Setter for <code>stake_address.available_reward</code>.
     */
    public void setAvailableReward(BigInteger value) {
        set(5, value);
    }

    /**
     * Getter for <code>stake_address.available_reward</code>.
     */
    public BigInteger getAvailableReward() {
        return (BigInteger) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, String, BigInteger, BigInteger> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<Long, String, String, String, BigInteger, BigInteger> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return StakeAddress.STAKE_ADDRESS.ID;
    }

    @Override
    public Field<String> field2() {
        return StakeAddress.STAKE_ADDRESS.HASH_RAW;
    }

    @Override
    public Field<String> field3() {
        return StakeAddress.STAKE_ADDRESS.SCRIPT_HASH;
    }

    @Override
    public Field<String> field4() {
        return StakeAddress.STAKE_ADDRESS.VIEW;
    }

    @Override
    public Field<BigInteger> field5() {
        return StakeAddress.STAKE_ADDRESS.BALANCE;
    }

    @Override
    public Field<BigInteger> field6() {
        return StakeAddress.STAKE_ADDRESS.AVAILABLE_REWARD;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getHashRaw();
    }

    @Override
    public String component3() {
        return getScriptHash();
    }

    @Override
    public String component4() {
        return getView();
    }

    @Override
    public BigInteger component5() {
        return getBalance();
    }

    @Override
    public BigInteger component6() {
        return getAvailableReward();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getHashRaw();
    }

    @Override
    public String value3() {
        return getScriptHash();
    }

    @Override
    public String value4() {
        return getView();
    }

    @Override
    public BigInteger value5() {
        return getBalance();
    }

    @Override
    public BigInteger value6() {
        return getAvailableReward();
    }

    @Override
    public StakeAddressRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public StakeAddressRecord value2(String value) {
        setHashRaw(value);
        return this;
    }

    @Override
    public StakeAddressRecord value3(String value) {
        setScriptHash(value);
        return this;
    }

    @Override
    public StakeAddressRecord value4(String value) {
        setView(value);
        return this;
    }

    @Override
    public StakeAddressRecord value5(BigInteger value) {
        setBalance(value);
        return this;
    }

    @Override
    public StakeAddressRecord value6(BigInteger value) {
        setAvailableReward(value);
        return this;
    }

    @Override
    public StakeAddressRecord values(Long value1, String value2, String value3, String value4, BigInteger value5, BigInteger value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached StakeAddressRecord
     */
    public StakeAddressRecord() {
        super(StakeAddress.STAKE_ADDRESS);
    }

    /**
     * Create a detached, initialised StakeAddressRecord
     */
    public StakeAddressRecord(Long id, String hashRaw, String scriptHash, String view, BigInteger balance, BigInteger availableReward) {
        super(StakeAddress.STAKE_ADDRESS);

        setId(id);
        setHashRaw(hashRaw);
        setScriptHash(scriptHash);
        setView(view);
        setBalance(balance);
        setAvailableReward(availableReward);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised StakeAddressRecord
     */
    public StakeAddressRecord(org.cardanofoundation.ledgersync.jooq.tables.pojos.StakeAddress value) {
        super(StakeAddress.STAKE_ADDRESS);

        if (value != null) {
            setId(value.getId());
            setHashRaw(value.getHashRaw());
            setScriptHash(value.getScriptHash());
            setView(value.getView());
            setBalance(value.getBalance());
            setAvailableReward(value.getAvailableReward());
            resetChangedOnNotNull();
        }
    }
}
