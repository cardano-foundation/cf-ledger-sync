/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables.records;


import java.time.LocalDateTime;

import org.cardanofoundation.ledgersync.jooq.tables.TokenInfoCheckpoint;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TokenInfoCheckpointRecord extends UpdatableRecordImpl<TokenInfoCheckpointRecord> implements Record3<Long, Long, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>token_info_checkpoint.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>token_info_checkpoint.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>token_info_checkpoint.block_no</code>.
     */
    public void setBlockNo(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>token_info_checkpoint.block_no</code>.
     */
    public Long getBlockNo() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>token_info_checkpoint.update_time</code>.
     */
    public void setUpdateTime(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>token_info_checkpoint.update_time</code>.
     */
    public LocalDateTime getUpdateTime() {
        return (LocalDateTime) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, Long, LocalDateTime> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return TokenInfoCheckpoint.TOKEN_INFO_CHECKPOINT.ID;
    }

    @Override
    public Field<Long> field2() {
        return TokenInfoCheckpoint.TOKEN_INFO_CHECKPOINT.BLOCK_NO;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return TokenInfoCheckpoint.TOKEN_INFO_CHECKPOINT.UPDATE_TIME;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getBlockNo();
    }

    @Override
    public LocalDateTime component3() {
        return getUpdateTime();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getBlockNo();
    }

    @Override
    public LocalDateTime value3() {
        return getUpdateTime();
    }

    @Override
    public TokenInfoCheckpointRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public TokenInfoCheckpointRecord value2(Long value) {
        setBlockNo(value);
        return this;
    }

    @Override
    public TokenInfoCheckpointRecord value3(LocalDateTime value) {
        setUpdateTime(value);
        return this;
    }

    @Override
    public TokenInfoCheckpointRecord values(Long value1, Long value2, LocalDateTime value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TokenInfoCheckpointRecord
     */
    public TokenInfoCheckpointRecord() {
        super(TokenInfoCheckpoint.TOKEN_INFO_CHECKPOINT);
    }

    /**
     * Create a detached, initialised TokenInfoCheckpointRecord
     */
    public TokenInfoCheckpointRecord(Long id, Long blockNo, LocalDateTime updateTime) {
        super(TokenInfoCheckpoint.TOKEN_INFO_CHECKPOINT);

        setId(id);
        setBlockNo(blockNo);
        setUpdateTime(updateTime);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised TokenInfoCheckpointRecord
     */
    public TokenInfoCheckpointRecord(org.cardanofoundation.ledgersync.jooq.tables.pojos.TokenInfoCheckpoint value) {
        super(TokenInfoCheckpoint.TOKEN_INFO_CHECKPOINT);

        if (value != null) {
            setId(value.getId());
            setBlockNo(value.getBlockNo());
            setUpdateTime(value.getUpdateTime());
            resetChangedOnNotNull();
        }
    }
}
