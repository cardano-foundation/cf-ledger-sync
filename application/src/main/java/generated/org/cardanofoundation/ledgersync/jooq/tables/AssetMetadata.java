/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.cardanofoundation.ledgersync.jooq.DefaultSchema;
import org.cardanofoundation.ledgersync.jooq.Indexes;
import org.cardanofoundation.ledgersync.jooq.Keys;
import org.cardanofoundation.ledgersync.jooq.tables.records.AssetMetadataRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AssetMetadata extends TableImpl<AssetMetadataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>asset_metadata</code>
     */
    public static final AssetMetadata ASSET_METADATA = new AssetMetadata();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AssetMetadataRecord> getRecordType() {
        return AssetMetadataRecord.class;
    }

    /**
     * The column <code>asset_metadata.id</code>.
     */
    public final TableField<AssetMetadataRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>asset_metadata.decimals</code>.
     */
    public final TableField<AssetMetadataRecord, Integer> DECIMALS = createField(DSL.name("decimals"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>asset_metadata.description</code>.
     */
    public final TableField<AssetMetadataRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(65535).nullable(false), this, "");

    /**
     * The column <code>asset_metadata.logo</code>.
     */
    public final TableField<AssetMetadataRecord, String> LOGO = createField(DSL.name("logo"), SQLDataType.VARCHAR(100000), this, "");

    /**
     * The column <code>asset_metadata.name</code>.
     */
    public final TableField<AssetMetadataRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>asset_metadata.policy</code>.
     */
    public final TableField<AssetMetadataRecord, String> POLICY = createField(DSL.name("policy"), SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>asset_metadata.subject</code>.
     */
    public final TableField<AssetMetadataRecord, String> SUBJECT = createField(DSL.name("subject"), SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>asset_metadata.ticker</code>.
     */
    public final TableField<AssetMetadataRecord, String> TICKER = createField(DSL.name("ticker"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>asset_metadata.url</code>.
     */
    public final TableField<AssetMetadataRecord, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR(2048), this, "");

    /**
     * The column <code>asset_metadata.ident</code>.
     */
    public final TableField<AssetMetadataRecord, Long> IDENT = createField(DSL.name("ident"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>asset_metadata.logo_hash</code>.
     */
    public final TableField<AssetMetadataRecord, String> LOGO_HASH = createField(DSL.name("logo_hash"), SQLDataType.VARCHAR(64), this, "");

    private AssetMetadata(Name alias, Table<AssetMetadataRecord> aliased) {
        this(alias, aliased, null);
    }

    private AssetMetadata(Name alias, Table<AssetMetadataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>asset_metadata</code> table reference
     */
    public AssetMetadata(String alias) {
        this(DSL.name(alias), ASSET_METADATA);
    }

    /**
     * Create an aliased <code>asset_metadata</code> table reference
     */
    public AssetMetadata(Name alias) {
        this(alias, ASSET_METADATA);
    }

    /**
     * Create a <code>asset_metadata</code> table reference
     */
    public AssetMetadata() {
        this(DSL.name("asset_metadata"), null);
    }

    public <O extends Record> AssetMetadata(Table<O> child, ForeignKey<O, AssetMetadataRecord> key) {
        super(child, key, ASSET_METADATA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ASSET_METADATA_SUBJECT_IDX, Indexes.ASSET_METADATA_UX);
    }

    @Override
    public Identity<AssetMetadataRecord, Long> getIdentity() {
        return (Identity<AssetMetadataRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AssetMetadataRecord> getPrimaryKey() {
        return Keys.ASSET_METADATA_PKEY;
    }

    @Override
    public AssetMetadata as(String alias) {
        return new AssetMetadata(DSL.name(alias), this);
    }

    @Override
    public AssetMetadata as(Name alias) {
        return new AssetMetadata(alias, this);
    }

    @Override
    public AssetMetadata as(Table<?> alias) {
        return new AssetMetadata(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AssetMetadata rename(String name) {
        return new AssetMetadata(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AssetMetadata rename(Name name) {
        return new AssetMetadata(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AssetMetadata rename(Table<?> name) {
        return new AssetMetadata(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, Integer, String, String, String, String, String, String, String, Long, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super Long, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super Long, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
