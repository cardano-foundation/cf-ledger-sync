/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables;


import java.math.BigInteger;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.cardanofoundation.ledgersync.jooq.DefaultSchema;
import org.cardanofoundation.ledgersync.jooq.Indexes;
import org.cardanofoundation.ledgersync.jooq.Keys;
import org.cardanofoundation.ledgersync.jooq.tables.records.RewardRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Reward extends TableImpl<RewardRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>reward</code>
     */
    public static final Reward REWARD = new Reward();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RewardRecord> getRecordType() {
        return RewardRecord.class;
    }

    /**
     * The column <code>reward.id</code>.
     */
    public final TableField<RewardRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>reward.amount</code>.
     */
    public final TableField<RewardRecord, BigInteger> AMOUNT = createField(DSL.name("amount"), SQLDataType.DECIMAL_INTEGER(20).nullable(false), this, "");

    /**
     * The column <code>reward.earned_epoch</code>.
     */
    public final TableField<RewardRecord, Long> EARNED_EPOCH = createField(DSL.name("earned_epoch"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>reward.spendable_epoch</code>.
     */
    public final TableField<RewardRecord, Long> SPENDABLE_EPOCH = createField(DSL.name("spendable_epoch"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>reward.type</code>.
     */
    public final TableField<RewardRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>reward.addr_id</code>.
     */
    public final TableField<RewardRecord, Long> ADDR_ID = createField(DSL.name("addr_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>reward.pool_id</code>.
     */
    public final TableField<RewardRecord, Long> POOL_ID = createField(DSL.name("pool_id"), SQLDataType.BIGINT, this, "");

    private Reward(Name alias, Table<RewardRecord> aliased) {
        this(alias, aliased, null);
    }

    private Reward(Name alias, Table<RewardRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>reward</code> table reference
     */
    public Reward(String alias) {
        this(DSL.name(alias), REWARD);
    }

    /**
     * Create an aliased <code>reward</code> table reference
     */
    public Reward(Name alias) {
        this(alias, REWARD);
    }

    /**
     * Create a <code>reward</code> table reference
     */
    public Reward() {
        this(DSL.name("reward"), null);
    }

    public <O extends Record> Reward(Table<O> child, ForeignKey<O, RewardRecord> key) {
        super(child, key, REWARD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_REWARD_ADDR_ID, Indexes.IDX_REWARD_EARNED_EPOCH, Indexes.IDX_REWARD_POOL_ID, Indexes.REWARD_ADDR_ID_IDX, Indexes.REWARD_EARNED_EPOCH_IDX, Indexes.REWARD_POOL_ID_IDX, Indexes.REWARD_SPENDABLE_EPOCH_IDX, Indexes.REWARD_TYPE_IDX);
    }

    @Override
    public Identity<RewardRecord, Long> getIdentity() {
        return (Identity<RewardRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<RewardRecord> getPrimaryKey() {
        return Keys.REWARD_PKEY;
    }

    @Override
    public List<UniqueKey<RewardRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_REWARD);
    }

    @Override
    public Reward as(String alias) {
        return new Reward(DSL.name(alias), this);
    }

    @Override
    public Reward as(Name alias) {
        return new Reward(alias, this);
    }

    @Override
    public Reward as(Table<?> alias) {
        return new Reward(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Reward rename(String name) {
        return new Reward(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Reward rename(Name name) {
        return new Reward(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Reward rename(Table<?> name) {
        return new Reward(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, BigInteger, Long, Long, String, Long, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super BigInteger, ? super Long, ? super Long, ? super String, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super BigInteger, ? super Long, ? super Long, ? super String, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
