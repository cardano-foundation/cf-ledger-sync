/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables.records;


import java.math.BigInteger;
import java.time.LocalDateTime;

import org.cardanofoundation.ledgersync.jooq.tables.Epoch;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record11;
import org.jooq.Row11;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EpochRecord extends UpdatableRecordImpl<EpochRecord> implements Record11<Long, Integer, LocalDateTime, BigInteger, Integer, Integer, BigInteger, LocalDateTime, Integer, Integer, BigInteger> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>epoch.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>epoch.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>epoch.blk_count</code>.
     */
    public void setBlkCount(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>epoch.blk_count</code>.
     */
    public Integer getBlkCount() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>epoch.end_time</code>.
     */
    public void setEndTime(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>epoch.end_time</code>.
     */
    public LocalDateTime getEndTime() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>epoch.fees</code>.
     */
    public void setFees(BigInteger value) {
        set(3, value);
    }

    /**
     * Getter for <code>epoch.fees</code>.
     */
    public BigInteger getFees() {
        return (BigInteger) get(3);
    }

    /**
     * Setter for <code>epoch.max_slot</code>.
     */
    public void setMaxSlot(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>epoch.max_slot</code>.
     */
    public Integer getMaxSlot() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>epoch.no</code>.
     */
    public void setNo(Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>epoch.no</code>.
     */
    public Integer getNo() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>epoch.out_sum</code>.
     */
    public void setOutSum(BigInteger value) {
        set(6, value);
    }

    /**
     * Getter for <code>epoch.out_sum</code>.
     */
    public BigInteger getOutSum() {
        return (BigInteger) get(6);
    }

    /**
     * Setter for <code>epoch.start_time</code>.
     */
    public void setStartTime(LocalDateTime value) {
        set(7, value);
    }

    /**
     * Getter for <code>epoch.start_time</code>.
     */
    public LocalDateTime getStartTime() {
        return (LocalDateTime) get(7);
    }

    /**
     * Setter for <code>epoch.tx_count</code>.
     */
    public void setTxCount(Integer value) {
        set(8, value);
    }

    /**
     * Getter for <code>epoch.tx_count</code>.
     */
    public Integer getTxCount() {
        return (Integer) get(8);
    }

    /**
     * Setter for <code>epoch.era</code>.
     */
    public void setEra(Integer value) {
        set(9, value);
    }

    /**
     * Getter for <code>epoch.era</code>.
     */
    public Integer getEra() {
        return (Integer) get(9);
    }

    /**
     * Setter for <code>epoch.rewards_distributed</code>.
     */
    public void setRewardsDistributed(BigInteger value) {
        set(10, value);
    }

    /**
     * Getter for <code>epoch.rewards_distributed</code>.
     */
    public BigInteger getRewardsDistributed() {
        return (BigInteger) get(10);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record11 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, Integer, LocalDateTime, BigInteger, Integer, Integer, BigInteger, LocalDateTime, Integer, Integer, BigInteger> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    @Override
    public Row11<Long, Integer, LocalDateTime, BigInteger, Integer, Integer, BigInteger, LocalDateTime, Integer, Integer, BigInteger> valuesRow() {
        return (Row11) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Epoch.EPOCH.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Epoch.EPOCH.BLK_COUNT;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return Epoch.EPOCH.END_TIME;
    }

    @Override
    public Field<BigInteger> field4() {
        return Epoch.EPOCH.FEES;
    }

    @Override
    public Field<Integer> field5() {
        return Epoch.EPOCH.MAX_SLOT;
    }

    @Override
    public Field<Integer> field6() {
        return Epoch.EPOCH.NO;
    }

    @Override
    public Field<BigInteger> field7() {
        return Epoch.EPOCH.OUT_SUM;
    }

    @Override
    public Field<LocalDateTime> field8() {
        return Epoch.EPOCH.START_TIME;
    }

    @Override
    public Field<Integer> field9() {
        return Epoch.EPOCH.TX_COUNT;
    }

    @Override
    public Field<Integer> field10() {
        return Epoch.EPOCH.ERA;
    }

    @Override
    public Field<BigInteger> field11() {
        return Epoch.EPOCH.REWARDS_DISTRIBUTED;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getBlkCount();
    }

    @Override
    public LocalDateTime component3() {
        return getEndTime();
    }

    @Override
    public BigInteger component4() {
        return getFees();
    }

    @Override
    public Integer component5() {
        return getMaxSlot();
    }

    @Override
    public Integer component6() {
        return getNo();
    }

    @Override
    public BigInteger component7() {
        return getOutSum();
    }

    @Override
    public LocalDateTime component8() {
        return getStartTime();
    }

    @Override
    public Integer component9() {
        return getTxCount();
    }

    @Override
    public Integer component10() {
        return getEra();
    }

    @Override
    public BigInteger component11() {
        return getRewardsDistributed();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getBlkCount();
    }

    @Override
    public LocalDateTime value3() {
        return getEndTime();
    }

    @Override
    public BigInteger value4() {
        return getFees();
    }

    @Override
    public Integer value5() {
        return getMaxSlot();
    }

    @Override
    public Integer value6() {
        return getNo();
    }

    @Override
    public BigInteger value7() {
        return getOutSum();
    }

    @Override
    public LocalDateTime value8() {
        return getStartTime();
    }

    @Override
    public Integer value9() {
        return getTxCount();
    }

    @Override
    public Integer value10() {
        return getEra();
    }

    @Override
    public BigInteger value11() {
        return getRewardsDistributed();
    }

    @Override
    public EpochRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public EpochRecord value2(Integer value) {
        setBlkCount(value);
        return this;
    }

    @Override
    public EpochRecord value3(LocalDateTime value) {
        setEndTime(value);
        return this;
    }

    @Override
    public EpochRecord value4(BigInteger value) {
        setFees(value);
        return this;
    }

    @Override
    public EpochRecord value5(Integer value) {
        setMaxSlot(value);
        return this;
    }

    @Override
    public EpochRecord value6(Integer value) {
        setNo(value);
        return this;
    }

    @Override
    public EpochRecord value7(BigInteger value) {
        setOutSum(value);
        return this;
    }

    @Override
    public EpochRecord value8(LocalDateTime value) {
        setStartTime(value);
        return this;
    }

    @Override
    public EpochRecord value9(Integer value) {
        setTxCount(value);
        return this;
    }

    @Override
    public EpochRecord value10(Integer value) {
        setEra(value);
        return this;
    }

    @Override
    public EpochRecord value11(BigInteger value) {
        setRewardsDistributed(value);
        return this;
    }

    @Override
    public EpochRecord values(Long value1, Integer value2, LocalDateTime value3, BigInteger value4, Integer value5, Integer value6, BigInteger value7, LocalDateTime value8, Integer value9, Integer value10, BigInteger value11) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached EpochRecord
     */
    public EpochRecord() {
        super(Epoch.EPOCH);
    }

    /**
     * Create a detached, initialised EpochRecord
     */
    public EpochRecord(Long id, Integer blkCount, LocalDateTime endTime, BigInteger fees, Integer maxSlot, Integer no, BigInteger outSum, LocalDateTime startTime, Integer txCount, Integer era, BigInteger rewardsDistributed) {
        super(Epoch.EPOCH);

        setId(id);
        setBlkCount(blkCount);
        setEndTime(endTime);
        setFees(fees);
        setMaxSlot(maxSlot);
        setNo(no);
        setOutSum(outSum);
        setStartTime(startTime);
        setTxCount(txCount);
        setEra(era);
        setRewardsDistributed(rewardsDistributed);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised EpochRecord
     */
    public EpochRecord(org.cardanofoundation.ledgersync.jooq.tables.pojos.Epoch value) {
        super(Epoch.EPOCH);

        if (value != null) {
            setId(value.getId());
            setBlkCount(value.getBlkCount());
            setEndTime(value.getEndTime());
            setFees(value.getFees());
            setMaxSlot(value.getMaxSlot());
            setNo(value.getNo());
            setOutSum(value.getOutSum());
            setStartTime(value.getStartTime());
            setTxCount(value.getTxCount());
            setEra(value.getEra());
            setRewardsDistributed(value.getRewardsDistributed());
            resetChangedOnNotNull();
        }
    }
}
