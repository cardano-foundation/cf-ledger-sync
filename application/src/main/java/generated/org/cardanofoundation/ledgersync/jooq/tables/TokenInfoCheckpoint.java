/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables;


import java.time.LocalDateTime;
import java.util.function.Function;

import org.cardanofoundation.ledgersync.jooq.DefaultSchema;
import org.cardanofoundation.ledgersync.jooq.Keys;
import org.cardanofoundation.ledgersync.jooq.tables.records.TokenInfoCheckpointRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TokenInfoCheckpoint extends TableImpl<TokenInfoCheckpointRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>token_info_checkpoint</code>
     */
    public static final TokenInfoCheckpoint TOKEN_INFO_CHECKPOINT = new TokenInfoCheckpoint();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TokenInfoCheckpointRecord> getRecordType() {
        return TokenInfoCheckpointRecord.class;
    }

    /**
     * The column <code>token_info_checkpoint.id</code>.
     */
    public final TableField<TokenInfoCheckpointRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>token_info_checkpoint.block_no</code>.
     */
    public final TableField<TokenInfoCheckpointRecord, Long> BLOCK_NO = createField(DSL.name("block_no"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>token_info_checkpoint.update_time</code>.
     */
    public final TableField<TokenInfoCheckpointRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(6), this, "");

    private TokenInfoCheckpoint(Name alias, Table<TokenInfoCheckpointRecord> aliased) {
        this(alias, aliased, null);
    }

    private TokenInfoCheckpoint(Name alias, Table<TokenInfoCheckpointRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>token_info_checkpoint</code> table reference
     */
    public TokenInfoCheckpoint(String alias) {
        this(DSL.name(alias), TOKEN_INFO_CHECKPOINT);
    }

    /**
     * Create an aliased <code>token_info_checkpoint</code> table reference
     */
    public TokenInfoCheckpoint(Name alias) {
        this(alias, TOKEN_INFO_CHECKPOINT);
    }

    /**
     * Create a <code>token_info_checkpoint</code> table reference
     */
    public TokenInfoCheckpoint() {
        this(DSL.name("token_info_checkpoint"), null);
    }

    public <O extends Record> TokenInfoCheckpoint(Table<O> child, ForeignKey<O, TokenInfoCheckpointRecord> key) {
        super(child, key, TOKEN_INFO_CHECKPOINT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<TokenInfoCheckpointRecord, Long> getIdentity() {
        return (Identity<TokenInfoCheckpointRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TokenInfoCheckpointRecord> getPrimaryKey() {
        return Keys.BLOCK_TOKEN_INFO_PKEY;
    }

    @Override
    public TokenInfoCheckpoint as(String alias) {
        return new TokenInfoCheckpoint(DSL.name(alias), this);
    }

    @Override
    public TokenInfoCheckpoint as(Name alias) {
        return new TokenInfoCheckpoint(alias, this);
    }

    @Override
    public TokenInfoCheckpoint as(Table<?> alias) {
        return new TokenInfoCheckpoint(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TokenInfoCheckpoint rename(String name) {
        return new TokenInfoCheckpoint(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TokenInfoCheckpoint rename(Name name) {
        return new TokenInfoCheckpoint(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TokenInfoCheckpoint rename(Table<?> name) {
        return new TokenInfoCheckpoint(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super Long, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super Long, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
