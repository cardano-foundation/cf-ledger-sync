/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables.records;


import java.math.BigInteger;
import java.time.LocalDateTime;

import org.cardanofoundation.ledgersync.jooq.tables.TokenInfo;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TokenInfoRecord extends UpdatableRecordImpl<TokenInfoRecord> implements Record6<Long, Long, Long, BigInteger, Long, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>token_info.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>token_info.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>token_info.ident</code>.
     */
    public void setIdent(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>token_info.ident</code>.
     */
    public Long getIdent() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>token_info.number_of_holders</code>.
     */
    public void setNumberOfHolders(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>token_info.number_of_holders</code>.
     */
    public Long getNumberOfHolders() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>token_info.volume_24h</code>.
     */
    public void setVolume_24h(BigInteger value) {
        set(3, value);
    }

    /**
     * Getter for <code>token_info.volume_24h</code>.
     */
    public BigInteger getVolume_24h() {
        return (BigInteger) get(3);
    }

    /**
     * Setter for <code>token_info.block_no</code>.
     */
    public void setBlockNo(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>token_info.block_no</code>.
     */
    public Long getBlockNo() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>token_info.update_time</code>.
     */
    public void setUpdateTime(LocalDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>token_info.update_time</code>.
     */
    public LocalDateTime getUpdateTime() {
        return (LocalDateTime) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, Long, BigInteger, Long, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<Long, Long, Long, BigInteger, Long, LocalDateTime> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return TokenInfo.TOKEN_INFO.ID;
    }

    @Override
    public Field<Long> field2() {
        return TokenInfo.TOKEN_INFO.IDENT;
    }

    @Override
    public Field<Long> field3() {
        return TokenInfo.TOKEN_INFO.NUMBER_OF_HOLDERS;
    }

    @Override
    public Field<BigInteger> field4() {
        return TokenInfo.TOKEN_INFO.VOLUME_24H;
    }

    @Override
    public Field<Long> field5() {
        return TokenInfo.TOKEN_INFO.BLOCK_NO;
    }

    @Override
    public Field<LocalDateTime> field6() {
        return TokenInfo.TOKEN_INFO.UPDATE_TIME;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getIdent();
    }

    @Override
    public Long component3() {
        return getNumberOfHolders();
    }

    @Override
    public BigInteger component4() {
        return getVolume_24h();
    }

    @Override
    public Long component5() {
        return getBlockNo();
    }

    @Override
    public LocalDateTime component6() {
        return getUpdateTime();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getIdent();
    }

    @Override
    public Long value3() {
        return getNumberOfHolders();
    }

    @Override
    public BigInteger value4() {
        return getVolume_24h();
    }

    @Override
    public Long value5() {
        return getBlockNo();
    }

    @Override
    public LocalDateTime value6() {
        return getUpdateTime();
    }

    @Override
    public TokenInfoRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public TokenInfoRecord value2(Long value) {
        setIdent(value);
        return this;
    }

    @Override
    public TokenInfoRecord value3(Long value) {
        setNumberOfHolders(value);
        return this;
    }

    @Override
    public TokenInfoRecord value4(BigInteger value) {
        setVolume_24h(value);
        return this;
    }

    @Override
    public TokenInfoRecord value5(Long value) {
        setBlockNo(value);
        return this;
    }

    @Override
    public TokenInfoRecord value6(LocalDateTime value) {
        setUpdateTime(value);
        return this;
    }

    @Override
    public TokenInfoRecord values(Long value1, Long value2, Long value3, BigInteger value4, Long value5, LocalDateTime value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TokenInfoRecord
     */
    public TokenInfoRecord() {
        super(TokenInfo.TOKEN_INFO);
    }

    /**
     * Create a detached, initialised TokenInfoRecord
     */
    public TokenInfoRecord(Long id, Long ident, Long numberOfHolders, BigInteger volume_24h, Long blockNo, LocalDateTime updateTime) {
        super(TokenInfo.TOKEN_INFO);

        setId(id);
        setIdent(ident);
        setNumberOfHolders(numberOfHolders);
        setVolume_24h(volume_24h);
        setBlockNo(blockNo);
        setUpdateTime(updateTime);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised TokenInfoRecord
     */
    public TokenInfoRecord(org.cardanofoundation.ledgersync.jooq.tables.pojos.TokenInfo value) {
        super(TokenInfo.TOKEN_INFO);

        if (value != null) {
            setId(value.getId());
            setIdent(value.getIdent());
            setNumberOfHolders(value.getNumberOfHolders());
            setVolume_24h(value.getVolume_24h());
            setBlockNo(value.getBlockNo());
            setUpdateTime(value.getUpdateTime());
            resetChangedOnNotNull();
        }
    }
}
