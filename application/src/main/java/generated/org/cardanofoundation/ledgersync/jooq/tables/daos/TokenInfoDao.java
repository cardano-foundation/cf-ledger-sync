/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables.daos;


import java.math.BigInteger;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.cardanofoundation.ledgersync.jooq.AbstractSpringDAOImpl;
import org.cardanofoundation.ledgersync.jooq.tables.TokenInfo;
import org.cardanofoundation.ledgersync.jooq.tables.records.TokenInfoRecord;
import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class TokenInfoDao extends AbstractSpringDAOImpl<TokenInfoRecord, org.cardanofoundation.ledgersync.jooq.tables.pojos.TokenInfo, Long> {

    /**
     * Create a new TokenInfoDao without any configuration
     */
    public TokenInfoDao() {
        super(TokenInfo.TOKEN_INFO, org.cardanofoundation.ledgersync.jooq.tables.pojos.TokenInfo.class);
    }

    /**
     * Create a new TokenInfoDao with an attached configuration
     */
    @Autowired
    public TokenInfoDao(Configuration configuration) {
        super(TokenInfo.TOKEN_INFO, org.cardanofoundation.ledgersync.jooq.tables.pojos.TokenInfo.class, configuration);
    }

    @Override
    public Long getId(org.cardanofoundation.ledgersync.jooq.tables.pojos.TokenInfo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.TokenInfo> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TokenInfo.TOKEN_INFO.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.TokenInfo> fetchById(Long... values) {
        return fetch(TokenInfo.TOKEN_INFO.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public org.cardanofoundation.ledgersync.jooq.tables.pojos.TokenInfo fetchOneById(Long value) {
        return fetchOne(TokenInfo.TOKEN_INFO.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<org.cardanofoundation.ledgersync.jooq.tables.pojos.TokenInfo> fetchOptionalById(Long value) {
        return fetchOptional(TokenInfo.TOKEN_INFO.ID, value);
    }

    /**
     * Fetch records that have <code>ident BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.TokenInfo> fetchRangeOfIdent(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TokenInfo.TOKEN_INFO.IDENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ident IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.TokenInfo> fetchByIdent(Long... values) {
        return fetch(TokenInfo.TOKEN_INFO.IDENT, values);
    }

    /**
     * Fetch a unique record that has <code>ident = value</code>
     */
    public org.cardanofoundation.ledgersync.jooq.tables.pojos.TokenInfo fetchOneByIdent(Long value) {
        return fetchOne(TokenInfo.TOKEN_INFO.IDENT, value);
    }

    /**
     * Fetch a unique record that has <code>ident = value</code>
     */
    public Optional<org.cardanofoundation.ledgersync.jooq.tables.pojos.TokenInfo> fetchOptionalByIdent(Long value) {
        return fetchOptional(TokenInfo.TOKEN_INFO.IDENT, value);
    }

    /**
     * Fetch records that have <code>number_of_holders BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.TokenInfo> fetchRangeOfNumberOfHolders(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TokenInfo.TOKEN_INFO.NUMBER_OF_HOLDERS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>number_of_holders IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.TokenInfo> fetchByNumberOfHolders(Long... values) {
        return fetch(TokenInfo.TOKEN_INFO.NUMBER_OF_HOLDERS, values);
    }

    /**
     * Fetch records that have <code>volume_24h BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.TokenInfo> fetchRangeOfVolume_24h(BigInteger lowerInclusive, BigInteger upperInclusive) {
        return fetchRange(TokenInfo.TOKEN_INFO.VOLUME_24H, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>volume_24h IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.TokenInfo> fetchByVolume_24h(BigInteger... values) {
        return fetch(TokenInfo.TOKEN_INFO.VOLUME_24H, values);
    }

    /**
     * Fetch records that have <code>block_no BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.TokenInfo> fetchRangeOfBlockNo(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TokenInfo.TOKEN_INFO.BLOCK_NO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>block_no IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.TokenInfo> fetchByBlockNo(Long... values) {
        return fetch(TokenInfo.TOKEN_INFO.BLOCK_NO, values);
    }

    /**
     * Fetch records that have <code>update_time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.TokenInfo> fetchRangeOfUpdateTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(TokenInfo.TOKEN_INFO.UPDATE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>update_time IN (values)</code>
     */
    public List<org.cardanofoundation.ledgersync.jooq.tables.pojos.TokenInfo> fetchByUpdateTime(LocalDateTime... values) {
        return fetch(TokenInfo.TOKEN_INFO.UPDATE_TIME, values);
    }
}
