/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.cardanofoundation.ledgersync.jooq.DefaultSchema;
import org.cardanofoundation.ledgersync.jooq.Indexes;
import org.cardanofoundation.ledgersync.jooq.Keys;
import org.cardanofoundation.ledgersync.jooq.tables.records.ScriptRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Script extends TableImpl<ScriptRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>script</code>
     */
    public static final Script SCRIPT = new Script();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScriptRecord> getRecordType() {
        return ScriptRecord.class;
    }

    /**
     * The column <code>script.id</code>.
     */
    public final TableField<ScriptRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>script.bytes</code>.
     */
    public final TableField<ScriptRecord, byte[]> BYTES = createField(DSL.name("bytes"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>script.hash</code>.
     */
    public final TableField<ScriptRecord, String> HASH = createField(DSL.name("hash"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>script.json</code>.
     */
    public final TableField<ScriptRecord, String> JSON = createField(DSL.name("json"), SQLDataType.VARCHAR(65535), this, "");

    /**
     * The column <code>script.serialised_size</code>.
     */
    public final TableField<ScriptRecord, Integer> SERIALISED_SIZE = createField(DSL.name("serialised_size"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>script.type</code>.
     */
    public final TableField<ScriptRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>script.tx_id</code>.
     */
    public final TableField<ScriptRecord, Long> TX_ID = createField(DSL.name("tx_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private Script(Name alias, Table<ScriptRecord> aliased) {
        this(alias, aliased, null);
    }

    private Script(Name alias, Table<ScriptRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>script</code> table reference
     */
    public Script(String alias) {
        this(DSL.name(alias), SCRIPT);
    }

    /**
     * Create an aliased <code>script</code> table reference
     */
    public Script(Name alias) {
        this(alias, SCRIPT);
    }

    /**
     * Create a <code>script</code> table reference
     */
    public Script() {
        this(DSL.name("script"), null);
    }

    public <O extends Record> Script(Table<O> child, ForeignKey<O, ScriptRecord> key) {
        super(child, key, SCRIPT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SCRIPT_TX_ID, Indexes.SCRIPT_HASH_UINDEX);
    }

    @Override
    public Identity<ScriptRecord, Long> getIdentity() {
        return (Identity<ScriptRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ScriptRecord> getPrimaryKey() {
        return Keys.SCRIPT_PKEY;
    }

    @Override
    public Script as(String alias) {
        return new Script(DSL.name(alias), this);
    }

    @Override
    public Script as(Name alias) {
        return new Script(alias, this);
    }

    @Override
    public Script as(Table<?> alias) {
        return new Script(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Script rename(String name) {
        return new Script(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Script rename(Name name) {
        return new Script(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Script rename(Table<?> name) {
        return new Script(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, byte[], String, String, Integer, String, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super byte[], ? super String, ? super String, ? super Integer, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super byte[], ? super String, ? super String, ? super Integer, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
