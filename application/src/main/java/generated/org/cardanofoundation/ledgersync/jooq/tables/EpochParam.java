/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.ledgersync.jooq.tables;


import java.math.BigInteger;
import java.util.Arrays;
import java.util.List;

import org.cardanofoundation.ledgersync.jooq.DefaultSchema;
import org.cardanofoundation.ledgersync.jooq.Indexes;
import org.cardanofoundation.ledgersync.jooq.Keys;
import org.cardanofoundation.ledgersync.jooq.tables.records.EpochParamRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EpochParam extends TableImpl<EpochParamRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>epoch_param</code>
     */
    public static final EpochParam EPOCH_PARAM = new EpochParam();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EpochParamRecord> getRecordType() {
        return EpochParamRecord.class;
    }

    /**
     * The column <code>epoch_param.id</code>.
     */
    public final TableField<EpochParamRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>epoch_param.coins_per_utxo_size</code>.
     */
    public final TableField<EpochParamRecord, BigInteger> COINS_PER_UTXO_SIZE = createField(DSL.name("coins_per_utxo_size"), SQLDataType.DECIMAL_INTEGER(20), this, "");

    /**
     * The column <code>epoch_param.collateral_percent</code>.
     */
    public final TableField<EpochParamRecord, Integer> COLLATERAL_PERCENT = createField(DSL.name("collateral_percent"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>epoch_param.decentralisation</code>.
     */
    public final TableField<EpochParamRecord, Double> DECENTRALISATION = createField(DSL.name("decentralisation"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>epoch_param.epoch_no</code>.
     */
    public final TableField<EpochParamRecord, Integer> EPOCH_NO = createField(DSL.name("epoch_no"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>epoch_param.extra_entropy</code>.
     */
    public final TableField<EpochParamRecord, String> EXTRA_ENTROPY = createField(DSL.name("extra_entropy"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>epoch_param.influence</code>.
     */
    public final TableField<EpochParamRecord, Double> INFLUENCE = createField(DSL.name("influence"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>epoch_param.key_deposit</code>.
     */
    public final TableField<EpochParamRecord, BigInteger> KEY_DEPOSIT = createField(DSL.name("key_deposit"), SQLDataType.DECIMAL_INTEGER(20).nullable(false), this, "");

    /**
     * The column <code>epoch_param.max_bh_size</code>.
     */
    public final TableField<EpochParamRecord, Integer> MAX_BH_SIZE = createField(DSL.name("max_bh_size"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>epoch_param.max_block_ex_mem</code>.
     */
    public final TableField<EpochParamRecord, BigInteger> MAX_BLOCK_EX_MEM = createField(DSL.name("max_block_ex_mem"), SQLDataType.DECIMAL_INTEGER(20), this, "");

    /**
     * The column <code>epoch_param.max_block_ex_steps</code>.
     */
    public final TableField<EpochParamRecord, BigInteger> MAX_BLOCK_EX_STEPS = createField(DSL.name("max_block_ex_steps"), SQLDataType.DECIMAL_INTEGER(20), this, "");

    /**
     * The column <code>epoch_param.max_block_size</code>.
     */
    public final TableField<EpochParamRecord, Integer> MAX_BLOCK_SIZE = createField(DSL.name("max_block_size"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>epoch_param.max_collateral_inputs</code>.
     */
    public final TableField<EpochParamRecord, Integer> MAX_COLLATERAL_INPUTS = createField(DSL.name("max_collateral_inputs"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>epoch_param.max_epoch</code>.
     */
    public final TableField<EpochParamRecord, Integer> MAX_EPOCH = createField(DSL.name("max_epoch"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>epoch_param.max_tx_ex_mem</code>.
     */
    public final TableField<EpochParamRecord, BigInteger> MAX_TX_EX_MEM = createField(DSL.name("max_tx_ex_mem"), SQLDataType.DECIMAL_INTEGER(20), this, "");

    /**
     * The column <code>epoch_param.max_tx_ex_steps</code>.
     */
    public final TableField<EpochParamRecord, BigInteger> MAX_TX_EX_STEPS = createField(DSL.name("max_tx_ex_steps"), SQLDataType.DECIMAL_INTEGER(20), this, "");

    /**
     * The column <code>epoch_param.max_tx_size</code>.
     */
    public final TableField<EpochParamRecord, Integer> MAX_TX_SIZE = createField(DSL.name("max_tx_size"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>epoch_param.max_val_size</code>.
     */
    public final TableField<EpochParamRecord, BigInteger> MAX_VAL_SIZE = createField(DSL.name("max_val_size"), SQLDataType.DECIMAL_INTEGER(20), this, "");

    /**
     * The column <code>epoch_param.min_fee_a</code>.
     */
    public final TableField<EpochParamRecord, Integer> MIN_FEE_A = createField(DSL.name("min_fee_a"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>epoch_param.min_fee_b</code>.
     */
    public final TableField<EpochParamRecord, Integer> MIN_FEE_B = createField(DSL.name("min_fee_b"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>epoch_param.min_pool_cost</code>.
     */
    public final TableField<EpochParamRecord, BigInteger> MIN_POOL_COST = createField(DSL.name("min_pool_cost"), SQLDataType.DECIMAL_INTEGER(20).nullable(false), this, "");

    /**
     * The column <code>epoch_param.min_utxo_value</code>.
     */
    public final TableField<EpochParamRecord, BigInteger> MIN_UTXO_VALUE = createField(DSL.name("min_utxo_value"), SQLDataType.DECIMAL_INTEGER(20), this, "");

    /**
     * The column <code>epoch_param.monetary_expand_rate</code>.
     */
    public final TableField<EpochParamRecord, Double> MONETARY_EXPAND_RATE = createField(DSL.name("monetary_expand_rate"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>epoch_param.nonce</code>.
     */
    public final TableField<EpochParamRecord, String> NONCE = createField(DSL.name("nonce"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>epoch_param.optimal_pool_count</code>.
     */
    public final TableField<EpochParamRecord, Integer> OPTIMAL_POOL_COUNT = createField(DSL.name("optimal_pool_count"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>epoch_param.pool_deposit</code>.
     */
    public final TableField<EpochParamRecord, BigInteger> POOL_DEPOSIT = createField(DSL.name("pool_deposit"), SQLDataType.DECIMAL_INTEGER(20).nullable(false), this, "");

    /**
     * The column <code>epoch_param.price_mem</code>.
     */
    public final TableField<EpochParamRecord, Double> PRICE_MEM = createField(DSL.name("price_mem"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>epoch_param.price_step</code>.
     */
    public final TableField<EpochParamRecord, Double> PRICE_STEP = createField(DSL.name("price_step"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>epoch_param.protocol_major</code>.
     */
    public final TableField<EpochParamRecord, Integer> PROTOCOL_MAJOR = createField(DSL.name("protocol_major"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>epoch_param.protocol_minor</code>.
     */
    public final TableField<EpochParamRecord, Integer> PROTOCOL_MINOR = createField(DSL.name("protocol_minor"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>epoch_param.treasury_growth_rate</code>.
     */
    public final TableField<EpochParamRecord, Double> TREASURY_GROWTH_RATE = createField(DSL.name("treasury_growth_rate"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>epoch_param.block_id</code>.
     */
    public final TableField<EpochParamRecord, Long> BLOCK_ID = createField(DSL.name("block_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>epoch_param.cost_model_id</code>.
     */
    public final TableField<EpochParamRecord, Long> COST_MODEL_ID = createField(DSL.name("cost_model_id"), SQLDataType.BIGINT, this, "");

    private EpochParam(Name alias, Table<EpochParamRecord> aliased) {
        this(alias, aliased, null);
    }

    private EpochParam(Name alias, Table<EpochParamRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>epoch_param</code> table reference
     */
    public EpochParam(String alias) {
        this(DSL.name(alias), EPOCH_PARAM);
    }

    /**
     * Create an aliased <code>epoch_param</code> table reference
     */
    public EpochParam(Name alias) {
        this(alias, EPOCH_PARAM);
    }

    /**
     * Create a <code>epoch_param</code> table reference
     */
    public EpochParam() {
        this(DSL.name("epoch_param"), null);
    }

    public <O extends Record> EpochParam(Table<O> child, ForeignKey<O, EpochParamRecord> key) {
        super(child, key, EPOCH_PARAM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_EPOCH_PARAM_BLOCK_ID, Indexes.IDX_EPOCH_PARAM_COST_MODEL_ID);
    }

    @Override
    public Identity<EpochParamRecord, Long> getIdentity() {
        return (Identity<EpochParamRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EpochParamRecord> getPrimaryKey() {
        return Keys.EPOCH_PARAM_PKEY;
    }

    @Override
    public List<UniqueKey<EpochParamRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_EPOCH_PARAM);
    }

    @Override
    public EpochParam as(String alias) {
        return new EpochParam(DSL.name(alias), this);
    }

    @Override
    public EpochParam as(Name alias) {
        return new EpochParam(alias, this);
    }

    @Override
    public EpochParam as(Table<?> alias) {
        return new EpochParam(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EpochParam rename(String name) {
        return new EpochParam(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EpochParam rename(Name name) {
        return new EpochParam(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EpochParam rename(Table<?> name) {
        return new EpochParam(name.getQualifiedName(), null);
    }
}
