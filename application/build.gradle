plugins {
    id 'org.springframework.boot' version '3.2.2'
    id 'nu.studer.jooq' version '8.2.3'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    implementation project(':components:common')
    implementation project(':components:consumer-common')
    implementation project(':components:govoffchain-scheduler')
    implementation project(':components:scheduler')
    implementation project(':components:healthcheck')

    implementation(libs.yaci.store.starter)
    implementation(libs.yaci.store.governance.starter)
    implementation(libs.yaci.store.epoch.starter)

    implementation(libs.cardano.client.lib)

    implementation(libs.snakeyaml)
    implementation(libs.guava)
    implementation(libs.log4j.core)
    implementation(libs.log4j.api)
    implementation(libs.map.struct)

    runtimeOnly 'org.postgresql:postgresql'

    compileOnly(libs.lombok)
    annotationProcessor(libs.lombok)
    annotationProcessor(libs.lombok.mapstruct.binding)
    annotationProcessor(libs.mapstruct.processor)

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation('org.hsqldb:hsqldb')
    testImplementation(libs.pitest)
    testCompileOnly(libs.lombok)
    testAnnotationProcessor(libs.lombok)
}

compileJava {
    options.compilerArgs += ['-Amapstruct.defaultComponentModel=spring']
}

dependencies {
    jooqGenerator 'org.postgresql:postgresql'
}

ext {
    dbUrl = 'jdbc:postgresql://localhost:5432/ledger_sync'
    dbUser = 'postgres'
    dbPassword = '1'
    dbSchema = 'mainnet'
}

jooq {
    version = '3.18.9'
    configurations {
        main {
            generateSchemaSourceOnCompilation = false
            generationTool {
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = dbUrl
                    user = dbUser
                    password = dbPassword
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'

                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        includes = "${dbSchema}.*"
                        excludes = 'FLYWAY_SCHEMA_HISTORY | UNUSED_TABLE | PREFIX_.* | SECRET_SCHEMA.SECRET_TABLE | SECRET_ROUTINE'
                        schemata {
                            schema {
                                inputSchema =  dbSchema
                                outputSchemaToDefault = true
                            }
                        }
                    }
                    target {
                        directory = file('src/generated')
                        packageName = 'org.cardanofoundation.ledgersync.jooq';
                    }
                    generate {
                        // Generate the DAO classes
                        daos = true
                        // Annotate DAOs (and other types) with spring annotations, such as @Repository and @Autowired
                        // for auto-wiring the Configuration instance, e.g. from Spring Boot's jOOQ starter
                        springAnnotations = true
                        // Generate Spring-specific DAOs containing @Transactional annotations
                        springDao = true
                    }
                }
            }
        }
    }
}

jar {
    enabled = false
}
