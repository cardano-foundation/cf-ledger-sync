apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'org.flywaydb.flyway'
apply plugin: 'nu.studer.jooq'

if (!name.equalsIgnoreCase("components")) {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact(sourceJar) {
                    classifier = 'sources'
                }
                artifact(javadocJar) {
                    classifier = 'javadoc'
                }

                artifactId 'ledger-sync-' + project.name

                pom {
                    url = 'https://github.com/cardanofoundation/cf-ledger-sync'
                    licenses {
                        license {
                            name = 'Apache License 2.0'
                            url = 'https://www.apache.org/licenses/LICENSE-2.0'
                        }
                    }
                    developers {
                        developer {
//                            id = ''
//                            name = ''
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/cardanofoundation/cf-ledger-sync'
                        developerConnection = 'scm:git:ssh://git@github.com/cardanofoundation/cf-ledger-sync'
                        url = 'https://github.com/cardanofoundation/cf-ledger-sync'
                    }
                }
            }
        }

        repositories {
            String ossrhUsername = System.getenv('MAVEN_USERNAME')
            String ossrhPassword = System.getenv('MAVEN_PASSWORD')

            maven {
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
    }
}

//JOOQ generator
//Add store modules to this array
def jooq_modules = ['account']
if (jooq_modules.contains(name)) {
    configurations {
        flywayMigration
    }

    dependencies {
        flywayMigration 'com.h2database:h2'
        jooqGenerator 'com.h2database:h2'
    }

    flyway {
        configurations = ['flywayMigration']
        url = 'jdbc:h2:' + project.buildDir.absolutePath + File.separator + 'testdb;DATABASE_TO_LOWER=TRUE;CASE_INSENSITIVE_IDENTIFIERS=TRUE;INIT=CREATE SCHEMA IF NOT EXISTS \"PUBLIC\"\\;'
        user = 'sa'
        password = ''
        locations = ['filesystem:src/main/resources/db/']
        createSchemas = true
        schemas = ['PUBLIC']
//            cleanOnValidationError = true
//            cleanDisabled = false
    }

    jooq {
        version = '3.18.9'
        configurations {
            main {
                generationTool {
//                        logging = org.jooq.meta.jaxb.Logging.WARN
                    jdbc {
                        driver = 'org.h2.Driver'
                        url = flyway.url
                        user = flyway.user
                        password = flyway.password
                    }
                    generator {
                        name = 'org.jooq.codegen.DefaultGenerator'
                        database {
                            name = 'org.jooq.meta.h2.H2Database'
                            includes = 'PUBLIC.*'
                            excludes = 'FLYWAY_SCHEMA_HISTORY | UNUSED_TABLE | PREFIX_.* | SECRET_SCHEMA.SECRET_TABLE | SECRET_ROUTINE'

                            schemata {
                                schema {
                                    inputSchema = 'PUBLIC'
                                    outputSchemaToDefault = true
                                }
                            }
                        }
                        target {
                            packageName = 'org.cardanofoundation.ledgersync.' + project.name + ".jooq";
                        }

                        generate {
                            // Generate the DAO classes
                            daos = true
                            // Annotate DAOs (and other types) with spring annotations, such as @Repository and @Autowired
                            // for auto-wiring the Configuration instance, e.g. from Spring Boot's jOOQ starter
                            springAnnotations = true
                            // Generate Spring-specific DAOs containing @Transactional annotations
                            springDao = true
                        }
                    }
                }
            }
        }
    }

    // configure jOOQ task such that it only executes when something has changed that potentially affects the generated JOOQ sources
    // - the jOOQ configuration has changed (Jdbc, Generator, Strategy, etc.)
    // - the classpath used to execute the jOOQ generation tool has changed (jOOQ library, database driver, strategy classes, etc.)
    // - the schema files from which the schema is generated and which is used by jOOQ to generate the sources have changed (scripts added, modified, etc.)
    tasks.named('generateJooq').configure {
        // ensure database schema has been prepared by Flyway before generating the jOOQ sources
        dependsOn tasks.named('flywayMigrate')

        // declare Flyway migration scripts as inputs on the jOOQ task
        inputs.files(fileTree('src/main/resources/db/'))
                .withPropertyName('migrations')
                .withPathSensitivity(PathSensitivity.RELATIVE)

        // make jOOQ task participate in incremental builds (and build caching)
        allInputsDeclared = true
    }
}


ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

if (isReleaseVersion && !project.hasProperty("skipSigning")) {
    signing {
        sign publishing.publications
    }
}
